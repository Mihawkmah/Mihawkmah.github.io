<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>末小山 | 解锁产品&amp;数据成就</title>
  <subtitle>积石成岩 流则不荒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mihawkmah.github.io/"/>
  <updated>2018-01-01T14:41:32.000Z</updated>
  <id>https://mihawkmah.github.io/</id>
  
  <author>
    <name>Mihawkmah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018，如你所愿。</title>
    <link href="https://mihawkmah.github.io/2018/01/01/2018%E5%A6%82%E4%BD%A0%E6%89%80%E6%84%BF/"/>
    <id>https://mihawkmah.github.io/2018/01/01/2018如你所愿/</id>
    <published>2018-01-01T14:39:22.000Z</published>
    <updated>2018-01-01T14:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2017时间的朋友"><a href="#2017时间的朋友" class="headerlink" title="2017时间的朋友"></a>2017时间的朋友</h4><blockquote>
<p><strong>人生算法</strong> 你面对世界不断重复的最基本的套路。根据反馈不断迭代，不断提高达成目标的概率。</p>
</blockquote>
<p>查理芒格：当成功概率很高的时刻，下最大的赌注，其余时间按兵不动。</p>
<p>巴菲特：人生就像滚雪球，重要的是发现很湿的雪和很长的坡。</p>
<h4 id="滴滴-柳青"><a href="#滴滴-柳青" class="headerlink" title="滴滴 柳青"></a>滴滴 柳青</h4><p>竞争要永远围绕着为用户创造价值这一件事，竞争应该是关乎你到底战场在哪里，应该怎么样给更多人提供服务、创造价值的一个讨论。</p>
<p><strong>颠覆已经过时</strong>。这个时候比的是你的思考的深度和缜密度，除了定位好自己、明白要提供什么用户价值以外，还要把周围的所有生态，把他们的出路都要想得非常清楚。</p>
<p>前几年的创新是业务线的创新，今天的创新是在技术层面的，是非常底层的创新。</p>
<p>哪个组织能够最好地把完全不同的人吸引到一起，向一个方向走，才是最强的组织。</p>
<h4 id="饿了么-张旭豪"><a href="#饿了么-张旭豪" class="headerlink" title="饿了么 张旭豪"></a>饿了么 张旭豪</h4><p>过去的互联网解决信息不对称的问题。但是移动互联网走到今天，解决的已经是便利性的问题。</p>
<p><strong>便利和便捷是所有服务中最核心的因素。</strong>之前的用户对价格敏感，现在的消费者耐心越来越差，愿意为了便捷和快去付费。</p>
<p>极速服务体验的同时，是效率的优化。成本永远是你的上线，必须不断去降低成本，提高效率。</p>
<p>过去的竞争是显性的竞争，而现在的竞争是企业内功的竞争，是效率、成本方面的竞争。</p>
<p>对于平台类、交易类公司，真正的创新是对效率的极度痴迷和极度苛刻。</p>
<p>更重、更深、更精细化、更垂直是整个互联网公司下一个十年的走向。</p>
<p>OMO，单纯做线上，已经很难有质的飞跃。想要给消费者提供更好的产品和服务体验，必须融合线下，在供给侧去做优化。</p>
<p>当行业发展到一定程度，线上能带来的服务品质的提升比较有限的时候，转向线下和线上更多融合，就是必然的演化。上半场大家可能更关注流量的获取，下半场则是服务品质的提升。</p>
<p>我们的核心就是两个词：一个是品类，一个是物流。</p>
<p>我只做跟核心竞争力有关的，跟核心竞争力无关的，我就不做，就这么简单。</p>
<h4 id="红杉-沈南鹏"><a href="#红杉-沈南鹏" class="headerlink" title="红杉 沈南鹏"></a>红杉 沈南鹏</h4><p>强者越强，马太效应。</p>
<p>互联网行业已经不仅仅局限于线上的互联网产品本身，它同时包括对“传统”产业的改造与升级。</p>
<p>硬件有一个特征，它跟地域文化的关联度并不是那么紧密。另一个特征是很难赢家通吃，这跟互联网的特征不同。</p>
<p>产品差异化的表象背后所体现的，是你是否具备更强的技术能力，能否有独特的商业模式，执行力是不是比对手更强。</p>
<p>互联网产品未必应该做得更重。</p>
<p><strong>寻找新的、没有被满足的市场需求，永远有机会。</strong></p>
<p>当你置身一个巨大的市场中时，你会发现，跟它相关的产品和服务也会兴起。</p>
<h4 id="快手-宿华"><a href="#快手-宿华" class="headerlink" title="快手 宿华"></a>快手 宿华</h4><p>2017年，中国仍然有85%的人是高中和高中以下学历的。在中国做一个大众产品，你一定要照顾到尽可能多的人，让你的产品足够地简单易用。</p>
<p>算法是工程师把我们对产品、对用户、对世界的理解，以程序的方式自动运行。在运行的过程中，每次的推送、每次的展现、每次模型的生成，都在反映我们的价值观。</p>
<p>对广告商业化本身，我认为它应该尽量地晚，另外它应该尽量地不打扰用户。</p>
<p>我们会尽量淡化公司的存在感。</p>
<p>我们希望内容尽量自然，所以不会去刺激用户发布内容。</p>
<p>快手没有榜单，而且除了极个别情况之外，我不允许快手发推送。</p>
<h4 id="链家-左晖"><a href="#链家-左晖" class="headerlink" title="链家 左晖"></a>链家 左晖</h4><p>住宅领域，决策比较重，相对来说更低频。</p>
<p>链家培养和聚集了一批房地产互联网用户，意味着我们生产了第一批可供消费的房地产数据。</p>
<p>我不觉得房地产是一个低频的消费，房地产内容的消费非常高频。今天的房地产类目只覆盖了3%的互联网用户，我估计最终能覆盖到30%的用户。所以在内容这一块，还有很大的空间。</p>
<p>低频的生意想赚钱，不会容易。但低频的生意一旦赚钱了，一定是在某些基础设施上，做了很重的投入和沉淀，理论上来说，这些基础设施有可能被重复使用。这是平台化的基础。</p>
<p>整个装修家居产业大概是4万亿的市场，90%左右发生在交易环节，只有10%左右发生在持有环节。</p>
<p>我们是在这两个维度上扩展边界，第一个维度是在整个社区的服务上，第二个维度是在除了开发之外的整个房地产产业。</p>
<p><strong>我觉得今天中国最迫切需要解决的事情是基础服务的品质。</strong></p>
<p>新一代的服务者，要懂得如何利用线上和线下的技术，如何通过线上的技术去服务消费者，这都是新的能力。</p>
<p>我们要做的就是帮助这些服务者，在短期利益和长期价值之间做出选择，即使短期有损失，也要去选择长期的价值，而不是短期的收益。</p>
<p><strong>人的诚信不是罚出来的。</strong>更有效的管理实际上是荣誉管理。服务者会被荣誉激励。</p>
<p>不管你是不是真的能干，你自认为自己比较弱，只有比较弱的人才需要别人帮助，需要别人帮助的人才会去帮别人。</p>
<h4 id="《原则》"><a href="#《原则》" class="headerlink" title="《原则》"></a>《原则》</h4><p>当你们要做决定的时候，一定要把自己的原则写下来。要写下来为什么当时做出那样的决策是最好的，以及为什么要以那样的方式来做决策。</p>
<p>当它变成写出来的东西时，一些美妙的事情就会发生。首先，人们彼此之间可以做到坦诚相见；其次，你可以随着时间推移不断地完善这些原则。它使得所有事情都越来越清晰明了。</p>
<p><strong>绝对透明和绝对坦诚</strong>，适用于所有的关系。首先，它会减少思维上的混乱，而混乱会使得组织中的关系丧失它的效率。第二就是它能建立人和人之间的信任。</p>
<p><strong>创意择优。</strong>第一，把自己的真实想法摆在台面上，不要遮遮掩掩；第二，收集经过深思熟虑的不同意见，反复思考，公开讨论，人们在学习中会转变自己的想法；第三，如果仍然存在分歧，建立一个超越分歧相互认同的决策方法。</p>
<p>这样的人思维开放，愿意接受别人的想法。他们可以把自己对某个问题的原有成见放在一边，然后为自己做出更好的决定。</p>
<p>人有两个自我，第一个就是站得更高一些的自我，第二个是站得比较低的自我。每一个内心都有两个自我的剧烈冲突。也就是说，如果你能够在做决定的时候既考虑到高层次的自我，也考虑到低层次的自我，把它们结合在一起考虑，那么你所做出的决定对你来说就是最好的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;2017时间的朋友&quot;&gt;&lt;a href=&quot;#2017时间的朋友&quot; class=&quot;headerlink&quot; title=&quot;2017时间的朋友&quot;&gt;&lt;/a&gt;2017时间的朋友&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;人生算法&lt;/strong&gt; 你面对世界不断
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工具APP「 红包语音名片 」原型分享</title>
    <link href="https://mihawkmah.github.io/2017/12/19/%E5%B7%A5%E5%85%B7APP%E7%BA%A2%E5%8C%85%E8%AF%AD%E9%9F%B3%E5%90%8D%E7%89%87%E5%8E%9F%E5%9E%8B%E5%88%86%E4%BA%AB/"/>
    <id>https://mihawkmah.github.io/2017/12/19/工具APP红包语音名片原型分享/</id>
    <published>2017-12-19T09:52:25.000Z</published>
    <updated>2017-12-19T09:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/12/19/工具APP红包语音名片原型分享/1.jpg" alt="1"></p>
<a id="more"></a>
<p><img src="/2017/12/19/工具APP红包语音名片原型分享/2.jpg" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/12/19/工具APP红包语音名片原型分享/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>社会化聆听系统需求分析</title>
    <link href="https://mihawkmah.github.io/2017/12/19/%E7%A4%BE%E4%BC%9A%E5%8C%96%E8%81%86%E5%90%AC%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <id>https://mihawkmah.github.io/2017/12/19/社会化聆听系统需求分析/</id>
    <published>2017-12-19T09:24:16.000Z</published>
    <updated>2017-12-19T09:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-项目分析"><a href="#1-项目分析" class="headerlink" title="1 项目分析"></a>1 项目分析</h3><h4 id="1-1-需求调研"><a href="#1-1-需求调研" class="headerlink" title="1.1 需求调研"></a>1.1 需求调研</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/目标用户.png" alt="目标用户"></p>
<table>
<thead>
<tr>
<th>目标用户</th>
<th>需求场景梳理</th>
<th>遇到问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>政府</td>
<td>对于重大政治活动、公共突发事件、热点问题进行舆情监测，实时掌握事件的进展，尽早主动准确动态发布官方消息即时应对。</td>
<td>人工无法实时全面监测，对于事件的公众舆论无法实时了解，同时对于事件的走向无法实时预估。部分突发事件损害政府公信力。</td>
</tr>
<tr>
<td>企业</td>
<td>对企业负面信息实时有效的监测，判断舆论趋势并谋划公关策略。分析行业、市场、产品、竞争对手、消费者，为企业优化产品和服务以及决策提供数据基础。</td>
<td>无法有效监控突发事件，进而无法实时应对，造成长期积累的企业形象受破坏，口碑受损，给企业发展带来极大的负面影响。在企业经营的各个过程中需要数据支撑决策。</td>
</tr>
<tr>
<td>个人</td>
<td>公司产品、运营等相关职位工作人员制作相关分析报告。高校师生进行相关研究。中小型企业调查行业市场环境、产品服务、竞争对手、消费者。</td>
<td>互联网资讯很多，无法一条条去看去过滤。需要宏观层面的数据，手动搜集处理工作量大。</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>通过采集范围和分析频次两个维度对现阶段市场的社会化聆听需求进行拆解，可以得出如下分布：</p>
<p><img src="/2017/12/19/社会化聆听系统需求分析/需求分布.png" alt="需求分布"></p>
<h4 id="1-2-头部竞品解决方案"><a href="#1-2-头部竞品解决方案" class="headerlink" title="1.2 头部竞品解决方案"></a>1.2 头部竞品解决方案</h4><table>
<thead>
<tr>
<th>舆情平台</th>
<th>现有解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>阿里公众趋势分析</td>
<td>关键词组合舆情监控、事件分析、微博传播路径分析、热词分析、舆情预警</td>
</tr>
<tr>
<td>百度舆情API</td>
<td>自定义任务舆情监控、舆情预警、舆情分析（趋势、搜索词、观点分析、媒体分布、传播分析、受众分析、事件分析）、舆情报告</td>
</tr>
<tr>
<td>清博大数据</td>
<td>设置方案舆情监控、方案对比（可用于竞品）、舆情大屏、舆情报告、传播路径</td>
</tr>
<tr>
<td>腾讯企鹅风讯</td>
<td>行业风讯（公司、游戏媒体的声量走势和口碑分布）、产品风讯（游戏产品的口碑和用户喜好）</td>
</tr>
<tr>
<td>新浪舆情通</td>
<td>设置方案舆情监控、热词分析、竞品分析（方案对比）、微博传播分析</td>
</tr>
<tr>
<td>新浪微舆情</td>
<td>热词指数分析、热词情感分析、舆情分行业监测、舆情图表分析、舆情信息源定向监测、舆情预警、全网事件分析、微博事件分析、微博传播效果分析、竞品分析、新闻正文页评论分析、报告制作、定制报告</td>
</tr>
</tbody>
</table>
<p>通过上述对解决方案的梳理，现阶段市场上除了微博传播路径分析外，仅有腾讯企鹅风讯和新浪微舆情（舆情定向监测（站源或地区）、新闻正文页评论分析）2家公司提供定向采集的社会化聆听服务。</p>
<h4 id="1-3-社会化聆听系统分析"><a href="#1-3-社会化聆听系统分析" class="headerlink" title="1.3 社会化聆听系统分析"></a>1.3 社会化聆听系统分析</h4><h5 id="1-3-1-系统底层逻辑"><a href="#1-3-1-系统底层逻辑" class="headerlink" title="1.3.1 系统底层逻辑"></a>1.3.1 系统底层逻辑</h5><p><img src="/2017/12/19/社会化聆听系统需求分析/5W1H.png" alt="5W1H"></p>
<p>一篇内容里面包含的要素，可以通过5W1H分析法进行概括，这6个要素被视为一篇新闻应该让读者知道的讯息，同时这6个要素也可以视为现实世界在语言文字中的映射。</p>
<p>结构化数据指的是能够通过二维结构存储在表格中的数据，非结构化数据即除结构化数据之外的数据，如在互联网中产生的文本、图片、音频、视频等数据。根据IDC在2011年的调查显示，非结构化数据将占所有互联网产生数据的90%。</p>
<p>结构化数据的分析往往解答的是定量的问题，例如对数据进行透视、聚类、相关性等处理，但是对于为什么（潜在动机/真实需求）这种定性的问题往往不能有效的解答，而在经营决策过程中，对于人群行为动机和真实需求的洞察是非常重要的参考依据。当我们对大量非结构化数据进行文本分析时，即可实现对这种定性问题的解答。这里将此需求统一称为社会化聆听需求。</p>
<h5 id="1-3-2-系统采集元素"><a href="#1-3-2-系统采集元素" class="headerlink" title="1.3.2 系统采集元素"></a>1.3.2 系统采集元素</h5><p>区别于传统的报纸、广播、电视等，这里将博客、论坛、社区、百科、问答、点评、视频、相册、音乐等各种互联网形态都广义的归类于社会化媒体。</p>
<p><img src="/2017/12/19/社会化聆听系统需求分析/社会化媒体元素.png" alt="社会化媒体元素"></p>
<p>在社会化媒体中，产生的主要元素有文本、时间地点人物、操作行为、关系，操作行为包含阅读、转发、评论、收藏、点赞/喜欢、打赏、签到。</p>
<p>社会化聆听即是对上述元素的分析挖掘，展现元素及元素间的比较、构成、分布、关联。</p>
<h5 id="1-3-3-系统实现框架"><a href="#1-3-3-系统实现框架" class="headerlink" title="1.3.3 系统实现框架"></a>1.3.3 系统实现框架</h5><p><img src="/2017/12/19/社会化聆听系统需求分析/社会化聆听系统.png" alt="社会化聆听系统"></p>
<p>通过上述分析，可以将社会化聆听系统定义为：通过采集社会化媒体中的大量非结构化数据，对其进行文本分析及统计后，根据业务需求得出定性和定量的分析结果并可视化呈现出来。</p>
<h5 id="1-3-4-系统分析结论"><a href="#1-3-4-系统分析结论" class="headerlink" title="1.3.4 系统分析结论"></a>1.3.4 系统分析结论</h5><p>现阶段舆情市场，主要的业务集中在大范围采集日常化监测，而对一些企业经营过程中的特定常用场景支撑不足。对于非结构数据的定向采集实时分析往往能够提供更好更准确的决策依据，当然这方面需求可以采用爬虫采集人工分析的方案来解决，但是有一定的技术门槛，如果将这一需求做成一套易用性良好的工具可以有一定的市场。</p>
<p>方案可以初步设定为：</p>
<p><img src="/2017/12/19/社会化聆听系统需求分析/大功能模块.png" alt="大功能模块"></p>
<h3 id="2-市场分析"><a href="#2-市场分析" class="headerlink" title="2 市场分析"></a>2 市场分析</h3><h4 id="2-1-市场及竞品分析"><a href="#2-1-市场及竞品分析" class="headerlink" title="2.1 市场及竞品分析"></a>2.1 市场及竞品分析</h4><table>
<thead>
<tr>
<th>产品</th>
<th>定位</th>
<th>目标用户</th>
<th>定价</th>
<th>使用门槛</th>
</tr>
</thead>
<tbody>
<tr>
<td>阿里公众趋势分析API</td>
<td>识别公众对品牌形象、热点事件和公共政策的认知趋势。</td>
<td>研发团队、政企行业</td>
<td>9800一个月：20关键词、15万舆情、30万微博转发、100事件</td>
<td>高</td>
</tr>
<tr>
<td>百度舆情API</td>
<td>专业、开放、易用的互联网舆论分析平台</td>
<td>个人、政企、研发团队</td>
<td>实时舆情 129元/次 观点分析 129元/次 传播分析399 /次 事件分析129/次</td>
<td>低</td>
</tr>
<tr>
<td>清博大数据API</td>
<td>清博舆情以大数据为核心技术支撑，实时监测采集全网舆情信息，通过数据挖掘、可视化分析技术，提供舆情监测、分析报告、危机预警等一站式服务</td>
<td>个人、大客户</td>
<td>个人免费额度5000条； 10元 / 1万条数据 / 1个月</td>
<td>低</td>
</tr>
<tr>
<td>腾讯风讯</td>
<td>1、产品风讯查看APP在应用商店及论坛的评论口碑 2、行业风讯上查看游戏及游戏公司的相关资讯动态，是个游戏资讯网站。</td>
<td>APP应用、游戏。游戏行业。</td>
<td>免费</td>
<td>低</td>
</tr>
<tr>
<td>新浪舆情通</td>
<td>微博政企舆情专家</td>
<td>政府企业</td>
<td>5万一年，500关键词、10事件、10微博、10竞品分析。</td>
<td>高</td>
</tr>
<tr>
<td>新浪微舆情</td>
<td>专注于互联网舆情、商情监测及社会化大数据场景化应用</td>
<td>政务领域、营销领域、生活领域</td>
<td>按照功能收费：1、监测：关键字总数不超过500个字，可进行50次修改。30元/月，299元/月。2、事件分析：1次99元。3、微博传播：累计1200条转发数 9.9元</td>
<td>低</td>
</tr>
</tbody>
</table>
<h4 id="2-2-市场定位"><a href="#2-2-市场定位" class="headerlink" title="2.2 市场定位"></a>2.2 市场定位</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/市场定位.png" alt="市场定位"></p>
<p>如采用阿里的API接口能力，根据市场竞品定价来看阿里的使用门槛较高，且由于阿里是根据关键词采集的数量来进行收费，一个大众化的关键词会有较高的成本，个人用户普遍无法承受这样的成本，所以结合资金实力和付费意愿来分析，大型企业、政府机构、中小型企业，以及服务于大型企业的咨询机构、公关传媒、广告营销会是潜在客户，重点做大客户，即销售线下签单维护客户流程为主。</p>
<h4 id="2-3-产品定位"><a href="#2-3-产品定位" class="headerlink" title="2.3 产品定位"></a>2.3 产品定位</h4><p>市场上最实时、最准确、最业务导向的全网+定向采集社会化聆听服务</p>
<h3 id="3-产品概念设计"><a href="#3-产品概念设计" class="headerlink" title="3 产品概念设计"></a>3 产品概念设计</h3><h4 id="3-1-概念设计"><a href="#3-1-概念设计" class="headerlink" title="3.1 概念设计"></a>3.1 概念设计</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/概念设计.png" alt="概念设计"></p>
<h4 id="3-2-功能框架"><a href="#3-2-功能框架" class="headerlink" title="3.2 功能框架"></a>3.2 功能框架</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/功能框架.png" alt="功能框架"></p>
<h4 id="3-3-主流程规划"><a href="#3-3-主流程规划" class="headerlink" title="3.3 主流程规划"></a>3.3 主流程规划</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/主流程规划.png" alt="主流程规划"></p>
<h3 id="4-需求分析"><a href="#4-需求分析" class="headerlink" title="4 需求分析"></a>4 需求分析</h3><h4 id="4-1-主要场景梳理"><a href="#4-1-主要场景梳理" class="headerlink" title="4.1 主要场景梳理"></a>4.1 主要场景梳理</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/应用业务场景.png" alt="应用业务场景"></p>
<h4 id="4-2-主要场景需求分析"><a href="#4-2-主要场景需求分析" class="headerlink" title="4.2 主要场景需求分析"></a>4.2 主要场景需求分析</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/主要场景需求分析.png" alt="主要场景需求分析"></p>
<p>从客户广泛程度和需求强弱的角度进行分析，舆情监测、竞品分析、用户画像、口碑分析、消费倾向具有更大的市场价值，将其命名为我们的重点功能。</p>
<h4 id="4-2-支撑能力分析"><a href="#4-2-支撑能力分析" class="headerlink" title="4.2 支撑能力分析"></a>4.2 支撑能力分析</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/支撑分析能力.png" alt="支撑分析能力"></p>
<p>重点功能中的口碑分析和消费倾向，以及用户画像（只有地区，性别只有在微博传播中才有），目前阿里的接口不能很好的支撑。</p>
<h4 id="4-3-需求分析结论"><a href="#4-3-需求分析结论" class="headerlink" title="4.3 需求分析结论"></a>4.3 需求分析结论</h4><p>从客户广泛程度和需求强弱以及实现难度这几个方面来讲，舆情监测、竞品分析可以作为重点需求来进行开发，后期再分行业进行口碑和消费倾向的功能开发，再往后可以引入话题事件观点实时分析以及微博传播等功能。</p>
<p>同时结合业务及现有资源情况，可以以支持销售线下签单的流程为主，签单后运营使用平台来支持客户需求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-项目分析&quot;&gt;&lt;a href=&quot;#1-项目分析&quot; class=&quot;headerlink&quot; title=&quot;1 项目分析&quot;&gt;&lt;/a&gt;1 项目分析&lt;/h3&gt;&lt;h4 id=&quot;1-1-需求调研&quot;&gt;&lt;a href=&quot;#1-1-需求调研&quot; class=&quot;headerlink&quot; title=&quot;1.1 需求调研&quot;&gt;&lt;/a&gt;1.1 需求调研&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2017/12/19/社会化聆听系统需求分析/目标用户.png&quot; alt=&quot;目标用户&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目标用户&lt;/th&gt;
&lt;th&gt;需求场景梳理&lt;/th&gt;
&lt;th&gt;遇到问题&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;政府&lt;/td&gt;
&lt;td&gt;对于重大政治活动、公共突发事件、热点问题进行舆情监测，实时掌握事件的进展，尽早主动准确动态发布官方消息即时应对。&lt;/td&gt;
&lt;td&gt;人工无法实时全面监测，对于事件的公众舆论无法实时了解，同时对于事件的走向无法实时预估。部分突发事件损害政府公信力。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;企业&lt;/td&gt;
&lt;td&gt;对企业负面信息实时有效的监测，判断舆论趋势并谋划公关策略。分析行业、市场、产品、竞争对手、消费者，为企业优化产品和服务以及决策提供数据基础。&lt;/td&gt;
&lt;td&gt;无法有效监控突发事件，进而无法实时应对，造成长期积累的企业形象受破坏，口碑受损，给企业发展带来极大的负面影响。在企业经营的各个过程中需要数据支撑决策。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;个人&lt;/td&gt;
&lt;td&gt;公司产品、运营等相关职位工作人员制作相关分析报告。高校师生进行相关研究。中小型企业调查行业市场环境、产品服务、竞争对手、消费者。&lt;/td&gt;
&lt;td&gt;互联网资讯很多，无法一条条去看去过滤。需要宏观层面的数据，手动搜集处理工作量大。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>需求分析框架 | 从用户需求到产品需求的转化</title>
    <link href="https://mihawkmah.github.io/2017/12/14/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6-%E4%BB%8E%E7%94%A8%E6%88%B7%E9%9C%80%E6%B1%82%E5%88%B0%E4%BA%A7%E5%93%81%E9%9C%80%E6%B1%82%E7%9A%84%E8%BD%AC%E5%8C%96/"/>
    <id>https://mihawkmah.github.io/2017/12/14/需求分析框架-从用户需求到产品需求的转化/</id>
    <published>2017-12-14T05:30:38.000Z</published>
    <updated>2017-12-20T04:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>相同需求，相同资源的情况下，不同的产品设计决定产品成败。产品设计要充分驾驭需求，用户的动机会被很当时环境下的复杂因素所影响，这是非常考验用户研究和产品经理的硬本事。</p>
</blockquote>
<a id="more"></a>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p><strong>需求调研：</strong>立足于用户的环境、背景，去揣测用户行为背后思考的逻辑，结合场景寻找用户的痛点，并且对痛点的紧迫性和严重性有很强的判断力；</p>
<p><strong>市场分析：</strong>市场宏观上是由经济、文化、科技、政策等一系列的底层逻辑影响下决定的，多年积淀的经验和广泛的涉猎，可以在这个层面上起到作用；市场概况、融资情况、用户规模、市场发展趋势。</p>
<p><strong>产品定位：</strong>在窄域市场的容量、对手、竞争程度、市场机会等，这些决定了产品的天花板和产品成功的难度，这就需要很强的信息收集能力；每一个版本要有一个根据定位必须实现的功能。</p>
<h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p><strong>功能范围：</strong>与用户的需求是密切相关的，但是满足方式可能是不同的，福特创始人说过的那个“汽车与马”的故事永远是产品功能方面的经典案例；使用SWOT和KANO模型；判断能否给用户提供足够的价值：</p>
<blockquote>
<p>产品价值 = （ 新体验 – 旧体验）-  换用成本</p>
</blockquote>
<p><strong>人机交互：</strong>操作上明确，逻辑上完备，其次要有适合功能范围的层次结构，当然这也是一个动态调节的过程，细数互联网上的各款产品，都会随着产品服务范围的不断探索对产品结构起到大的调动，这需要很强的逻辑；</p>
<p><strong>展现体验：</strong>是一个产品给用户的第一印象，在激烈的市场竞争中，第一印象很重要！这需要对目标用户的理解和一定的审美；用户体验5要素：表现层、框架层、结构层、范围层、战略层。</p>
<p><strong>信息展示：</strong>如果是从0到1地打造一款产品，或者说产品设计是先于运营的，而且结合了市场、用户、功能、表现等等全方位的考量，所以至于展示什么样的信息，也是非常考验产品洞察力的。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><strong>商业模式：</strong>商业化变现方式</p>
<p><strong>运营模式：</strong>冷启动、成长期（获取用户、积攒口碑、建设品牌、快速抢占市场）、成熟期（保持住用户的活跃、粘性，同时要保持危机感盯紧竞争对手的动作必要时予以打击）、</p>
<p><img src="/2017/12/14/需求分析框架-从用户需求到产品需求的转化/需求分析框架.jpg" alt="需求分析框架"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;相同需求，相同资源的情况下，不同的产品设计决定产品成败。产品设计要充分驾驭需求，用户的动机会被很当时环境下的复杂因素所影响，这是非常考验用户研究和产品经理的硬本事。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017/10 泛读</title>
    <link href="https://mihawkmah.github.io/2017/10/18/2017-10-%E6%B3%9B%E8%AF%BB/"/>
    <id>https://mihawkmah.github.io/2017/10/18/2017-10-泛读/</id>
    <published>2017-10-18T04:08:53.000Z</published>
    <updated>2017-10-18T04:14:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消费心理学"><a href="#消费心理学" class="headerlink" title="消费心理学"></a>消费心理学</h3><ul>
<li>心理账户——有的时候客户不是觉得贵，只是觉得你的东西贵，因为你放错了账户。</li>
<li>沉没成本——人们往往会陷入这样的误区：前期投入越大，后期就会忍不住投入更多。</li>
<li>比例偏见——找到一个小的价格基础，展现一个大的优惠比例，会让消费者获得巨大的价值感。</li>
<li>损失规避——一个人因失去带来的痛苦。比等量得到产生的快乐，强烈2.5倍。</li>
<li>价格锚点——消费者并不是为商品的成本付费，而是为价值感付费。价格锚点的逻辑就是让消费者有一个可对比的价值感知。</li>
</ul>
<a id="more"></a>
<h3 id="行为经济学"><a href="#行为经济学" class="headerlink" title="行为经济学"></a>行为经济学</h3><ul>
<li>结果偏见——不能有不管黑猫白猫，抓住老鼠就是好猫的心理，因为有时候瞎猫也会碰到死耗子。</li>
<li>适应性偏见——工资是用来支付给责任的，责任越大，工资也高。涨工资是因为承担了更大的责任。发奖金，才应该用来奖励突出的业绩。</li>
<li>鸡蛋理论——想办法让用户参与到产品的设计中，甚至付出一些劳动会有效促进产品销售。心理概率事实上，人们的直觉和客观概率常常是不相符的，不要太依靠主观判断。我们很容易陷入以偏概全，眼见为实和先入为主的概率偏见当中。</li>
<li>凡勃伦效应——有时候，消费者购买某些商品，是为了获得心理满足。如果商家能做到让消费者恰到好处地炫耀、不露声色的装，那么产品卖得越贵越有人买。</li>
</ul>
<h3 id="微观经济学"><a href="#微观经济学" class="headerlink" title="微观经济学"></a>微观经济学</h3><ul>
<li>供需理论——坐下来想一想，你到底拥有什么稀缺的东西可以提供给消费者。比功能更稀缺的是体验，比体验更稀缺的是个性化。</li>
<li>边际效应——指的是每多消费一件商品，它给消费者带来的额外满足感。这个额外满足感会不断下降。当欲望被充分满足后，边际效应为零，商品就会免费。</li>
<li>机会成本——每一项选择都有机会成本。要懂得计算机会成本，比如时间成本、替代方案的投资收益等，然后通过权衡对比，做出理性决策。</li>
<li>激励相容——承认人性的自私让核心团队和企业共担风险。用收益和风险共同激励他们。让自私而不是集体主义精神，成为大家共同获益的原动力。</li>
<li>交易成本——交易成本和管理成本的对比，决定了企业的边界。企业必须找到自己做比市场做更高效的事情，构建核心竞争力，而把自己做的一般的，尽快扔回给市场。</li>
</ul>
<h3 id="宏观经济学"><a href="#宏观经济学" class="headerlink" title="宏观经济学"></a>宏观经济学</h3><ul>
<li>节约悖论——你的消费都是别人的收入，别人的收入又会变成新的消费或者投资，GDP因此会越滚越大，这就是乘数效应。</li>
<li>看得见的手——经济学界的辩论很有趣。经常辩论，却经常辩不出结果。训练自己看待宏观经济的辩证思维，才是重点。</li>
<li>人口抚养比——15年后，当90后和00后成为社会主流时。要想保持今天的社会总财富、平均生活水平，他们一个人创造的社会价值，必须是今天的两倍。</li>
<li>泡沫经济——商业世界，就算获得再大的成功，也要时时提醒自己，什么是可持续增长的，什么是泡沫经济。要时时问自己，我会不会就是那个用20年的储蓄买郁金香的人。</li>
<li>再分配——全民发钱从经济学的角度来看，其实就是试图用“第二次再分配”的手段，解决贫富差距的问题。</li>
</ul>
<h3 id="演讲"><a href="#演讲" class="headerlink" title="演讲"></a>演讲</h3><ul>
<li>真正让人印象深刻的演讲，每次只传播一个观点。</li>
<li>设计一个好的故事，是有效传播观点的重要手段。</li>
<li>想要把一个好故事变成一个伟大的故事，就需要把演讲的重点定格在决定性时刻的选择上。</li>
<li>呈现故事的情景和细节，比直接陈述更能引起听众的共鸣。</li>
</ul>
<h3 id="产品营销渠道"><a href="#产品营销渠道" class="headerlink" title="产品营销渠道"></a>产品营销渠道</h3><ul>
<li><strong>产品</strong> 把产品这块巨石推的越高越好。我的产品和别人不一样，我的产品比别人的更显档次，我的产品质量是最好的。第一，找到足够细小的长尾。第二，满足最长尾的需求里最大众的痛点。第三，利用互联网降低边际成本。从C2B的爆款思路转变为C2B的大规模私人定制思路。</li>
<li><strong>营销</strong> 人在山顶一推，巨石开始下滑，势能转化为动能。营销就是用来减小下滑阻力的。第一，找到未被满足的痛点。第二，据此建立新品类。第三，用最简单的信息不断攻占消费者心智。第四，和第二名一起夯实品类，做大蛋糕。</li>
<li><strong>渠道</strong> 巨石开始水平滚动，这个时候需要用渠道继续减小阻力。</li>
</ul>
<h3 id="中产阶级"><a href="#中产阶级" class="headerlink" title="中产阶级"></a>中产阶级</h3><p>作为衡量一个等级的指标，金钱的来源远比金钱的数量更有意义。让我们辨认出中产阶级的，并非是他们中等水平的收入，而是他们的一本正经和心神不宁。一个人不需要拥有很多金钱，可以通过提高品味和格调，达到较高的社会地位。一个精神贵族可以是没受过什么教育的普通人，也可以是受过很完备的教育的精英。</p>
<p>书中谈到的“等级”，其实和“地位”这个词更相近，指的是一个人拥有多少社会声望。一个人的社会声望越高，自然社会等级也越高。等级是刻意忽视也无法否认的现实存在。</p>
<h3 id="创业"><a href="#创业" class="headerlink" title="创业"></a>创业</h3><ul>
<li>创见不是心血来潮，更不是因为穷而到处找机会，它应该是在把握身边存在的真实需求基础上，一种对未来趋势的思考和预见。</li>
<li>任何事情最终发生需要不止一个条件，不仅要找到趋势，还要兼顾时机，综合考虑各方面的充分必要条件是否成熟。</li>
<li>创业要从无法规模化的事情做起，始终以客户视角来打磨商业模式和产品，小步快跑，确保解决方案和产品真的解决了用户的问题，并且远远超越他们的期望，再复制扩张。</li>
<li>在无法规模化的事情验证之前，尽可能保持小团队规模，有足够多的例子证明人数少的小团队更可能是具备核爆炸能力的适宜规模。</li>
<li>像天使投资人一样去找人，不一定是非牛人不招，还可以选择那些“关注进步”的高潜力优秀人才。</li>
<li>虐人可是一门手艺，其中的分寸至关重要。虐轻了激发不出员工的潜力，一帮很有才能的人可能水平发挥不出来，毕竟谁天生都是懒的，都会挑简单的工作做。虐狠了大家受不了就会纷纷离去，团队很容易散伙。所以只有虐得刚刚好，虐得恰到好处，虐得刚刚超过能力的极限值，让大家痛并快乐着，这样的CEO才是最有力量的。这样的团队也才能持续性地创造出奇迹。</li>
<li>一个好的风险投资公司比你还希望你的创业项目存活下来，他们会在各个方面给你最实用的帮助。所以一个成熟的创业者也不是谁的钱都会随便拿，他们也不是看谁会把公司的股权稀释得最少，他们更看重的是风险投资公司背后所能提供的资源。</li>
<li>创业的过程就像登珠峰，虽然千难万险，依然有人不断地向它挑战。值得注意的是，最早时候登珠峰的失败率是非常高的，有大量的人在这座山上丢掉了性命。但是随着人们的经验增加，随着装备越来越好，现在登珠峰的难度已经降了不少。这是珠峰变矮了吗？不是，是人们更加熟练了。我相信创业也是一样，随着市场机制的完善，人们积累的经验越来越多，创业的难度也会下降，创业的成功率也一定会越来越高。</li>
</ul>
<h3 id="优衣库经营理念"><a href="#优衣库经营理念" class="headerlink" title="优衣库经营理念"></a>优衣库经营理念</h3><ul>
<li>要学会“站在顾客的立场上想问题”。不管在哪里经营卖场，优衣库都营造一个“让顾客可以自由选择的环境”，把顾客“很想去买的店”变成优衣库“卖得很好的店”。</li>
<li>当你把目标定得很高，看上去有点离谱时，你不用担心。只要你制订周密可行的计划，分解到每个月，经常把努力实现的结果和目标进行对比，再适当作些调整，让自己努力地跳起来，这个目标是完全有可能实现的。</li>
<li>每家企业都是有基因的，这个基因就是它的企业文化。柳井正悟出，不管公司开到哪里，经营者都必须熟悉和适应优衣库的文化，体现优衣库的文化。</li>
<li>在公司发展的不同阶段，有时需要“独断”，有时需要让员工成为“头脑”。小企业只能有一个“头脑”，适合独断型经营者；但企业发展到一定程度，经营就要靠组织系统来运作，员工要有机会上升到“头脑”。这就是在不同的阶段，需要有不同的决策机制。</li>
<li>“即战力”就是“马上决策，马上执行”。柳井正做事很有执行力，秘书为他安排行程和计划时，都是以15分钟为单位，准时开始准时结束。</li>
</ul>
<h3 id="小数据7C法"><a href="#小数据7C法" class="headerlink" title="小数据7C法"></a>小数据7C法</h3><p>林斯特龙在这本书里，为小数据理论设计了一个完整的流程，其中包含了七个步骤，每一个步骤都用一个单词来代表，由于这些单词的英文开头都是 C，所以他把这个框架称为“7C 法”。</p>
<ul>
<li>搜集，就是搜集和顾客有关的习惯、兴趣、感受等信息；</li>
<li>线索，就是寻找能呈现顾客真实自我的细节；</li>
<li>连接，是寻找到顾客大致的情感缺口是什么；</li>
<li>关联，是去发现顾客的情感缺口第一次出现，是在什么时候，是由于什么引起的；</li>
<li>因果，就是确认小数据促使顾客产生了什么样的情感；</li>
<li>补偿，指的是从顾客的情感中，发现他们没有被满足的欲望，对此进行补偿；</li>
<li>观念，用创意设计出可以操作的补偿办法，来满足顾客的欲望。</li>
</ul>
<h3 id="日本文化"><a href="#日本文化" class="headerlink" title="日本文化"></a>日本文化</h3><ul>
<li>对日本人来讲，突然受到生疏者的恩是最讨厌的事。除了警察以外，任何人随便插手都会使对方背上恩情。</li>
<li>中国的“仁”的概念在日本贬得一文不值，从而“孝”在日本就成了必须履行的义务，只有在和与天皇的义务发生冲突时才可以被废除。</li>
<li>复仇是特定场合需要执行的一类“道义”，除此之外，还包括镇定、克制的行为。直至今日，仍有人在除夕之夜自杀，只是为了挽救自己的声誉。（日本的报复行为已经很少）这并不意味着日本人的名誉观念日趋淡薄，而是意味着对失败和侮辱的反应由进攻性越来越趋向于自卫性，已更多地以自我心理麻痹来代替挑起不必要的斗争。4.日本人一方面培养肉体享乐，另一方面又规定不能纵情沉溺于享乐，人们的生活变得很矛盾。他们像培养艺术一样享受肉体，在品位之后，又牺牲享乐，去履行义务。</li>
<li>真正的耻感文化是依靠外部约束来行善的，真正的罪感文化则是靠内心的知罪行善的。</li>
<li>日本人的人生轨迹与美国人正好相反，是很明显的浅底U字形曲线，他们国家的老人小孩是最自由、最随意的，小孩长大了，约束也就多了，结婚前后个人自由度是最低的。</li>
</ul>
<h3 id="团队建设"><a href="#团队建设" class="headerlink" title="团队建设"></a>团队建设</h3><ul>
<li>要有能为团队都发自内心认同的理念。</li>
<li>要有能切实保障团队成员利益，并且最大限度兼顾合作伙伴利益的机制。</li>
<li>要给研发工作留出足够重要的位置和独立不受干扰的自由空间。</li>
<li>要有经济的、可持续的发展模式。</li>
<li>要有团队成员都能坚决执行的纪律。</li>
<li>要注意培养团队成员的创造力和自主精神。</li>
<li>团队存在感，你在200多人团队，不能有你没你都一样。也许你的工作比较特殊，但是，你的重要性，别人是可以感知到的，你是不是专业很牛逼，是权威。</li>
<li>环境友好度，是不是别人跟你在一起舒服，当你每次提出想法的时候，你说不的时候，有没有说得让大家接受，这是建设性。</li>
<li>是不是聪明人，脑子清楚。在沟通时候，能不能听懂别人在说什么，这主要是情商，能不能体察别人的邮件背后的情绪，是不是着急了，他是愿意配合还是很不高兴，这种情绪是很微妙的，如果你能体察，要针对性的做反馈，我希望我们是聪明人之间的合作，一个笨蛋会搞死一群聪明人。</li>
<li>当这家公司不断强调，我们给同事赋能。也要看你能不能调动这些资源，当你要求财务总监和CEO配合你的时候，有没有胆量协调它们，让他们快速完成协作，这其实挺难的。这对很多新同事来说，还是不敢。经常就是一位同事在一件事情上卡住了，其实他喊一嗓子，就会有人帮助他。而你没有主动做，可能你的前途就是很有限的。</li>
<li>我们还有一个测试，是非常重要的指标，我们很看重，就是你的精力值和抗压性。你承受压力能力更强，你的精力值很高，当然就更好。对于创业公司，你的地位是你能不能扛大活决定的，这个荣誉才是公司最高荣誉，你才能称为合伙人，举足轻重的人，这是我说的，我们用人的秘密。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;消费心理学&quot;&gt;&lt;a href=&quot;#消费心理学&quot; class=&quot;headerlink&quot; title=&quot;消费心理学&quot;&gt;&lt;/a&gt;消费心理学&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;心理账户——有的时候客户不是觉得贵，只是觉得你的东西贵，因为你放错了账户。&lt;/li&gt;
&lt;li&gt;沉没成本——人们往往会陷入这样的误区：前期投入越大，后期就会忍不住投入更多。&lt;/li&gt;
&lt;li&gt;比例偏见——找到一个小的价格基础，展现一个大的优惠比例，会让消费者获得巨大的价值感。&lt;/li&gt;
&lt;li&gt;损失规避——一个人因失去带来的痛苦。比等量得到产生的快乐，强烈2.5倍。&lt;/li&gt;
&lt;li&gt;价格锚点——消费者并不是为商品的成本付费，而是为价值感付费。价格锚点的逻辑就是让消费者有一个可对比的价值感知。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>店铺选址系统背后的业务逻辑梳理</title>
    <link href="https://mihawkmah.github.io/2017/10/11/%E5%BA%97%E9%93%BA%E9%80%89%E5%9D%80%E7%B3%BB%E7%BB%9F%E8%83%8C%E5%90%8E%E7%9A%84%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%A2%B3%E7%90%86/"/>
    <id>https://mihawkmah.github.io/2017/10/11/店铺选址系统背后的业务逻辑梳理/</id>
    <published>2017-10-11T06:47:17.000Z</published>
    <updated>2017-10-11T06:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="城市人口及经济数据资料："><a href="#城市人口及经济数据资料：" class="headerlink" title="城市人口及经济数据资料："></a><strong>城市人口及经济数据资料：</strong></h3><p>市区人口总量、人口密度、人均收入、人均消费等经济指标、城市未来发展规划、公共交通情况</p>
<h3 id="划分商圈、评估选择商圈："><a href="#划分商圈、评估选择商圈：" class="headerlink" title="划分商圈、评估选择商圈："></a><strong>划分商圈、评估选择商圈：</strong></h3><p>划分一级二级三级商圈（记分法：步行车行距离近加分；营业额高加分；公交地铁线路加分；）；交通地理状况；</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>商圈等级</th>
<th>城市人口</th>
<th>收入水平</th>
<th>消费能力</th>
<th>商圈年营业额</th>
<th>步行车行距离</th>
<th>商圈交通</th>
<th>前景预测</th>
</tr>
</thead>
<tbody>
<tr>
<td>黄金商圈</td>
<td>&gt;30万</td>
<td>&gt;1.5万</td>
<td>&gt;5000</td>
<td>&gt;2亿</td>
<td>步行5分钟 车行5分钟</td>
<td>公路+1分 地铁+3分 长途汽车线路+6分 火车线路+8分 大型停车场宾馆+2分</td>
<td>政府牵头+5分；传统集市改造+5分；知名店铺30%以上+3分；有密集工业品或农产品生产基地+3分；</td>
</tr>
<tr>
<td>白银商圈</td>
<td>20-30万</td>
<td>1-1.5万</td>
<td>4000-5000</td>
<td>1-2亿</td>
<td>步行10分钟 车行10分钟</td>
<td></td>
<td></td>
</tr>
<tr>
<td>黄铜商圈</td>
<td>&lt;20万</td>
<td>&lt;1万</td>
<td>&lt;4000</td>
<td>&lt;1亿</td>
<td>步行15分钟 车行15分钟</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="调查分析商圈内人口总数及特征："><a href="#调查分析商圈内人口总数及特征：" class="headerlink" title="调查分析商圈内人口总数及特征："></a><strong>调查分析商圈内人口总数及特征：</strong></h3><p>目标商圈内常住人口、流动人口数量、平均收入、平均消费、目标顾客前往该商圈的交通方式（步行、轿车、公交车、地铁）；划分商圈类型；</p>
<table>
<thead>
<tr>
<th>商圈类型</th>
<th>商圈特性</th>
<th>调查重点</th>
</tr>
</thead>
<tbody>
<tr>
<td>住宅商圈</td>
<td>顾客的需求比较稳定，销售额不会骤起骤落，可以保证便利店的稳定收入。商品结构以住家生活需求为主，偏重生活用品、食用品，时间集中在早上及傍晚以后。住宅商圈一般平均捕获率为15%，平均客单价为11/9/7（高/中/低）元。住宅商圈的主要消费人群则是住宅周边居住的消费者；设店于固定居民或社区、大楼出入口；70%以上为固定顾客；平常日人流高峰为07:00-09:00，17:00-19:00时段。</td>
<td>人口住户条件，如：结构、所得、年龄、职业等因素，此为固定基本顾客；便利性，交通设施条件，人员来往交通是否方便；  接近性，街道的宽度、交通构造等状况；  机会性，离市中心的距离及交通设施情况；  繁荣性，是否有学校、公园、医院等有利的集客设施；  发展性，店址所在区域的未来发展如何。</td>
</tr>
<tr>
<td>商业商圈</td>
<td>如闹市区，商业活动极为频繁，把便利店设在这样的地区，营业额必然高。这样的店址就是所谓的“寸金之地”，当然这样的新址租金不便宜，虽然生意不错，但租金成本太高，最终盘算下来，可能只有微薄的赢利，甚至可能亏损。所以需要通过财务评测工具事先仔细的评估。一般来说，位于流动人口的商圈捕获率较低，商业商圈一般平均捕获率为10%，一般平均客单价为8元。商业商圈的主要消费人群则是流动的消费者；  以夜间活动人口及例假日人数居多；  大型百货、商业街、大卖场、饭店、KTV特种行业周遭地区；  还有固定市集，如夜市、车站、码头、港口，出入人口以消费、逛街为主；</td>
<td>销售力，评估腹地的大小与客户交易销售营收；  便利性，客户来店的交通方式与交通状况；  竞争性，竞争店的营业时间与竞争的现况。同一商圈内竞争店一般不要超过3家；  发展性，未来繁荣与兴衰的考察。</td>
</tr>
<tr>
<td>办公商圈</td>
<td>办公商圈一般平均捕获率为12%，平均客单价为10元。办公商圈的主要消费人群则是办公楼里的顾客，又以购买力较高的白领为主的消费者；  以日间活动人口居多；  办公大楼林立；  客层主要为上班族；  例假日人口明显稀少；  平常日人流高峰为08:00-09:00，12:00-13:00时段；</td>
</tr>
</tbody>
</table>
<h3 id="选择商圈内集客点："><a href="#选择商圈内集客点：" class="headerlink" title="选择商圈内集客点："></a><strong>选择商圈内集客点：</strong></h3><p>实地去勘察该场所或区域是否有大型百货商场、购物中心、商业步行街、政府机构、医院、学校及娱乐和休闲中心等，并就其规模作出规模估算和相关数据统计。</p>
<ul>
<li>吸引大量人/车流？店址接近或位于大型商业街中心区域、政府机关集中办公地区、休闲娱乐及商业活跃地区、车站医院学校旅游景点等，集客能力就强；</li>
<li>商圈外部人/车流能否便捷进入？以店址为中心的周边交通网络密集，道路通畅，且附近有大型停车场等，集客能力就较强；</li>
<li>商圈内部人/车流能否能方便到达店址？店址周边住宅或商务楼的人群，从任何角度都能轻松到达连锁店，就如到达一把扇子的轴心部分，那这个位置就是最具集客能力的地方。</li>
</ul>
<h4 id="集客点周边环境配套"><a href="#集客点周边环境配套" class="headerlink" title="集客点周边环境配套"></a>集客点周边环境配套</h4><table>
<thead>
<tr>
<th>影响维度</th>
<th>影响字段</th>
</tr>
</thead>
<tbody>
<tr>
<td>人流集聚</td>
<td>政府机关集中办公地区；医疗设施；娱乐休闲（博物馆、美术馆、公园、体育馆、剧院、电影院、酒店、娱乐KTV）；学校设施（大学、中学、小学）；旅游景点（景区、游乐园、名胜古迹）；零售商场（百货公司、餐饮街、购物中心、商业街）；</td>
</tr>
<tr>
<td>交通环境</td>
<td>交通设施（火车站、客运站、停车场、地铁站、公交站牌、 高架桥/高速公路出口）</td>
</tr>
<tr>
<td>住宅小区</td>
<td>固定居民100米内多少住户，商圈100米-300米多少住户，300米-500米多少住户，对于新兴住宅区、办公区、工业区、住宅人口激增区、车辆通行激增区都要标示说明。</td>
</tr>
</tbody>
</table>
<ul>
<li>医院：出入医院之主干道上，主要调查为病床数、门诊数、医护职工数。如位于医院内则以上述条件作为评估，不需要采点人车流量；若新址位于医院外，则需要采点人车流量，医院只作为一个重要的集客设施。医院商圈一般平均捕获率为17%，一般平均客单价为9.5元。</li>
<li>学校：分各等级学校，如国小、国中、高中、大专院校等。主要为师生单位贡献度，如师生数、住宿数。</li>
<li>车站：长途汽车站、火车站和城市的交通主干道，虽然人流很大，但客流速度较快，很多人的目的不是购物，滞留时间较短，在这些地方开店，要根据自己的经营需要慎重选择。</li>
<li>集客设施：观光花园、果园、茶园、游乐区、博物馆、美术馆、展览馆、运动场等；</li>
<li>厂区：分为工业区与工厂区，主要为工厂职工数的单位贡献度，如员工数、薪资水平。消费特色为提神或清凉饮料、热食、烟酒需求量比较大。</li>
<li>郊区：一般是以车客为主体的商圈。位于汽车、机车流量大，高速公路或快速道路交通道出入口，交通干道上。一般来说，位于流动车流的商圈捕获率较低，郊区商圈一般平均捕获率为6%，一般平均客单价为7元。</li>
</ul>
<ul>
<li>风景区：来客数几乎为风景区游客。主要调查风景区年旅游人数（分淡旺季），由于位于旅游景点内，主要为旅游单位贡献度。</li>
<li>电影院：主要调查几院几厅，每一厅之座位数及总座位数。影院会因片子好坏及休假日而造成人潮之急剧变化，因而应于平常日调查，主要为单位贡献度（院，厅座位数）。</li>
<li>娱乐KTV：娱乐与影院调查方法相同。具休闲、刺激性、流行的商品有不错的销售业绩。连续假日、天气有影响力。一般来说，位于休闲娱乐的商圈捕获率要远远高于其他商圈。娱乐商圈一般平均捕获率为25%，一般平均客单价为11元。</li>
</ul>
<h3 id="集客点评估："><a href="#集客点评估：" class="headerlink" title="集客点评估："></a><strong>集客点评估：</strong></h3><ul>
<li>马路窄宽大小：单行道、中间有无隔离带、双向道与停车问题；马路通行口距新店30米内，要计算门面双向人流量；马路通行口距新店80米内，要计算门面的双向人流量和对面人流量的一半；马路通行口距新店80米以外的，只能计算门面的双向人流量，对面的人流量不予计算。</li>
<li>测算时段人潮流量：监测记录周一至周日（7天）每个时段的人潮流量（包含马路中间骑自行车，无隔离带马路对面的行人*50%）、车潮流量（汽车摩托车往来流量），根据捕获率估算可能进店的消费者数量，预估该店每个时段/天/月/年度的平均销售额，进而计算该店的总投资额和投资回收期（日均营业额 = 人均人流量 x 捕获率或入店率 x 客单价）</li>
<li>人流动线分析（会不会被竞争对手截住）；</li>
<li>竞争对手分析；</li>
<li>互补店铺分析；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;城市人口及经济数据资料：&quot;&gt;&lt;a href=&quot;#城市人口及经济数据资料：&quot; class=&quot;headerlink&quot; title=&quot;城市人口及经济数据资料：&quot;&gt;&lt;/a&gt;&lt;strong&gt;城市人口及经济数据资料：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;市区人口总量、人口密度、人均收入、人均消费等经济指标、城市未来发展规划、公共交通情况&lt;/p&gt;
&lt;h3 id=&quot;划分商圈、评估选择商圈：&quot;&gt;&lt;a href=&quot;#划分商圈、评估选择商圈：&quot; class=&quot;headerlink&quot; title=&quot;划分商圈、评估选择商圈：&quot;&gt;&lt;/a&gt;&lt;strong&gt;划分商圈、评估选择商圈：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;划分一级二级三级商圈（记分法：步行车行距离近加分；营业额高加分；公交地铁线路加分；）；交通地理状况；&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫入门[四] | Pandas数据分析Top100电影</title>
    <link href="https://mihawkmah.github.io/2017/09/30/Scrapy%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E5%9B%9B-Pandas%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90Top100%E7%94%B5%E5%BD%B1/"/>
    <id>https://mihawkmah.github.io/2017/09/30/Scrapy爬虫入门-四-Pandas数据分析Top100电影/</id>
    <published>2017-09-30T03:37:05.000Z</published>
    <updated>2017-09-30T03:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="连接MongoDB并清洗数据"><a href="#连接MongoDB并清洗数据" class="headerlink" title="连接MongoDB并清洗数据"></a>连接MongoDB并清洗数据</h3><h4 id="安装Pymongo"><a href="#安装Pymongo" class="headerlink" title="安装Pymongo"></a>安装Pymongo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 安装anaconda（包含 Numpy、Pandas、Matplotlib、SciPy、Seaborn）</div><div class="line">pyenv install anaconda</div><div class="line"></div><div class="line"># 安装jieba分词</div><div class="line">pip install jieba</div><div class="line"></div><div class="line"># 安装scikit-learn</div><div class="line">pip install -U scikit-learn 或 conda install scikit-learn</div><div class="line"></div><div class="line"># 安装PyMongo</div><div class="line">conda install pymongo</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import pymongo</div><div class="line"></div><div class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;,port=27017)</div><div class="line"># 获取数据库，mtime为数据库名称</div><div class="line">db = client.mtime</div><div class="line"># 获取集合，movietop100为集合名称</div><div class="line">movies = db.movietop100</div></pre></td></tr></table></figure>
<h4 id="Pymongo指令"><a href="#Pymongo指令" class="headerlink" title="Pymongo指令"></a>Pymongo指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 存储单个数据</div><div class="line">document = &#123;&apos;x&apos;:1&#125;</div><div class="line">movies.insert_one(document)</div><div class="line"># 存储多个数据</div><div class="line">document = [&#123;&apos;x&apos;:3&#125;,&#123;&apos;x&apos;:4&#125;]</div><div class="line">movies.insert_many(document)</div><div class="line"></div><div class="line"># 查找</div><div class="line">movies.find_one(&#123;&apos;x&apos;:1&#125;)</div><div class="line"># 将name和_id取出，1代表取出，0代表不取出</div><div class="line">movies.find(&#123;&#125;,&#123;&apos;name&apos;:1,&apos;_id&apos;:1&#125;):</div><div class="line"># 限制条数，跳过第1条</div><div class="line">find().limit(10).skip(1)</div><div class="line"># 取出所有数据</div><div class="line">arr = []</div><div class="line">for data in movies.find():</div><div class="line">    arr.append(data)</div><div class="line"></div><div class="line"># 更新,如果不存在则新增这个字段</div><div class="line">movies.update_one(&#123;&apos;x&apos;:4&#125;,&#123;&apos;$set&apos;:&#123;&apos;x&apos;:3&#125;&#125;)</div><div class="line"># 更新，删除这个字段</div><div class="line">movies.update_one(&#123;&apos;x&apos;:4&#125;,&#123;&apos;$unset&apos;:&#123;&apos;x&apos;:4&#125;&#125;)</div><div class="line"></div><div class="line"># 删除</div><div class="line">movies.delete_one(&#123;&apos;x&apos;:3&#125;)</div><div class="line"></div><div class="line"># 计数</div><div class="line">movies.count()</div></pre></td></tr></table></figure>
<h4 id="pymongo数据清洗"><a href="#pymongo数据清洗" class="headerlink" title="pymongo数据清洗"></a>pymongo数据清洗</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 按照空格分割，分割1次</div><div class="line">str.split(&apos; &apos;,1)</div><div class="line">str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等</div><div class="line">num -- 分割次数</div><div class="line"></div><div class="line"># 将空格替换为无</div><div class="line">str.replace(&apos; &apos;,&apos;&apos;)</div><div class="line"></div><div class="line"># 清洗数据，将名称中的年份分离出来保存到新建year字段中</div><div class="line"> for movie in movies.find(&#123;&#125;,&#123;&apos;name&apos;:1,&apos;_id&apos;:1&#125;):</div><div class="line">     print(movie)</div><div class="line">     if(&apos;(&apos; in movie[&apos;name&apos;]):</div><div class="line">         movies.update(movie,&#123;&apos;$set&apos;:&#123;&apos;name&apos;: movie[&apos;name&apos;].split(&apos;(&apos;)[0], &apos;year&apos;: movie[&apos;name&apos;].split(&apos;(&apos;)[1].split(&apos;)&apos;)[0]&#125;&#125;)</div><div class="line">         </div><div class="line"># 取数据限制条数，跳过哪一条</div><div class="line">limit(10).skip(1)</div></pre></td></tr></table></figure>
<h3 id="Pandas数据分析"><a href="#Pandas数据分析" class="headerlink" title="Pandas数据分析"></a>Pandas数据分析</h3><h4 id="Pandas数据选择"><a href="#Pandas数据选择" class="headerlink" title="Pandas数据选择"></a>Pandas数据选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 索引</div><div class="line">movie.index</div><div class="line"># 选择行</div><div class="line">movie[0:3]</div><div class="line"># 选择列</div><div class="line">movie[&apos;name&apos;]</div><div class="line">movie.name</div><div class="line"># 选择多列</div><div class="line">movie[[&apos;name&apos;,&apos;role&apos;]]</div></pre></td></tr></table></figure>
<h4 id="DataFrame数据清洗"><a href="#DataFrame数据清洗" class="headerlink" title="DataFrame数据清洗"></a>DataFrame数据清洗</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 取出DataFrame的每一行，然后选择row[1]是各个字段的数据，row[0]是index，然后将下替换为2005</div><div class="line">for row in movietop100.iterrows():</div><div class="line">    row[1][&apos;year&apos;] = row[1][&apos;year&apos;].replace(&apos;下&apos;,&apos;2005&apos;)</div><div class="line">    </div><div class="line"># 将DataFrame中字段值为列表的转化为多个字段,并合并到原DataFrame</div><div class="line">tags = mo.type.apply(pd.Series)</div><div class="line">tags.columns = [&apos;tag1&apos;, &apos;tag2&apos;, &apos;tag3&apos;]</div><div class="line">newdf = pd.concat([mo[:], tags[:]], axis=1)[[&apos;year&apos;, &apos;tag1&apos;, &apos;tag2&apos;, &apos;tag3&apos;]]</div></pre></td></tr></table></figure>
<h4 id="Pandas统计方法"><a href="#Pandas统计方法" class="headerlink" title="Pandas统计方法"></a>Pandas统计方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 按照year字段分组，并计算每组的数量</div><div class="line">movietop100.groupby(&apos;year&apos;).agg(&apos;count&apos;)</div><div class="line"></div><div class="line"># 数据透视表，每一年对应评分的电影名称的透视表格</div><div class="line">movietop100.pivot_table(index=[&quot;year&quot;],columns=[&quot;point&quot;],values=[&quot;name&quot;],aggfunc=&apos;sum&apos;)</div></pre></td></tr></table></figure>
<h4 id="Plotly数据可视化"><a href="#Plotly数据可视化" class="headerlink" title="Plotly数据可视化"></a>Plotly数据可视化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># 安装plotly</div><div class="line">conda install plotly</div><div class="line"></div><div class="line"># 导入</div><div class="line">from plotly import offline</div><div class="line">import plotly.graph_objs as go</div><div class="line"></div><div class="line"># 直方图 Bar</div><div class="line">offline.init_notebook_mode()</div><div class="line">data = [go.Bar(</div><div class="line">    x = yeardata.index,</div><div class="line">    y = yeardata._id,</div><div class="line">)]</div><div class="line">offline.iplot(data)</div><div class="line"></div><div class="line"># 电影类型分布饼状图</div><div class="line">data = [go.Pie(</div><div class="line">    labels=datatypes.index,</div><div class="line">    values=datatypes.year</div><div class="line">)]</div><div class="line">offline.iplot(data)</div><div class="line"></div><div class="line">#散点图 Scatter</div><div class="line">offline.init_notebook_mode()</div><div class="line">data = [go.Scatter(</div><div class="line">    x = mo.year,</div><div class="line">    y = mo.pointnum,</div><div class="line">    mode = &quot;markers&quot;,</div><div class="line">    marker = dict(size = mo.point)</div><div class="line">)]</div><div class="line">offline.iplot(data)</div></pre></td></tr></table></figure>
<h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p>1、Top100电影的年份分布 - 柱状图</p>
<p><img src="/2017/09/30/Scrapy爬虫入门-四-Pandas数据分析Top100电影/1.jpg" alt="1"></p>
<p>2、Top100电影的类型分布 - 饼图</p>
<p><img src="/2017/09/30/Scrapy爬虫入门-四-Pandas数据分析Top100电影/2.jpg" alt="2"></p>
<p>3、Top100电影的评分分布 - 散点图（年份、评分）</p>
<p><img src="/2017/09/30/Scrapy爬虫入门-四-Pandas数据分析Top100电影/3.jpg" alt="3"></p>
<blockquote>
<p>项目地址 <a href="https://github.com/Mihawkmah/Anaconda.Analysis" target="_blank" rel="external">https://github.com/Mihawkmah/Anaconda.Analysis</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;连接MongoDB并清洗数据&quot;&gt;&lt;a href=&quot;#连接MongoDB并清洗数据&quot; class=&quot;headerlink&quot; title=&quot;连接MongoDB并清洗数据&quot;&gt;&lt;/a&gt;连接MongoDB并清洗数据&lt;/h3&gt;&lt;h4 id=&quot;安装Pymongo&quot;&gt;&lt;a href=&quot;#安装Pymongo&quot; class=&quot;headerlink&quot; title=&quot;安装Pymongo&quot;&gt;&lt;/a&gt;安装Pymongo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 安装anaconda（包含 Numpy、Pandas、Matplotlib、SciPy、Seaborn）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pyenv install anaconda&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装jieba分词&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install jieba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装scikit-learn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install -U scikit-learn 或 conda install scikit-learn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装PyMongo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;conda install pymongo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫入门[三] | 实战爬取时光网Top100电影</title>
    <link href="https://mihawkmah.github.io/2017/09/21/Scrapy%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E4%B8%89-%E5%AE%9E%E6%88%98%E7%88%AC%E5%8F%96%E6%97%B6%E5%85%89%E7%BD%91Top100%E7%94%B5%E5%BD%B1/"/>
    <id>https://mihawkmah.github.io/2017/09/21/Scrapy爬虫入门-三-实战爬取时光网Top100电影/</id>
    <published>2017-09-21T08:04:21.000Z</published>
    <updated>2017-09-30T03:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化爬虫"><a href="#初始化爬虫" class="headerlink" title="初始化爬虫"></a>初始化爬虫</h3><h4 id="抓取维度指标"><a href="#抓取维度指标" class="headerlink" title="抓取维度指标"></a>抓取维度指标</h4><ul>
<li>电影排名</li>
<li>电影名称</li>
<li>导演</li>
<li>主演</li>
<li>类型</li>
<li>电影描述</li>
<li>评分</li>
<li>评分人数</li>
</ul>
<h4 id="目标链接"><a href="#目标链接" class="headerlink" title="目标链接"></a>目标链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.mtime.com/top/movie/top100/</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="搭建爬虫"><a href="#搭建爬虫" class="headerlink" title="搭建爬虫"></a>搭建爬虫</h4><p><code>scrapy startproject mtime</code></p>
<h3 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h3><h4 id="iterms-py"><a href="#iterms-py" class="headerlink" title="iterms.py"></a>iterms.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class MtimeItem(scrapy.Item):</div><div class="line">    rank = scrapy.Field()</div><div class="line">    name = scrapy.Field()</div><div class="line">    direct = scrapy.Field()</div><div class="line">    role = scrapy.Field()</div><div class="line">    type = scrapy.Field()</div><div class="line">    describe = scrapy.Field()</div><div class="line">    point = scrapy.Field()</div><div class="line">    pointnum = scrapy.Field()</div></pre></td></tr></table></figure>
<h4 id="配置settings-py"><a href="#配置settings-py" class="headerlink" title="配置settings.py"></a>配置settings.py</h4><p>使用chrome浏览器检查-Network查看Request Headers信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">USER_AGENT = &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36&apos;</div><div class="line"></div><div class="line">ROBOTSTXT_OBEY = False</div><div class="line"></div><div class="line">DOWNLOAD_DELAY = 3</div><div class="line"></div><div class="line">DEFAULT_REQUEST_HEADERS = &#123;</div><div class="line">   &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&apos;,</div><div class="line">   &apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.8&apos;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在终端内测试提取数据"><a href="#在终端内测试提取数据" class="headerlink" title="在终端内测试提取数据"></a>在终端内测试提取数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scrapy shell &apos;http://www.mtime.com/top/movie/top100_chinese/&apos;</div><div class="line"># 测试能否抓到数据</div><div class="line">response.css(&apos;div.mov_con&apos;)</div><div class="line"># response状态</div><div class="line">response.status</div></pre></td></tr></table></figure>
<h4 id="mtime-py"><a href="#mtime-py" class="headerlink" title="mtime.py"></a>mtime.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">from scrapy.spiders import Spider</div><div class="line">from mtime.items import MtimeItem</div><div class="line"></div><div class="line">class Mtime(Spider):</div><div class="line">    name = &apos;mtime&apos;</div><div class="line">    start_urls = [</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-2.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-3.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-4.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-5.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-6.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-7.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-8.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-9.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-10.html&apos;</div><div class="line">    ]</div><div class="line"></div><div class="line">    def parse(self, response):</div><div class="line">        item = MtimeItem()</div><div class="line">        movies = response.css(&apos;ul#asyncRatingRegion li&apos;)</div><div class="line">        for movie in movies:</div><div class="line">            item[&apos;rank&apos;] = movie.css(&apos;div.number em::text&apos;)[0].extract()</div><div class="line">            item[&apos;name&apos;] = movie.css(&apos;h2 a::text&apos;)[0].extract()</div><div class="line">            item[&apos;direct&apos;] = movie.css(&apos;p a::text&apos;)[0].extract()</div><div class="line">            item[&apos;role&apos;] = movie.css(&apos;p&gt;a::text&apos;).extract()</div><div class="line">            item[&apos;type&apos;] = movie.css(&apos;span a::text&apos;).extract()</div><div class="line">            item[&apos;describe&apos;] = movie.css(&apos;p.mt3::text&apos;)[0].extract()</div><div class="line">            item[&apos;point&apos;] = movie.css(&apos;b.point span::text&apos;).extract()</div><div class="line">            item[&apos;pointnum&apos;] = movie.css(&apos;div.mov_point p::text&apos;)[0].extract()</div><div class="line">            yield item</div></pre></td></tr></table></figure>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><h4 id="配置settings文件"><a href="#配置settings文件" class="headerlink" title="配置settings文件"></a>配置settings文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">   &apos;mtime.pipelines.MongoPipeline&apos;: 300,</div><div class="line">&#125;</div><div class="line">MONGODB_SERVER = &quot;localhost&quot;</div><div class="line">MONGODB_PORT = 27017</div><div class="line">MONGODB_COLLECTION = &quot;movietop100&quot;</div><div class="line">MONGODB_DB = &quot;mtime&quot;</div></pre></td></tr></table></figure>
<h4 id="pipelines-py"><a href="#pipelines-py" class="headerlink" title="pipelines.py"></a>pipelines.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import pymongo</div><div class="line">from scrapy.conf import settings</div><div class="line"></div><div class="line">class MongoPipeline(object):</div><div class="line">    def __init__(self):</div><div class="line">        connection = pymongo.MongoClient(</div><div class="line">            settings[&apos;MONGODB_SERVER&apos;],</div><div class="line">            settings[&apos;MONGODB_PORT&apos;]</div><div class="line">        )</div><div class="line">        db = connection[settings[&apos;MONGODB_DB&apos;]]</div><div class="line">        self.collection = db[settings[&apos;MONGODB_COLLECTION&apos;]]</div><div class="line">    def process_item(self, item, spider):</div><div class="line">        self.collection.insert(dict(item))</div><div class="line">        return item</div></pre></td></tr></table></figure>
<h3 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h3><p><code>scrapy crawl mtime</code></p>
<blockquote>
<p>GitHub项目 <a href="https://github.com/Mihawkmah/Python.Crawler" target="_blank" rel="external">https://github.com/Mihawkmah/Python.Crawler</a></p>
</blockquote>
<h4 id="附录：mongodb数据库操作指令"><a href="#附录：mongodb数据库操作指令" class="headerlink" title="附录：mongodb数据库操作指令"></a>附录：mongodb数据库操作指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">show dbs //显示数据库</div><div class="line">use testdb //创建或使用某个数据库</div><div class="line">db.dropDatabase() //删除数据库</div><div class="line"></div><div class="line">show tables //显示集合</div><div class="line">db.test.drop() //删除集合</div><div class="line">db.test.insert() //插入文档</div><div class="line">db.test.update() //更新文档</div><div class="line">db.test.remove() //删除文档</div><div class="line"></div><div class="line">db.test.find().pretty()   //查找文档</div><div class="line">(&gt;) 大于 - $gt</div><div class="line">(&lt;) 小于 - $lt</div><div class="line">(&gt;=) 大于等于 - $gte</div><div class="line">(&lt;= ) 小于等于 - $lte</div><div class="line">db.test.find().limit() //读取的记录条数</div><div class="line">db.test.find().skip() //跳过的记录条数</div><div class="line">db.test.find().sort() //排序</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初始化爬虫&quot;&gt;&lt;a href=&quot;#初始化爬虫&quot; class=&quot;headerlink&quot; title=&quot;初始化爬虫&quot;&gt;&lt;/a&gt;初始化爬虫&lt;/h3&gt;&lt;h4 id=&quot;抓取维度指标&quot;&gt;&lt;a href=&quot;#抓取维度指标&quot; class=&quot;headerlink&quot; title=&quot;抓取维度指标&quot;&gt;&lt;/a&gt;抓取维度指标&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;电影排名&lt;/li&gt;
&lt;li&gt;电影名称&lt;/li&gt;
&lt;li&gt;导演&lt;/li&gt;
&lt;li&gt;主演&lt;/li&gt;
&lt;li&gt;类型&lt;/li&gt;
&lt;li&gt;电影描述&lt;/li&gt;
&lt;li&gt;评分&lt;/li&gt;
&lt;li&gt;评分人数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;目标链接&quot;&gt;&lt;a href=&quot;#目标链接&quot; class=&quot;headerlink&quot; title=&quot;目标链接&quot;&gt;&lt;/a&gt;目标链接&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://www.mtime.com/top/movie/top100/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用海盗模型建立数据分析维度</title>
    <link href="https://mihawkmah.github.io/2017/09/18/%E5%88%A9%E7%94%A8%E6%B5%B7%E7%9B%97%E6%A8%A1%E5%9E%8B%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%BB%B4%E5%BA%A6/"/>
    <id>https://mihawkmah.github.io/2017/09/18/利用海盗模型建立数据分析维度/</id>
    <published>2017-09-18T06:27:12.000Z</published>
    <updated>2017-09-18T06:36:43.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Acquisition别人怎么发现你？</li>
<li>Activation用户的第一次体验好不好？</li>
<li>Retention用户回来吗？</li>
<li>Revenue你怎么获得收入？</li>
<li>Referral用户给你做推荐吗？</li>
</ul>
<a id="more"></a>
<blockquote>
<p>海盗模型AARRR：</p>
<p>获客（Acquisition）就是主要从网站渠道获得到访的网站流量。</p>
<p>激活（Activation）让用户真正的体会到这个产品迭代创新价值并且愿意回来用，理解你这个产品了。</p>
<p>留存（Retention）就是你长期定位来源你这个产品，而不是只是注册就走掉了，那这个其实是越来越被现在业内的人士开始关注和重视的。因为低价流量的时代基本上终结了，再加上收入正常的产品过程中，购买率的转化等等或者是往销售那边导流转化的效率等等。</p>
<p>推荐（Referal）让用户向他的好朋友或者同事等认识的人去介绍</p>
</blockquote>
<p><img src="/2017/09/18/利用海盗模型建立数据分析维度/数据分析框架.jpg" alt="数据分析框架"></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Acquisition别人怎么发现你？&lt;/li&gt;
&lt;li&gt;Activation用户的第一次体验好不好？&lt;/li&gt;
&lt;li&gt;Retention用户回来吗？&lt;/li&gt;
&lt;li&gt;Revenue你怎么获得收入？&lt;/li&gt;
&lt;li&gt;Referral用户给你做推荐吗？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫入门[二] | 数据处理与存储</title>
    <link href="https://mihawkmah.github.io/2017/09/12/Scrapy%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E4%BA%8C-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B8%8E%E5%AD%98%E5%82%A8/"/>
    <id>https://mihawkmah.github.io/2017/09/12/Scrapy爬虫入门-二-数据处理与存储/</id>
    <published>2017-09-12T07:29:56.000Z</published>
    <updated>2017-09-21T07:18:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用项目item"><a href="#使用项目item" class="headerlink" title="使用项目item"></a>使用项目item</h3><p>Scrapy提供了item类，是装载抓取数据的容器。声明类似于Flask框架中的Models。在tutorial目录下的iterms.py文件编辑。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import scrapy</div><div class="line"></div><div class="line">class Product(scrapy.Item):</div><div class="line">    name = scrapy.Field()</div><div class="line">    price = scrapy.Field()</div><div class="line">    stock = scrapy.Field()</div><div class="line">    last_updated = scrapy.Field(serializer=str)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">product [ &apos;last_updated&apos; ]  =  &apos;today&apos;</div></pre></td></tr></table></figure>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查询product的数据主键</div><div class="line">product.keys()</div><div class="line"># 查询product中的所有数据</div><div class="line">product.items()</div></pre></td></tr></table></figure>
<h4 id="复制项目"><a href="#复制项目" class="headerlink" title="复制项目"></a>复制项目</h4><p><code>product2 = product.copy()</code></p>
<h4 id="从项目创建字典"><a href="#从项目创建字典" class="headerlink" title="从项目创建字典"></a>从项目创建字典</h4><p><code>dict(product)</code></p>
<h3 id="使用项目管道item-Pipeline"><a href="#使用项目管道item-Pipeline" class="headerlink" title="使用项目管道item Pipeline"></a>使用项目管道item Pipeline</h3><p>项目被蜘蛛住区后，它被发送到项目管道</p>
<h4 id="典型用途"><a href="#典型用途" class="headerlink" title="典型用途"></a>典型用途</h4><ul>
<li>清理HTML数据验证</li>
<li>验证爬取的数据（检查项目是否包含特定字段）</li>
<li>查重（并删除）</li>
<li>将刮取的项目存储在数据库中</li>
</ul>
<h4 id="pipelines-py中编写item-pipeline"><a href="#pipelines-py中编写item-pipeline" class="headerlink" title="pipelines.py中编写item pipeline"></a>pipelines.py中编写item pipeline</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class DoubanPipeline(object):</div><div class="line">    def process_item(self, item, spider):</div><div class="line">        return item</div></pre></td></tr></table></figure>
<p>在settings.py中进行注册</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">   &apos;myproject.pipelines.DoubanPipeline&apos;: 300,</div><div class="line">   &apos;myproject.pipelines.DouDouPipline&apos;:500,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分配给每个类的整型值，确定了他们运行的顺序，item按数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内。</p>
<h3 id="使用pymongo将item写入MongoDB"><a href="#使用pymongo将item写入MongoDB" class="headerlink" title="使用pymongo将item写入MongoDB"></a>使用pymongo将item写入MongoDB</h3><p>MongoDB的地址和数据库名称在Scrapy setttings.py配置文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MONGO_URI = &quot;mongodb://localhost:27017&quot;;</div><div class="line">MONGO_DATABASE = &quot;soufang&quot;;</div></pre></td></tr></table></figure>
<p>在pipelines.py中定义一个函数连接数据库，然后定义一个函数去处理被解析的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import pymongo</div><div class="line"></div><div class="line">class MongoPipeline(object):</div><div class="line"></div><div class="line">    collection_name = &apos;scrapy_items&apos;</div><div class="line"></div><div class="line">    def __init__(self, mongo_uri, mongo_db):</div><div class="line">        self.mongo_uri = mongo_uri</div><div class="line">        self.mongo_db = mongo_db</div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    def from_crawler(cls, crawler):</div><div class="line">        return cls(</div><div class="line">            mongo_uri=crawler.settings.get(&apos;MONGO_URI&apos;),</div><div class="line">            mongo_db=crawler.settings.get(&apos;MONGO_DATABASE&apos;, &apos;items&apos;)</div><div class="line">        )</div><div class="line"></div><div class="line">    def open_spider(self, spider):</div><div class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</div><div class="line">        self.db = self.client[self.mongo_db]</div><div class="line"></div><div class="line">    def close_spider(self, spider):</div><div class="line">        self.client.close()</div><div class="line"></div><div class="line">    def process_item(self, item, spider):</div><div class="line">        self.db[self.collection_name].insert(dict(item))</div><div class="line">        return item</div></pre></td></tr></table></figure>
<h4 id="附录：Mac安装MongoDB"><a href="#附录：Mac安装MongoDB" class="headerlink" title="附录：Mac安装MongoDB"></a>附录：Mac安装MongoDB</h4><p>更新Homebrew的包数据库</p>
<p><code>brew update</code></p>
<p>安装MongoDB，安装完成后显示位置：/usr/local/Cellar/mongodb/3.4.9</p>
<p><code>brew install mongodb</code></p>
<blockquote>
<p>To have launchd start mongodb now and restart at login:<br>  brew services start mongodb<br>Or, if you don’t want/need a background service you can just run:<br>  mongod –config /usr/local/etc/mongod.conf</p>
</blockquote>
<p>打开.bash_profile</p>
<p><code>cd ~</code></p>
<p><code>vim .bash_profile</code></p>
<p>在.bash_profile文件中加入下面语句，i进行编辑，esc退出编辑，:wq保存并推出</p>
<p><code>export PATH=/usr/local/Cellar/mongodb/3.4.4/bin:$PATH</code></p>
<p>创建/data/db目录</p>
<p><code>sudo mkdir -p /data/db</code></p>
<p>运行mongodb，默认数据库目录即为 /data/db</p>
<p><code>mongod</code></p>
<p>另一个窗口运行，开始各种数据库指令</p>
<p><code>mongo</code></p>
<p>显示已经存在的数据库</p>
<p><code>show dbs</code>    </p>
<p>退出</p>
<p><code>exit</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用项目item&quot;&gt;&lt;a href=&quot;#使用项目item&quot; class=&quot;headerlink&quot; title=&quot;使用项目item&quot;&gt;&lt;/a&gt;使用项目item&lt;/h3&gt;&lt;p&gt;Scrapy提供了item类，是装载抓取数据的容器。声明类似于Flask框架中的Models。在tutorial目录下的iterms.py文件编辑。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import scrapy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Product(scrapy.Item):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = scrapy.Field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    price = scrapy.Field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    stock = scrapy.Field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    last_updated = scrapy.Field(serializer=str)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>产品需要知道的认知与设计准则</title>
    <link href="https://mihawkmah.github.io/2017/09/11/%E4%BA%A7%E5%93%81%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E8%AE%A4%E7%9F%A5%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%87%86%E5%88%99/"/>
    <id>https://mihawkmah.github.io/2017/09/11/产品需要知道的认知与设计准则/</id>
    <published>2017-09-11T02:24:09.000Z</published>
    <updated>2017-09-12T02:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>“设计绝不是简单的拼合，排列甚至编辑；设计是通过阐明，简化、明确、修饰，使之庄严，有说服性，甚至带一点趣味性，来赋予其价值及意义。”——保罗·兰德（Paul Rand）</p>
</blockquote>
<h3 id="经验-amp-环境-amp-目标影响感知"><a href="#经验-amp-环境-amp-目标影响感知" class="headerlink" title="经验&amp;环境&amp;目标影响感知"></a>经验&amp;环境&amp;目标影响感知</h3><ul>
<li>避免歧义</li>
<li>保持一致</li>
<li>目标清晰</li>
</ul>
<h3 id="格式塔原理，视觉经过优化，更容易看到结构"><a href="#格式塔原理，视觉经过优化，更容易看到结构" class="headerlink" title="格式塔原理，视觉经过优化，更容易看到结构"></a>格式塔原理，视觉经过优化，更容易看到结构</h3><ul>
<li>接近性</li>
<li>相似性</li>
<li>连续性</li>
<li>封闭性</li>
<li>对称性</li>
<li>主题和背景</li>
<li>共同命运</li>
</ul>
<a id="more"></a>
<h3 id="色觉是有限的"><a href="#色觉是有限的" class="headerlink" title="色觉是有限的"></a>色觉是有限的</h3><ul>
<li>用饱和度亮度以及摄像来区分颜色</li>
<li>使用独特的颜色</li>
<li>避免使用色盲的人无法区分的颜色对</li>
<li>在颜色之外使用其他提示</li>
<li>将强烈的对抗色分开</li>
</ul>
<h3 id="我们的边界视觉很糟糕，让信息可见的常用方法"><a href="#我们的边界视觉很糟糕，让信息可见的常用方法" class="headerlink" title="我们的边界视觉很糟糕，让信息可见的常用方法"></a>我们的边界视觉很糟糕，让信息可见的常用方法</h3><ul>
<li>放在用户所看的位置上</li>
<li>标记出错误</li>
<li>使用错误符号</li>
<li>保留红色以呈现错误信息</li>
</ul>
<h3 id="糟糕的信息设计会影响阅读"><a href="#糟糕的信息设计会影响阅读" class="headerlink" title="糟糕的信息设计会影响阅读"></a>糟糕的信息设计会影响阅读</h3><ul>
<li>支持而不是干扰阅读：避免不常见和不熟悉的词汇，避免难以辨认的书写和字型，避免微小的文字，避免嘈杂背景下的文字，避免被重复的内容淹没，避免居中对齐的文字</li>
<li>尽量减少阅读需要</li>
</ul>
<h3 id="我们的注意力有限，记忆力也不完美"><a href="#我们的注意力有限，记忆力也不完美" class="headerlink" title="我们的注意力有限，记忆力也不完美"></a>我们的注意力有限，记忆力也不完美</h3><ul>
<li>只要用户确定了自己的目标，就不要显示一些会分散用户注意力无关的链接和行动召唤元素。</li>
<li>不同功能的操作越一致，或者不同类型对象的操作越一致，用户要学的就越少。</li>
</ul>
<h3 id="识别容易，回忆很难"><a href="#识别容易，回忆很难" class="headerlink" title="识别容易，回忆很难"></a>识别容易，回忆很难</h3><ul>
<li>看到和选择比回忆和输入要容易</li>
<li>尽可能使用图像来表达功能</li>
<li>使用缩略图来紧凑的描绘全尺寸的图像</li>
<li>越多人使用的功能应该越可见</li>
<li>使用视觉提示让用户知道他们所处的位置</li>
<li>让认证信息容易回忆</li>
</ul>
<h3 id="从经验中学习与学后付诸实践容易，解决问题和计算很难"><a href="#从经验中学习与学后付诸实践容易，解决问题和计算很难" class="headerlink" title="从经验中学习与学后付诸实践容易，解决问题和计算很难"></a>从经验中学习与学后付诸实践容易，解决问题和计算很难</h3><ul>
<li>显著的标识系统状态和用户当前进度</li>
<li>引导用户完成他们的目标</li>
<li>明确无误的告知用户需要了解的信息</li>
<li>不要让用户诊断系统问题</li>
<li>尽可能减小设置的数量和复杂度</li>
<li>让用户使用感觉而不是计算</li>
<li>让系统令人感到熟悉</li>
<li>让电脑去计算</li>
</ul>
<h3 id="许多因素影响学习"><a href="#许多因素影响学习" class="headerlink" title="许多因素影响学习"></a>许多因素影响学习</h3><ul>
<li>当实践经常、有规律和精确时，我们学得更快</li>
<li>当操作专注于任务、简单和一致时，我们学得更快</li>
<li>太过相似的独立概念会带来额外复杂性</li>
<li>当词汇专注于任务，熟悉和一致时，我们学得更快。同一个名称，就是同一个东西，不同的名称，就是不同的东西。</li>
</ul>
<h3 id="人类很少做理性的决策，帮助人们做决策"><a href="#人类很少做理性的决策，帮助人们做决策" class="headerlink" title="人类很少做理性的决策，帮助人们做决策"></a>人类很少做理性的决策，帮助人们做决策</h3><ul>
<li>提供所有选项</li>
<li>帮助人们找到替代方案</li>
<li>提供无偏见的数据</li>
<li>不要让人们计算</li>
<li>检查断言和假设</li>
<li>数据可视化</li>
<li>说服和引导</li>
</ul>
<h3 id="菲茨定律"><a href="#菲茨定律" class="headerlink" title="菲茨定律"></a>菲茨定律</h3><p>在屏幕上目标越大，且越靠近起始的位置，你就能越快的指向它</p>
<h3 id="高响应度的系统"><a href="#高响应度的系统" class="headerlink" title="高响应度的系统"></a>高响应度的系统</h3><ul>
<li>立刻告知用户已收到其动作，即使回应用户需要时间。保持用户对因果关系的感知</li>
<li>让用户知道软件是否在忙</li>
<li>在等待一个功能完成的同时，允许用户做别的事情</li>
<li>动画要做到平滑清晰</li>
<li>让用户能够终止他们不想要的长时间操作</li>
<li>让用户知道长时间的操作需要多长时间</li>
<li>尽可能让用户来掌控自己的工作节奏</li>
<li>先显示重要的信息</li>
<li>在空闲时间提前处理用户没有请求的那些事情</li>
<li>先提供一个轻量级的模拟反馈，直到目标达成，然后再执行真实的操作</li>
<li>根据用户输入的优先级，而不是输入顺序来处理</li>
<li>监控时间承诺，降低工作质量来保证不落后</li>
</ul>
<h3 id="48dp定律"><a href="#48dp定律" class="headerlink" title="48dp定律"></a>48dp定律</h3><p>48dp在物理屏幕上差不多是9毫米的大小，UI设计中所有的触摸类控件的推荐大小在7毫米到10毫米之间，因为这个值之间会使控件的点中率大大增加，在视觉上也会比较舒服。</p>
<h3 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h3><blockquote>
<p>无论排版还是配色，都要对比明显，字大字小要明显，间距要拉就拉开，配色颜色要正。最怕那种中庸的，是最没有气质的。</p>
</blockquote>
<p>块内间距&lt;块外间距</p>
<p>行间距：字符高度的30%</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“设计绝不是简单的拼合，排列甚至编辑；设计是通过阐明，简化、明确、修饰，使之庄严，有说服性，甚至带一点趣味性，来赋予其价值及意义。”——保罗·兰德（Paul Rand）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;经验-amp-环境-amp-目标影响感知&quot;&gt;&lt;a href=&quot;#经验-amp-环境-amp-目标影响感知&quot; class=&quot;headerlink&quot; title=&quot;经验&amp;amp;环境&amp;amp;目标影响感知&quot;&gt;&lt;/a&gt;经验&amp;amp;环境&amp;amp;目标影响感知&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免歧义&lt;/li&gt;
&lt;li&gt;保持一致&lt;/li&gt;
&lt;li&gt;目标清晰&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;格式塔原理，视觉经过优化，更容易看到结构&quot;&gt;&lt;a href=&quot;#格式塔原理，视觉经过优化，更容易看到结构&quot; class=&quot;headerlink&quot; title=&quot;格式塔原理，视觉经过优化，更容易看到结构&quot;&gt;&lt;/a&gt;格式塔原理，视觉经过优化，更容易看到结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;接近性&lt;/li&gt;
&lt;li&gt;相似性&lt;/li&gt;
&lt;li&gt;连续性&lt;/li&gt;
&lt;li&gt;封闭性&lt;/li&gt;
&lt;li&gt;对称性&lt;/li&gt;
&lt;li&gt;主题和背景&lt;/li&gt;
&lt;li&gt;共同命运&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫入门[一] | 环境配置及基本使用</title>
    <link href="https://mihawkmah.github.io/2017/09/07/Scrapy%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%5B%E4%B8%80%5D-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://mihawkmah.github.io/2017/09/07/Scrapy爬虫入门[一]-环境配置及基本使用/</id>
    <published>2017-09-07T03:11:24.000Z</published>
    <updated>2017-09-20T08:16:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境配置初始化"><a href="#环境配置初始化" class="headerlink" title="环境配置初始化"></a>环境配置初始化</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>安装虚拟环境管理工具pyenv</p>
<p><code>请自行搜索安装方法</code></p>
<p>安装科学计算anaconda</p>
<p><code>conda install anaconda</code></p>
<p>安装爬虫框架Scrapy</p>
<p><code>conda install scrapy</code></p>
<a id="more"></a>
<h4 id="创建Scrapy项目"><a href="#创建Scrapy项目" class="headerlink" title="创建Scrapy项目"></a>创建Scrapy项目</h4><p><code>scrapy startproject tutorial</code>  其中tutorial为项目名称</p>
<p>项目结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scrapy.cfg: 项目的配置文件；（用于发布到服务器）</div><div class="line">tutorial/: 该项目文件夹。之后将在此编写Python代码。</div><div class="line">tutorial/items.py: 项目中的item文件;（定义结构化数据字段field）.</div><div class="line">tutorial/pipelines.py: 项目中的pipelines文件;（用于存放执行后期数据处理的功能，定义如何存储结构化数据)</div><div class="line">tutorial/settings.py: 项目的设置文件；(如何修改User-Agent，设置爬取时间间隔，设置代理，配置中间件等等)</div><div class="line">tutorial/spiders/: 放置spider代码的目录;（编写爬取网站规则）</div></pre></td></tr></table></figure>
<p>编写爬虫</p>
<p><code>在路径下新建py文件：tutorial/spiders/quotes_spider.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import scrapy</div><div class="line"></div><div class="line">class QuotesSpider(scrapy.Spider):</div><div class="line">    name = &quot;quotes&quot;</div><div class="line">    start_urls = [</div><div class="line">        &apos;http://quotes.toscrape.com/page/1/&apos;,</div><div class="line">        &apos;http://quotes.toscrape.com/page/2/&apos;,</div><div class="line">    ]</div><div class="line"></div><div class="line">    def parse(self, response):</div><div class="line">        for quote in response.css(&apos;div.quote&apos;):</div><div class="line">            yield &#123;</div><div class="line">                &apos;text&apos;: quote.css(&apos;span.text::text&apos;).extract_first(),</div><div class="line">                &apos;author&apos;: quote.css(&apos;small.author::text&apos;).extract_first(),</div><div class="line">                &apos;tags&apos;: quote.css(&apos;div.tags a.tag::text&apos;).extract(),</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h4 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h4><p>进入项目根目录</p>
<p><code>cd tutorial</code></p>
<p>查看项目包含的爬虫名称</p>
<p><code>scrapy list</code></p>
<p>执行爬虫</p>
<p><code>scrapy crawl quotes</code></p>
<p>其中quotes是编写的爬虫文件中定义的名称</p>
<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><p>使用scrapy shell提取数据：</p>
<p><code>scrapy shell &#39;http://quotes.toscrape.com&#39;</code></p>
<p>查看状态</p>
<p><code>response.status</code></p>
<p>使用Chrome插件：</p>
<p><code>SelectorGadget</code></p>
<p>Selector的四个基本方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xpath(): 传入xpath表达式，返回该表达式所对应的所有节点的selector list列表 。</div><div class="line">css(): 传入CSS表达式，返回该表达式所对应的所有节点的selector list列表.</div><div class="line">extract(): 序列化该节点为unicode字符串并返回list。</div><div class="line">re(): 根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</div></pre></td></tr></table></figure>
<p>CSS选择数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># extract（）</div><div class="line">调用.extract()此列表中每个元素的方法，并将其结果作为unicode字符串列表返回展平</div><div class="line"># 提取样式为quote的title元素</div><div class="line">response.css(&apos;title.quote&apos;)</div><div class="line"># 提取title元素的文本</div><div class="line">response.css(&apos;title::text&apos;).extract()</div><div class="line"># 提取第一个title元素的文本</div><div class="line">response.css(&apos;title::text&apos;)[0].extract()</div><div class="line"># 提取div.tags下的a.tag元素的文本</div><div class="line">response.css(&apos;div.tags a.tag::text&apos;).extract()</div><div class="line"># 提取img元素下的src属性</div><div class="line">response.css(&apos;img&apos;).xpath(&apos;@src&apos;).extract()</div><div class="line"># 提取a标签的href属性</div><div class="line">response.css(&apos;a[href*=image]::attr(href)&apos;).extract()</div><div class="line"># 提取a标签下的img标签的src属性</div><div class="line">response.css(&apos;a[href*=image] img::attr(src)&apos;).extract()</div></pre></td></tr></table></figure>
<p>使用正则表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># re（regex）</div><div class="line">应用给定的正则表达式并返回一个包含匹配项的unicode字符串的列表</div><div class="line"># 使用.re()方法</div><div class="line">response.xpath(&apos;//a[contains(@href, &quot;image&quot;)]/text()&apos;).re(r&apos;Name:\s*(.*)&apos;)</div></pre></td></tr></table></figure>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>导出JSON</p>
<p><code>scrapy crawl quotes -o quotes.json</code></p>
<p>其中quotes.json为保存的文件名</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境配置初始化&quot;&gt;&lt;a href=&quot;#环境配置初始化&quot; class=&quot;headerlink&quot; title=&quot;环境配置初始化&quot;&gt;&lt;/a&gt;环境配置初始化&lt;/h3&gt;&lt;h4 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h4&gt;&lt;p&gt;安装虚拟环境管理工具pyenv&lt;/p&gt;
&lt;p&gt;&lt;code&gt;请自行搜索安装方法&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装科学计算anaconda&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda install anaconda&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装爬虫框架Scrapy&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda install scrapy&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何快速准确沟通动效需求 | 产品必备技能</title>
    <link href="https://mihawkmah.github.io/2017/09/01/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%87%86%E7%A1%AE%E6%B2%9F%E9%80%9A%E5%8A%A8%E6%95%88%E9%9C%80%E6%B1%82-%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    <id>https://mihawkmah.github.io/2017/09/01/如何快速准确沟通动效需求-产品必备技能/</id>
    <published>2017-09-01T08:27:00.000Z</published>
    <updated>2017-09-01T08:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>静态页面UI提交给开发需要输出有效的切图和尺寸标注，同样动态也需要输出切图和标注，不过标注需要包含如下：<strong>属性（位置、大小、角度、透明度）、时间（开始时间、持续时间）、速度曲线</strong>。</p>
<h4 id="属性-amp-时间-五要素"><a href="#属性-amp-时间-五要素" class="headerlink" title="属性&amp;时间 - 五要素"></a>属性&amp;时间 - 五要素</h4><p>几乎所有的动态效果，都可以由如下的五种要素构成：</p>
<ul>
<li>移动</li>
<li>缩放</li>
<li>旋转</li>
<li>透明</li>
<li>起始</li>
</ul>
<a id="more"></a>
<h4 id="速度曲线-缓动函数"><a href="#速度曲线-缓动函数" class="headerlink" title="速度曲线 - 缓动函数"></a>速度曲线 - 缓动函数</h4><p>利用CSS3的@keyframes规则和动画属性可以创建动画，取代Flash、JavaScript。现实中物体运动过程总是时而加速、时而减速，我们的大脑习惯了这种自然的运动方式，利用速度曲线函数可以实现这种效果，animation-timing-function属性可以设置运动曲线，默认是”ease”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Linear：匀速运动</div><div class="line"></div><div class="line">Ease：慢速开始，然后变快，然后慢速结束</div><div class="line"></div><div class="line">Ease-out：先快后慢</div><div class="line"></div><div class="line">Ease-in：先慢后快</div><div class="line"></div><div class="line">ease-in-out：以慢速开始和结束</div></pre></td></tr></table></figure>
<p>还可以用cubic-bezier来自定义速度曲线，规定是cubic-bezier(X1, Y1, X2, Y2)，其中P1点坐标为(X1,Y1)，P2点坐标为(X2,Y2)。例如上述所说的linear函数可以写为c<code>ubic-bezier(0, 0, 1, 1)</code></p>
<p><img src="/2017/09/01/如何快速准确沟通动效需求-产品必备技能/741039-4016cb02499bb127.jpg" alt="741039-4016cb02499bb127"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;静态页面UI提交给开发需要输出有效的切图和尺寸标注，同样动态也需要输出切图和标注，不过标注需要包含如下：&lt;strong&gt;属性（位置、大小、角度、透明度）、时间（开始时间、持续时间）、速度曲线&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;属性-amp-时间-五要素&quot;&gt;&lt;a href=&quot;#属性-amp-时间-五要素&quot; class=&quot;headerlink&quot; title=&quot;属性&amp;amp;时间 - 五要素&quot;&gt;&lt;/a&gt;属性&amp;amp;时间 - 五要素&lt;/h4&gt;&lt;p&gt;几乎所有的动态效果，都可以由如下的五种要素构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移动&lt;/li&gt;
&lt;li&gt;缩放&lt;/li&gt;
&lt;li&gt;旋转&lt;/li&gt;
&lt;li&gt;透明&lt;/li&gt;
&lt;li&gt;起始&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目管理框架 | 短平快推动项目</title>
    <link href="https://mihawkmah.github.io/2017/08/24/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6-%E7%9F%AD%E5%B9%B3%E5%BF%AB%E6%8E%A8%E5%8A%A8%E9%A1%B9%E7%9B%AE/"/>
    <id>https://mihawkmah.github.io/2017/08/24/项目管理框架-短平快推动项目/</id>
    <published>2017-08-24T05:38:20.000Z</published>
    <updated>2017-09-01T08:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>实际工作中为了确保项目按照进度顺利完成，产品经理需要对项目进行一定的管理和把控，这个过程中包含了时间管理、人员管理、资源的控制协调等。产品相较于研发在思考的维度上往往更具有深度和广度，所以更加适合进行项目的管理工作。研发往往只会通过实现这个维度去思考问题，而产品则需要考虑体验、交互、用户、产品、市场等一系列影响项目的因素。</p>
<a id="more"></a>
<h3 id="项目管理的9大知识领域"><a href="#项目管理的9大知识领域" class="headerlink" title="项目管理的9大知识领域"></a>项目管理的9大知识领域</h3><blockquote>
<p>整合管理：以全盘视野，掌控项目全程</p>
<p>项目范围管理：达成目标，哪些该做、哪些不该做？</p>
<p>时间管理：赋予合理期限，准时开工、准时收工</p>
<p>成本管理：估算、预算，控制，3阶段掌握成本</p>
<p>质量管理： 质量，来自好计划，而不是多检验</p>
<p>人力资源管理：调度人力、划分职权，成员产能不浪费</p>
<p>沟通管理：花80%时间沟通，让对的人有对的信息</p>
<p>风险管理：提早预防、加速应变，将不确定降到最低</p>
<p>采购管理：挑选优质外包商，提升成本效益</p>
</blockquote>
<p><img src="/2017/08/24/项目管理框架-短平快推动项目/项目管理框架.jpg" alt="项目管理框架"></p>
<p>实际工作中短平快的沟通和项目管理有利于项目的高效进行，推荐使用<strong>OPPM</strong>项目管理方法，以目标为导向的过程化绩效管理。</p>
<p><img src="/2017/08/24/项目管理框架-短平快推动项目/OPPM项目管理.jpg" alt="OPPM"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际工作中为了确保项目按照进度顺利完成，产品经理需要对项目进行一定的管理和把控，这个过程中包含了时间管理、人员管理、资源的控制协调等。产品相较于研发在思考的维度上往往更具有深度和广度，所以更加适合进行项目的管理工作。研发往往只会通过实现这个维度去思考问题，而产品则需要考虑体验、交互、用户、产品、市场等一系列影响项目的因素。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>产品文档框架 | 缜密的产品之术</title>
    <link href="https://mihawkmah.github.io/2017/08/16/%E4%BA%A7%E5%93%81%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6-%E7%BC%9C%E5%AF%86%E7%9A%84%E4%BA%A7%E5%93%81%E4%B9%8B%E6%9C%AF/"/>
    <id>https://mihawkmah.github.io/2017/08/16/产品文档框架-缜密的产品之术/</id>
    <published>2017-08-16T07:24:32.000Z</published>
    <updated>2017-09-29T03:43:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>原型+标注的形式可以很好的传达页面逻辑及功能需求，在此基础上，需要使用文档的形式将APP全局功能及异常情况处理落地下来提交给研发，将产品原型中无法顾及到的内容表述清楚。</p>
<blockquote>
<ol>
<li>明确所有场景和使用人群</li>
<li>交互逻辑无缺失</li>
<li>异常场景不遗漏</li>
<li>异常状态有说明</li>
<li>手势操作不遗漏</li>
<li>关键字段有规则定义</li>
<li>极限情况有定义</li>
<li>是否涉及到多种角色和权限</li>
<li>刷新、加载、转场说明</li>
</ol>
</blockquote>
<a id="more"></a>
<p><img src="/2017/08/16/产品文档框架-缜密的产品之术/文档框架.jpg" alt="文档框架"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原型+标注的形式可以很好的传达页面逻辑及功能需求，在此基础上，需要使用文档的形式将APP全局功能及异常情况处理落地下来提交给研发，将产品原型中无法顾及到的内容表述清楚。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;明确所有场景和使用人群&lt;/li&gt;
&lt;li&gt;交互逻辑无缺失&lt;/li&gt;
&lt;li&gt;异常场景不遗漏&lt;/li&gt;
&lt;li&gt;异常状态有说明&lt;/li&gt;
&lt;li&gt;手势操作不遗漏&lt;/li&gt;
&lt;li&gt;关键字段有规则定义&lt;/li&gt;
&lt;li&gt;极限情况有定义&lt;/li&gt;
&lt;li&gt;是否涉及到多种角色和权限&lt;/li&gt;
&lt;li&gt;刷新、加载、转场说明&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>原型交互框架 | 高效沟通传达方案</title>
    <link href="https://mihawkmah.github.io/2017/08/16/%E5%8E%9F%E5%9E%8B%E4%BA%A4%E4%BA%92%E6%A1%86%E6%9E%B6-%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%E4%BC%A0%E8%BE%BE%E6%96%B9%E6%A1%88/"/>
    <id>https://mihawkmah.github.io/2017/08/16/原型交互框架-高效沟通传达方案/</id>
    <published>2017-08-16T07:23:32.000Z</published>
    <updated>2017-09-08T04:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>当产品的需求落地后，需要将所需的功能高效的传达给UI、前端、研发，这个时候原型设计的好坏就起到了至关重要的作用，需求传达不明确会导致产品反复修改，浪费大量的设计开发资源，下面是我最近总结的原型交互框架，我的习惯是交互直接在原型中标注。</p>
<blockquote>
<p>在允许的范围内（不同的输入输出限制下），努力寻找、选择、创造一些套路，影响用户行为，让用户以更好的体验完成自身目标以及产品目标。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2017/08/16/原型交互框架-高效沟通传达方案/原型框架.jpg" alt="原型框架"></p>
<blockquote>
<p>测试文档模板：编号、功能元素、前置条件、操作步骤、预期结果、是否通过、实际结果、反馈建议</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当产品的需求落地后，需要将所需的功能高效的传达给UI、前端、研发，这个时候原型设计的好坏就起到了至关重要的作用，需求传达不明确会导致产品反复修改，浪费大量的设计开发资源，下面是我最近总结的原型交互框架，我的习惯是交互直接在原型中标注。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在允许的范围内（不同的输入输出限制下），努力寻找、选择、创造一些套路，影响用户行为，让用户以更好的体验完成自身目标以及产品目标。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>产品冲刺框架 | 从0到1快速落地产品</title>
    <link href="https://mihawkmah.github.io/2017/08/09/%E4%BA%A7%E5%93%81%E5%86%B2%E5%88%BA%E6%A1%86%E6%9E%B6%20%7C%20%E4%BB%8E0%E5%88%B01%E5%BF%AB%E9%80%9F%E8%90%BD%E5%9C%B0%E4%BA%A7%E5%93%81/"/>
    <id>https://mihawkmah.github.io/2017/08/09/产品冲刺框架 | 从0到1快速落地产品/</id>
    <published>2017-08-09T03:29:31.000Z</published>
    <updated>2017-09-08T07:19:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>产品在工作过程中往往面对来自各方的需求，工作一多便容易失去头绪，在这个过程中不断踩坑不断总结，得出一套属于自己的产品方法论，才能更好的落地一款产品。</p>
<p>产品冲刺框架，经历需求分析 - 从需求到功能 - 功能元素梳理这三大过程。框架可以起到地图的作用，在工作过程中帮助你查漏补缺，提高思维效率，如果有效就拿来用吧。</p>
<a id="more"></a>
<p><img src="/2017/08/09/产品冲刺框架 | 从0到1快速落地产品/产品冲刺框架.jpg" alt="产品冲刺框架"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;产品在工作过程中往往面对来自各方的需求，工作一多便容易失去头绪，在这个过程中不断踩坑不断总结，得出一套属于自己的产品方法论，才能更好的落地一款产品。&lt;/p&gt;
&lt;p&gt;产品冲刺框架，经历需求分析 - 从需求到功能 - 功能元素梳理这三大过程。框架可以起到地图的作用，在工作过程中帮助你查漏补缺，提高思维效率，如果有效就拿来用吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MAC使用Hexo在GitHub搭建静态博客</title>
    <link href="https://mihawkmah.github.io/2017/08/04/MAC%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>https://mihawkmah.github.io/2017/08/04/MAC使用Hexo在GitHub搭建静态博客/</id>
    <published>2017-08-04T07:36:58.000Z</published>
    <updated>2017-08-16T07:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-MAC本地环境准备"><a href="#1-MAC本地环境准备" class="headerlink" title="1. MAC本地环境准备"></a>1. MAC本地环境准备</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>官网下载安装包安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a></p>
<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p><code>brew install git</code></p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p><code>sudo npm install -g hexo</code></p>
<a id="more"></a>
<h4 id="建立本地网站"><a href="#建立本地网站" class="headerlink" title="建立本地网站"></a>建立本地网站</h4><p><code>hexo init hexo</code></p>
<p><code>cd hexo</code></p>
<p><code>npm install</code></p>
<h4 id="开启本地服务器"><a href="#开启本地服务器" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h4><p><code>hexo s</code></p>
<h3 id="2-将博客发布到GitHub"><a href="#2-将博客发布到GitHub" class="headerlink" title="2. 将博客发布到GitHub"></a>2. 将博客发布到GitHub</h3><h4 id="检查是否存在SSH-keys，如果有文件id-rsa-pub或id-dsa-pub则存在。"><a href="#检查是否存在SSH-keys，如果有文件id-rsa-pub或id-dsa-pub则存在。" class="headerlink" title="检查是否存在SSH keys，如果有文件id_rsa.pub或id_dsa.pub则存在。"></a>检查是否存在SSH keys，如果有文件id_rsa.pub或id_dsa.pub则存在。</h4><p><code>ls -al ~/.ssh</code></p>
<p>如果不存在则执行命令生成SSH keys</p>
<p><code>ssh-keygen -t rsa -C &quot;mihawkmah@gmail.com&quot;</code></p>
<h4 id="添加到GitHub"><a href="#添加到GitHub" class="headerlink" title="添加到GitHub"></a>添加到GitHub</h4><p>Find前往文件夹<code>~/.ssh/id_rsa.pub</code>打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p>
<p>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方<code>Add key</code>绿色按钮即可。</p>
<h4 id="配置-config-yml，文件末尾修改为"><a href="#配置-config-yml，文件末尾修改为" class="headerlink" title="配置_config.yml，文件末尾修改为"></a>配置_config.yml，文件末尾修改为</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:Mihawkmah/Mihawkmah.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h4 id="在本地博客目录下运行"><a href="#在本地博客目录下运行" class="headerlink" title="在本地博客目录下运行"></a>在本地博客目录下运行</h4><p><code>npm install hexo-deployer-git --save</code></p>
<h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><p><code>hexo g</code></p>
<p><code>hexo d</code></p>
<h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h3><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</div><div class="line"></div><div class="line">git clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo</div></pre></td></tr></table></figure>
<p>修改 _config.yml 的 theme 配置项为 apollo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">theme: apollo</div><div class="line"></div><div class="line"># 在归档页面显示所有文章</div><div class="line"># 需要上面安装的 hexo-generator-archive 插件支持</div><div class="line">archive_generator:</div><div class="line">    per_page: 0</div><div class="line">    yearly: false</div><div class="line">    monthly: false</div><div class="line">    daily: false</div></pre></td></tr></table></figure>
<h4 id="日常更新发布"><a href="#日常更新发布" class="headerlink" title="日常更新发布"></a>日常更新发布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure>
<h4 id="MD文件的图片引用"><a href="#MD文件的图片引用" class="headerlink" title="MD文件的图片引用"></a>MD文件的图片引用</h4><p>在hexo目录下执行</p>
<p><code>npm install hexo-asset-image --save</code></p>
<p>安装完成后，hexo新建文章时会发现多出一个与文章名字相同的图片文件夹，即可用 <code>![logo](文件夹/logo.jpg)</code> 直接插入 <code>logo.jpg</code></p>
<blockquote>
<p>包地址：<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">https://github.com/CodeFalling/hexo-asset-image</a></p>
</blockquote>
<h4 id="显示文章摘要"><a href="#显示文章摘要" class="headerlink" title="显示文章摘要"></a>显示文章摘要</h4><p>在文章摘要之后其他内容之前添加 HTML 注释标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!-- more --&gt;</div></pre></td></tr></table></figure>
<div class="tip"><br><br>版权归属 禁止转载<br><br></div>

<div class="tip"><br><br>如需转载 请联系微信mihawkmah<br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-MAC本地环境准备&quot;&gt;&lt;a href=&quot;#1-MAC本地环境准备&quot; class=&quot;headerlink&quot; title=&quot;1. MAC本地环境准备&quot;&gt;&lt;/a&gt;1. MAC本地环境准备&lt;/h3&gt;&lt;h4 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;安装Node.js&lt;/h4&gt;&lt;p&gt;官网下载安装包安装&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/zh-cn/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h4&gt;&lt;p&gt;&lt;code&gt;brew install git&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h4&gt;&lt;p&gt;&lt;code&gt;sudo npm install -g hexo&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>轻松4步完成Flask博客Apache服务器搭建</title>
    <link href="https://mihawkmah.github.io/2017/08/04/%E8%BD%BB%E6%9D%BE4%E6%AD%A5%E5%AE%8C%E6%88%90Flask%E5%8D%9A%E5%AE%A2Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>https://mihawkmah.github.io/2017/08/04/轻松4步完成Flask博客Apache服务器搭建/</id>
    <published>2017-08-04T06:40:00.000Z</published>
    <updated>2017-09-08T07:20:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第1步-服务器配置"><a href="#第1步-服务器配置" class="headerlink" title="第1步 服务器配置"></a>第1步 服务器配置</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul>
<li><p>使用centos-6-x86系统</p>
</li>
<li><p>用iterm连接服务器 </p>
<p><code>ssh root@67.209.189.156 -p 27556</code></p>
<a id="more"></a>
</li>
<li><p>在iterm按快捷键option+command+F打开密码管理，输入服务器密码。打开菜单Profiles-Advanced-Edit配置自动弹出密码，其中Regular Expression填写root@67.209.189.156’s password:，Action填写Open Password Manager，然后选择对应的服务器密码。</p>
</li>
<li><p>升级服务器</p>
<p><code>yum update</code></p>
</li>
<li><p>编译环境准备</p>
<p><code>yum groupinstall &#39;Development Tools&#39;</code> </p>
<p><code>yum install zlib-devel bzip2-devel openssl-devel ncurese-devel wget</code></p>
<p>​</p>
<h4 id="安装Python3-6"><a href="#安装Python3-6" class="headerlink" title="安装Python3.6"></a>安装Python3.6</h4></li>
<li><p>下载Python3.6代码包</p>
<p><code>wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz</code></p>
</li>
<li><p>编译</p>
<p><code>tar Jxvf Python-3.5.1.tar.xz</code></p>
<p><code>cd Python-3.5.1</code> </p>
<p><code>./configure --prefix=/usr/local/python3</code> </p>
<p><code>make &amp;&amp; make install</code></p>
<p>​</p>
<h4 id="更换系统默认Python版本"><a href="#更换系统默认Python版本" class="headerlink" title="更换系统默认Python版本"></a><strong>更换系统默认Python版本</strong></h4></li>
<li><p>1 备份旧版本 Python</p>
<p><code>mv /usr/bin/python /usr/bin/python2.6.6</code></p>
</li>
<li><p>2 新建指向新版本 Python 以及 pip 的软连接</p>
<p><code>ln -s /usr/local/python3/bin/python3.6 /usr/bin/python</code></p>
<p><code>ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</code></p>
</li>
<li><p>3 检验 Python 及 pip 版本</p>
<p><code>python -V</code></p>
<p><code>pip -V</code></p>
<p>​</p>
<h4 id="更新yum相关设置"><a href="#更新yum相关设置" class="headerlink" title="更新yum相关设置"></a><strong>更新yum相关设置</strong></h4></li>
<li><p>因 yum 的功能依赖 Python2 更改默认 Python版本后会导致 yum无法正常工作</p>
</li>
<li><p>执行以下命令</p>
<p><code>vi /usr/bin/yum</code></p>
</li>
<li><p>打开文件，修改第一行为：</p>
<p><code>#!/usr/bin/python2.7</code></p>
</li>
</ul>
<h3 id="第2步-Apache配置"><a href="#第2步-Apache配置" class="headerlink" title="第2步 Apache配置"></a>第2步 Apache配置</h3><ul>
<li><h4 id="安装Apache服务器相关包"><a href="#安装Apache服务器相关包" class="headerlink" title="安装Apache服务器相关包"></a>安装Apache服务器相关包</h4><p><code>yum install httpd</code></p>
<p><code>yum install httpd-devel</code></p>
<p>##### </p>
</li>
<li><h4 id="安装mod-wsgi-so"><a href="#安装mod-wsgi-so" class="headerlink" title="安装mod_wsgi.so"></a>安装mod_wsgi.so</h4></li>
<li><p>不能使用yum安装，使用Python3.6安装，参考网址<a href="http://modwsgi.readthedocs.io/en/develop/user-guides/quick-installation-guide.html" target="_blank" rel="external">http://modwsgi.readthedocs.io/en/develop/user-guides/quick-installation-guide.html</a></p>
</li>
<li><p>下载安装包<a href="https://github.com/GrahamDumpleton/mod_wsgi/releases" target="_blank" rel="external">https://github.com/GrahamDumpleton/mod_wsgi/releases</a></p>
</li>
<li><p>编译</p>
<p><code>tar xvfz mod_wsgi-X.Y.tar.gz</code></p>
<p><code>./configure --with-python=/usr/local/python3/bin/python3.6</code></p>
<p><code>make</code></p>
<p><code>make install</code></p>
</li>
<li><p>记录安装完成后显示的路径</p>
<p><code>/usr/lib/httpd/modules</code></p>
<p>​</p>
</li>
</ul>
<h3 id="第3步-数据库配置"><a href="#第3步-数据库配置" class="headerlink" title="第3步 数据库配置"></a>第3步 数据库配置</h3><ul>
<li><p>查看系统版本，如果输出的信息包含 x86_64，说明你的系统是64位，如果不包含说明是32位系统。</p>
<p><code>uname -a</code></p>
</li>
<li><p>创建10gen.repo文件</p>
<p><code>cd /etc/yum.repos.d/</code></p>
<p><code>vi 10gen.repo</code></p>
</li>
<li><p>把下列信息粘贴到10gen.repo文件中（32位系统）</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[10gen]  </div><div class="line">name=10gen Repository  </div><div class="line">baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686  </div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure>
<ul>
<li><p>查看是否生效</p>
<p><code>yum info mongo-10gen-server</code></p>
</li>
<li><p>开始安装</p>
<p><code>yum install mongo-10gen-server</code>  </p>
</li>
<li><p>配置文件地址 /etc/mongod.conf</p>
</li>
<li><p>启动mongodb</p>
<p><code>service mongod start</code></p>
<p>​</p>
</li>
</ul>
<h3 id="第4步-网站配置"><a href="#第4步-网站配置" class="headerlink" title="第4步 网站配置"></a>第4步 网站配置</h3><ul>
<li><p>Flask博客环境配置</p>
<p><code>pip install flask-mongoengine</code></p>
<p><code>pip install flask-login</code></p>
<p><code>pip install flask</code></p>
<p><code>pip install flask-wtf</code></p>
<p><code>pip install jinja2</code></p>
</li>
<li><p>打开配置文件 </p>
<p><code>vi /etc/httpd/conf/httpd.conf</code></p>
</li>
<li><p>将如下代码加入到配置文件中，路径为mod_wsgi.so安装的路径。加在mod_version.so之后</p>
<p><code>LoadModule wsgi_module /usr/lib/httpd/modules/mod_wsgi.so</code></p>
</li>
<li><p>将如下代码加在<directory "="" var="" www="" html"=""></directory>整段代码之后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#WSGIPythonHome /usr/local/python3/bin </div><div class="line">&lt;VirtualHost *:80&gt; </div><div class="line">ServerName example.com </div><div class="line">WSGIScriptAlias /blog /var/www/html/blog/flask.wsgi </div><div class="line">&lt;Directory /var/www/html/blog&gt; </div><div class="line">#Require all granted </div><div class="line">#Require host ip </div><div class="line">Order allow,deny </div><div class="line">Allow from all </div><div class="line">&lt;/Directory&gt; </div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>配置flask.wsgi代码为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys </div><div class="line">sys.path.insert(0, &quot;/var/www/html/blog&quot;) #工程根目录，即wsgi文件的路径</div><div class="line">from app import app as application</div></pre></td></tr></table></figure>
</li>
<li><p>目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ 根目录 /var/www/html/blog</div><div class="line">  + flask.wsgi</div><div class="line">  + app/</div><div class="line">    + __init__.py</div><div class="line">    + views.py</div><div class="line">    + models.py</div><div class="line">    + forms.py</div><div class="line">    + static/</div><div class="line">      + ckeditor/</div><div class="line">      + images/</div><div class="line">    + templates/</div><div class="line">      + index.html</div><div class="line">      + base.html</div></pre></td></tr></table></figure>
<p>init__.py文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from flask import Flask</div><div class="line">from flask_mongoengine import MongoEngine</div><div class="line">from flask.ext.login import LoginManager</div><div class="line"></div><div class="line"># 初始化flask应用</div><div class="line">app = Flask(__name__)</div><div class="line">app.config.from_object(&apos;config&apos;)</div><div class="line"></div><div class="line"># 初始化数据库</div><div class="line">app.config[&apos;MONGODB_SETTINGS&apos;] = &#123;</div><div class="line">    &apos;db&apos;: &apos;mblog&apos;,</div><div class="line">    &apos;host&apos;: &apos;127.0.0.1&apos;,</div><div class="line">    &apos;port&apos;: 27017</div><div class="line">&#125;</div><div class="line">db = MongoEngine(app)</div><div class="line"></div><div class="line"># 初始化Flasklogin</div><div class="line">lm = LoginManager(app)</div><div class="line"></div><div class="line">from app import views,models</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(host=&apos;0.0.0.0&apos;,port=5000,debug=True)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p>显示软链接对应路径</p>
<p><code>ls -l /usr/bin/python</code></p>
</li>
<li><p>显示python地址</p>
<p><code>which python</code></p>
</li>
<li><p>查看错误日志</p>
<p><code>tail -f /var/log/httpd/error_log</code></p>
</li>
</ul>
<blockquote>
<p>博客源码：<a href="https://github.com/Mihawkmah/Flask.blog" target="_blank" rel="external">https://github.com/Mihawkmah/Flask.blog</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第1步-服务器配置&quot;&gt;&lt;a href=&quot;#第1步-服务器配置&quot; class=&quot;headerlink&quot; title=&quot;第1步 服务器配置&quot;&gt;&lt;/a&gt;第1步 服务器配置&lt;/h3&gt;&lt;h4 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用centos-6-x86系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用iterm连接服务器 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh root@67.209.189.156 -p 27556&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
