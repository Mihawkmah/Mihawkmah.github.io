<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>末小山 | 锦鲤无妙棋</title>
  <subtitle>不要憋大招，自古长考出臭棋。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Mihawkmah.github.io/"/>
  <updated>2018-04-22T01:45:15.046Z</updated>
  <id>http://Mihawkmah.github.io/</id>
  
  <author>
    <name>Mihawkmah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://Mihawkmah.github.io/2018/04/22/test/"/>
    <id>http://Mihawkmah.github.io/2018/04/22/test/</id>
    <published>2018-04-22T01:45:15.000Z</published>
    <updated>2018-04-22T01:45:15.046Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习有监督模型</title>
    <link href="http://Mihawkmah.github.io/2018/04/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%9C%89%E7%9B%91%E7%9D%A3%E6%A8%A1%E5%9E%8B/"/>
    <id>http://Mihawkmah.github.io/2018/04/12/机器学习有监督模型/</id>
    <published>2018-04-12T08:10:10.000Z</published>
    <updated>2018-04-12T08:12:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="明确问题类别"><a href="#明确问题类别" class="headerlink" title="明确问题类别"></a>明确问题类别</h3><h4 id="有监督还是无监督"><a href="#有监督还是无监督" class="headerlink" title="有监督还是无监督"></a>有监督还是无监督</h4><p>根据输入来选择：</p>
<ul>
<li>有标记的数据就是监督学习问题</li>
<li>无标记数据，找结构就是无监督学习问题</li>
</ul>
<h4 id="有监督学习：回归、分类"><a href="#有监督学习：回归、分类" class="headerlink" title="有监督学习：回归、分类"></a>有监督学习：回归、分类</h4><p>根据输出判断：</p>
<ul>
<li>输出是数字，这是回归问题</li>
<li>如果输出是类别，那么是分类问题</li>
</ul>
<a id="more"></a>
<h3 id="如何选择算法"><a href="#如何选择算法" class="headerlink" title="如何选择算法"></a>如何选择算法</h3><ul>
<li>从简单算法开始，比如线性回归、SVM，现成模型快速看结果，如果结果不错，很可能各种算法都可以得到好结果</li>
<li>结果不好，那么可能问题比较困难，可能这是一个非线性问题，是否需要进行特征工程，使用Kernel函数（SVM），使用深度学习进行特征工程（数据够多）。又或者特征太多，数据少，可能需要考虑特征选择，比如LASSO或者PCA</li>
<li>实践，试错！</li>
</ul>
<h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><h4 id="单变量线性回归、多变量线性回归、多项式回归、Ridge、LASSO"><a href="#单变量线性回归、多变量线性回归、多项式回归、Ridge、LASSO" class="headerlink" title="单变量线性回归、多变量线性回归、多项式回归、Ridge、LASSO"></a>单变量线性回归、多变量线性回归、多项式回归、Ridge、LASSO</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 将数据分为训练集、测试集</div><div class="line">X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=0)</div><div class="line"></div><div class="line"># 使用训练数据对模型进行训练，得到lr</div><div class="line">lr = LinearRegression().fit(X_train,y_train)</div><div class="line"># 模型正则化 Ridge回归，alpha的值越大就越严格，值越小越灵活</div><div class="line"># ridge10 = Ridge(alpha=10).fit(X_train,y_train)</div><div class="line"># 模型正则化 Lasso回归，alpha的值越大使用的特征数量越少，值越小惩罚越轻特征越多模型越复杂</div><div class="line"># lasso01 = Lasso(alpha=0.1).fit(X_train,y_train)</div><div class="line"># 打印出Lasso使用了几个特征</div><div class="line"># print(format(np.sum(lasso01.coef_!=0)))</div><div class="line"></div><div class="line"># 通过模型lr函数做预测</div><div class="line">y_train_pred = lr.predict(X_train)</div><div class="line">y_test_pred = lr.predict(X_test)</div><div class="line"></div><div class="line"># 通过图形直观看模型质量</div><div class="line">plt.scatter(y_train_pred,y_train_pred-y_train,c=&apos;blue&apos;)</div><div class="line">plt.scatter(y_test_pred,y_test_pred-y_test,c=&apos;red&apos;)</div><div class="line"></div><div class="line"># 通过模型得分看模型质量</div><div class="line">print(&apos;训练数据得分：&#123;:.3f&#125;&apos;.format(lr.score(X_train,y_train)))</div><div class="line">print(&apos;测试数据得分：&#123;:.3f&#125;&apos;.format(lr.score(X_test,y_test)))</div></pre></td></tr></table></figure>
<h3 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 1.1 引入数据</div><div class="line">cancer = load_breast_cancer()</div><div class="line"># 1.2 拆分测试集、训练集</div><div class="line">X_train,X_test,y_train,y_test=train_test_split(cancer.data,cancer.target,stratify=cancer.target,random_state=0)</div><div class="line"></div><div class="line"># — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — — —</div><div class="line"></div><div class="line"># 线性支持向量机</div><div class="line">svc = LinearSVC(C=0.1,random_state=0).fit(X_train,y_train) # 默认C=1,越大模型越灵活</div><div class="line">print(&apos;线性训练数据得分：&#123;:.3f&#125;&apos;.format(svc.score(X_train,y_train)))</div><div class="line">print(&apos;线性测试数据得分：&#123;:.3f&#125;&apos;.format(svc.score(X_test,y_test)))</div><div class="line"></div><div class="line"># 引入核函数的支持向量机</div><div class="line">svm = SVC(kernel=&apos;rbf&apos;, random_state=0, gamma=2, C=10) #gamma越大越容易导致过拟合</div><div class="line">svm.fit(X_train,y_train)</div><div class="line">print(&apos;引入核函数训练数据得分：&#123;:.3f&#125;&apos;.format(svm.score(X_train,y_train)))</div><div class="line">print(&apos;引入核函数测试数据得分：&#123;:.3f&#125;&apos;.format(svm.score(X_test,y_test)))</div></pre></td></tr></table></figure>
<h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><h4 id="ID3（不能处理连续分布的数据特征）、C4-5（支持连续分布的数据特征）、CART（分类回归树）"><a href="#ID3（不能处理连续分布的数据特征）、C4-5（支持连续分布的数据特征）、CART（分类回归树）" class="headerlink" title="ID3（不能处理连续分布的数据特征）、C4.5（支持连续分布的数据特征）、CART（分类回归树）"></a>ID3（不能处理连续分布的数据特征）、C4.5（支持连续分布的数据特征）、CART（分类回归树）</h4><p>1、特征选择：从训练数据中众多的特征中选择一个特征作为当前节点的分裂标准，如何选择特征有着不同量化评估标准，从而衍生出不同的决策树算法<br>2、决策树生成：根据选择的特征评估标准，从上至下递归地生成子节点，直到数据集不可分则停止决策树停止生长。树结构来说，递归结构是最容易理解的方式<br>3、剪枝：决策树容易过拟合，一般来需要剪枝，缩小树结构规模、缓解过拟合。剪枝技术有预剪枝和后剪枝两种</p>
<h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><h4 id="朴素贝叶斯算法做了一个假设“认为各个特征相互独立”"><a href="#朴素贝叶斯算法做了一个假设“认为各个特征相互独立”" class="headerlink" title="朴素贝叶斯算法做了一个假设“认为各个特征相互独立”"></a>朴素贝叶斯算法做了一个假设“认为各个特征相互独立”</h4><ul>
<li>多项式模型（用于文本分类，特征是单词，值是单词的出现次数）</li>
<li>高斯模型（将连续型变量转化成离散型变量，比如身高170-178转化为特征值是1）</li>
<li>伯努利模型（特征取值是布尔型，即True或False。文本分类中，就是一个特征有没有在一个文档中出现）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 导入康奈尔大学网站的2M影评数据集，tokens下的文件夹neg、pos被识别是target</div><div class="line">movie_reviews = load_files(&apos;./tokens&apos;)</div><div class="line">movie_data = movie_reviews.data</div><div class="line">movie_target = movie_reviews.target</div><div class="line"></div><div class="line"># 有多少条样本数据</div><div class="line">len(movie_data)</div><div class="line"></div><div class="line"># 将文本型的数据转化为TF-IDF矩阵</div><div class="line">count_vec = TfidfVectorizer(binary = False, decode_error=&apos;ignore&apos;, stop_words=&apos;english&apos;)</div><div class="line"># 分为训练集、测试集</div><div class="line">x_train,x_test,y_train,y_test = train_test_split(movie_data, movie_target, test_size=0.2)</div><div class="line"># 将训练数据转化为词频</div><div class="line">x_train = count_vec.fit_transform(x_train)</div><div class="line"># 利用上一步得到的count_vec，将测试数据也转化为词频</div><div class="line">x_test= count_vec.transform(x_test)</div><div class="line"></div><div class="line"># MultinomialNB，这个分类器以出现次数作为特征值，我们使用的TF-IDF也能符合这类分布。GaussianNB适用于高斯分布（正态分布）的特征，而BernoulliNB适用于伯努利分布（二值分布）的特征</div><div class="line">clf = MultinomialNB().fit(x_train,y_train)</div><div class="line">doc_class_predicted = clf.predict(x_test)</div><div class="line"></div><div class="line"># 查看有多少比率预测正确了</div><div class="line">print(np.mean(doc_class_predicted == y_test))</div></pre></td></tr></table></figure>
<h3 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 引入数据</div><div class="line">X,y = make_moons(n_samples=100, noise=0.25, random_state=3)</div><div class="line"># 分为训练集、测试集</div><div class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)</div><div class="line"># 训练得到模型，solver指定算法为lbfgs，hidden_layer_sizes指定2层，每层10个神经元。使用tanh激活函数</div><div class="line">mlp = MLPClassifier(solver=&apos;lbfgs&apos;, activation=&apos;tanh&apos;, random_state=0, hidden_layer_sizes=[10, 10]).fit(X_train, y_train)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;明确问题类别&quot;&gt;&lt;a href=&quot;#明确问题类别&quot; class=&quot;headerlink&quot; title=&quot;明确问题类别&quot;&gt;&lt;/a&gt;明确问题类别&lt;/h3&gt;&lt;h4 id=&quot;有监督还是无监督&quot;&gt;&lt;a href=&quot;#有监督还是无监督&quot; class=&quot;headerlink&quot; title=&quot;有监督还是无监督&quot;&gt;&lt;/a&gt;有监督还是无监督&lt;/h4&gt;&lt;p&gt;根据输入来选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有标记的数据就是监督学习问题&lt;/li&gt;
&lt;li&gt;无标记数据，找结构就是无监督学习问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;有监督学习：回归、分类&quot;&gt;&lt;a href=&quot;#有监督学习：回归、分类&quot; class=&quot;headerlink&quot; title=&quot;有监督学习：回归、分类&quot;&gt;&lt;/a&gt;有监督学习：回归、分类&lt;/h4&gt;&lt;p&gt;根据输出判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输出是数字，这是回归问题&lt;/li&gt;
&lt;li&gt;如果输出是类别，那么是分类问题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习入门基础</title>
    <link href="http://Mihawkmah.github.io/2018/04/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/"/>
    <id>http://Mihawkmah.github.io/2018/04/10/机器学习入门基础/</id>
    <published>2018-04-10T08:48:23.000Z</published>
    <updated>2018-04-12T08:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="机器学习3要素"><a href="#机器学习3要素" class="headerlink" title="机器学习3要素"></a>机器学习3要素</h4><ul>
<li>T：任务</li>
<li>P：模型、算法</li>
<li>E：特征、数据</li>
</ul>
<h4 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h4><ul>
<li>有监督学习：分类、回归。得出明确Label</li>
<li>无监督学习：聚类Clustering、降维、异常检测Anomaly Detection</li>
<li>半监督学习</li>
</ul>
<a id="more"></a>
<h4 id="学习模型"><a href="#学习模型" class="headerlink" title="学习模型"></a>学习模型</h4><p>通过数据D从假设H中挑选出最接近目标函数的g，用g来推测训练数据以外的其他数据对应结果</p>
<h4 id="机器学习流程"><a href="#机器学习流程" class="headerlink" title="机器学习流程"></a>机器学习流程</h4><p>数据收集、清洗、预处理、建模、模型调优、评估</p>
<h4 id="使用到的包"><a href="#使用到的包" class="headerlink" title="使用到的包"></a>使用到的包</h4><p>Numpy、Pandas、Scikit-learn、Matplotlib、Seaborn</p>
<h4 id="数据分类"><a href="#数据分类" class="headerlink" title="数据分类"></a>数据分类</h4><p>训练集：training set 所有数据的一个随机子集，用于训练模型</p>
<p>测试集：testing set 用来验证模型在未知数据上的表现</p>
<h3 id="机器学习算法"><a href="#机器学习算法" class="headerlink" title="机器学习算法"></a>机器学习算法</h3><h4 id="有监督学习算法：含有标签的数据的算法"><a href="#有监督学习算法：含有标签的数据的算法" class="headerlink" title="有监督学习算法：含有标签的数据的算法"></a>有监督学习算法：含有标签的数据的算法</h4><h5 id="回归算法"><a href="#回归算法" class="headerlink" title="回归算法"></a>回归算法</h5><p>线性回归：线性回归处理的是数值问题，也就是最后预测出的结果是数字，例如房价</p>
<p>逻辑回归：逻辑回归属于分类算法，也就是说，逻辑回归预测结果是离散的分类，例如判断这封邮件是否是垃圾邮件，以及用户是否会点击此广告等等</p>
<h5 id="人工神经网络ANN"><a href="#人工神经网络ANN" class="headerlink" title="人工神经网络ANN"></a>人工神经网络ANN</h5><p>在神经网络中，每个处理单元事实上就是一个逻辑回归模型，逻辑回归模型接收上层的输入，把模型的预测结果作为输出传输到下一个层次</p>
<h5 id="SVM支持向量机"><a href="#SVM支持向量机" class="headerlink" title="SVM支持向量机"></a>SVM支持向量机</h5><p>二维平面划分出的非线性分类界线可以等价于三维平面的线性分类界线</p>
<h4 id="无监督学习算法：不含标签的数据的算法"><a href="#无监督学习算法：不含标签的数据的算法" class="headerlink" title="无监督学习算法：不含标签的数据的算法"></a>无监督学习算法：不含标签的数据的算法</h4><h5 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h5><p>聚类算法就是计算种群中的距离，根据距离的远近将数据划分为多个族群。聚类算法中最典型的代表就是K-Means算法。</p>
<h5 id="降维算法"><a href="#降维算法" class="headerlink" title="降维算法"></a>降维算法</h5><p>主要特征是将数据从高维降低到低维层次。在这里，维度其实表示的是数据的特征量的大小。降维算法的主要作用是压缩数据与提升机器学习其他算法的效率。降维算法的主要代表是PCA算法(即主成分分析算法)。</p>
<h4 id="特殊算法"><a href="#特殊算法" class="headerlink" title="特殊算法"></a>特殊算法</h4><h5 id="推荐算法"><a href="#推荐算法" class="headerlink" title="推荐算法"></a>推荐算法</h5><p>一类是基于物品内容的推荐，是将与用户购买的内容近似的物品推荐给用户，这样的前提是每个物品都得有若干个标签，因此才可以找出与用户购买物品类似的物品，这样推荐的好处是关联程度较大，但是由于每个物品都需要贴标签，因此工作量较大。</p>
<p>另一类是基于用户相似度的推荐，则是将与目标用户兴趣相同的其他用户购买的东西推荐给目标用户，例如小A历史上买了物品B和C，经过算法分析，发现另一个与小A近似的用户小D购买了物品E，于是将物品E推荐给小A。</p>
<p>推荐算法中最有名的算法就是协同过滤算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;h4 id=&quot;机器学习3要素&quot;&gt;&lt;a href=&quot;#机器学习3要素&quot; class=&quot;headerlink&quot; title=&quot;机器学习3要素&quot;&gt;&lt;/a&gt;机器学习3要素&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;T：任务&lt;/li&gt;
&lt;li&gt;P：模型、算法&lt;/li&gt;
&lt;li&gt;E：特征、数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;机器学习分类&quot;&gt;&lt;a href=&quot;#机器学习分类&quot; class=&quot;headerlink&quot; title=&quot;机器学习分类&quot;&gt;&lt;/a&gt;机器学习分类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;有监督学习：分类、回归。得出明确Label&lt;/li&gt;
&lt;li&gt;无监督学习：聚类Clustering、降维、异常检测Anomaly Detection&lt;/li&gt;
&lt;li&gt;半监督学习&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>卷四 | 产品文档</title>
    <link href="http://Mihawkmah.github.io/2018/04/09/%E5%8D%B7%E5%9B%9B-%E4%BA%A7%E5%93%81%E6%96%87%E6%A1%A3/"/>
    <id>http://Mihawkmah.github.io/2018/04/09/卷四-产品文档/</id>
    <published>2018-04-09T07:24:32.000Z</published>
    <updated>2018-04-10T07:16:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>原型+标注的形式可以很好的传达页面逻辑及功能需求，在此基础上，需要使用文档的形式将APP全局功能及异常情况处理落地下来提交给研发，将产品原型中无法顾及到的内容表述清楚。</p>
<blockquote>
<ol>
<li>明确所有场景和使用人群</li>
<li>交互逻辑无缺失</li>
<li>异常场景不遗漏</li>
<li>异常状态有说明</li>
<li>手势操作不遗漏</li>
<li>关键字段有规则定义</li>
<li>极限情况有定义</li>
<li>是否涉及到多种角色和权限</li>
<li>刷新、加载、转场说明</li>
</ol>
</blockquote>
<a id="more"></a>
<p><img src="/2018/04/09/卷四-产品文档/产品文档.jpg" alt="通用文档框架"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原型+标注的形式可以很好的传达页面逻辑及功能需求，在此基础上，需要使用文档的形式将APP全局功能及异常情况处理落地下来提交给研发，将产品原型中无法顾及到的内容表述清楚。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;明确所有场景和使用人群&lt;/li&gt;
&lt;li&gt;交互逻辑无缺失&lt;/li&gt;
&lt;li&gt;异常场景不遗漏&lt;/li&gt;
&lt;li&gt;异常状态有说明&lt;/li&gt;
&lt;li&gt;手势操作不遗漏&lt;/li&gt;
&lt;li&gt;关键字段有规则定义&lt;/li&gt;
&lt;li&gt;极限情况有定义&lt;/li&gt;
&lt;li&gt;是否涉及到多种角色和权限&lt;/li&gt;
&lt;li&gt;刷新、加载、转场说明&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>卷三 | 产品原型</title>
    <link href="http://Mihawkmah.github.io/2018/04/08/%E5%8D%B7%E4%B8%89-%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B/"/>
    <id>http://Mihawkmah.github.io/2018/04/08/卷三-产品原型/</id>
    <published>2018-04-08T07:23:32.000Z</published>
    <updated>2018-04-10T07:14:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>当产品的需求落地后，需要将所需的功能高效的传达给UI、前端、研发，这个时候原型设计的好坏就起到了至关重要的作用，需求传达不明确会导致产品反复修改，浪费大量的设计开发资源，下面是我最近总结的原型交互框架，我的习惯是交互直接在原型中标注。</p>
<blockquote>
<p>在允许的范围内（不同的输入输出限制下），努力寻找、选择、创造一些套路，影响用户行为，让用户以更好的体验完成自身目标以及产品目标。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2018/04/08/卷三-产品原型/产品原型.jpg" alt="原型框架"></p>
<blockquote>
<p>测试文档模板：编号、功能元素、前置条件、操作步骤、预期结果、是否通过、实际结果、反馈建议</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当产品的需求落地后，需要将所需的功能高效的传达给UI、前端、研发，这个时候原型设计的好坏就起到了至关重要的作用，需求传达不明确会导致产品反复修改，浪费大量的设计开发资源，下面是我最近总结的原型交互框架，我的习惯是交互直接在原型中标注。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在允许的范围内（不同的输入输出限制下），努力寻找、选择、创造一些套路，影响用户行为，让用户以更好的体验完成自身目标以及产品目标。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>卷二 | 概念设计</title>
    <link href="http://Mihawkmah.github.io/2018/04/07/%E5%8D%B7%E4%BA%8C-%E6%A6%82%E5%BF%B5%E8%AE%BE%E8%AE%A1/"/>
    <id>http://Mihawkmah.github.io/2018/04/07/卷二-概念设计/</id>
    <published>2018-04-07T03:29:31.000Z</published>
    <updated>2018-04-10T07:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>产品在工作过程中往往面对来自各方的需求，工作一多便容易失去头绪，在这个过程中不断踩坑不断总结，得出一套属于自己的产品方法论，才能更好的落地一款产品。</p>
<a id="more"></a>
<p><img src="/2018/04/07/卷二-概念设计/概念设计.jpg" alt="产品洞察框架"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;产品在工作过程中往往面对来自各方的需求，工作一多便容易失去头绪，在这个过程中不断踩坑不断总结，得出一套属于自己的产品方法论，才能更好的落地一款产品。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>卷一 | 需求分析</title>
    <link href="http://Mihawkmah.github.io/2018/04/06/%E5%8D%B7%E4%B8%80-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <id>http://Mihawkmah.github.io/2018/04/06/卷一-需求分析/</id>
    <published>2018-04-06T05:30:38.000Z</published>
    <updated>2018-04-10T07:11:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>功能是做需求，产品定位是做一种心理诉求，也就是说定位是更底层的一些心理供给。</p>
<p>产品只能有一个主线功能。</p>
<p>边界的意思是，它的定位、架构和用户基础大概能拓展出怎样的场景，进而实现怎样规模的激活数与日活数（创造独特价值、有稳定激活场景、有价值的数据沉淀）。同时产品的边界即用户（大明、笨笨、小闲）、场景（时间地点情境互动，用户进入的心理建设）的边界。</p>
<p>相同需求，相同资源的情况下，不同的产品设计决定产品成败。产品设计要充分驾驭需求，用户的动机会被很当时环境下的复杂因素所影响，这是非常考验用户研究和产品经理的硬本事。</p>
</blockquote>
<a id="more"></a>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p><strong>需求调研：</strong>立足于用户的环境、背景，去揣测用户行为背后思考的逻辑，结合场景寻找用户的痛点，并且对痛点的紧迫性和严重性有很强的判断力；</p>
<p><strong>市场分析：</strong>市场宏观上是由经济、文化、科技、政策等一系列的底层逻辑影响下决定的，多年积淀的经验和广泛的涉猎，可以在这个层面上起到作用；市场概况、融资情况、用户规模、市场发展趋势。</p>
<p><strong>产品定位：</strong>在窄域市场的容量、对手、竞争程度、市场机会等，这些决定了产品的天花板和产品成功的难度，这就需要很强的信息收集能力；每一个版本要有一个根据定位必须实现的功能。</p>
<h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p><strong>功能范围：</strong>与用户的需求是密切相关的，但是满足方式可能是不同的，福特创始人说过的那个“汽车与马”的故事永远是产品功能方面的经典案例；使用SWOT和KANO模型；判断能否给用户提供足够的价值：</p>
<blockquote>
<p>产品价值 = （ 新体验 – 旧体验）-  换用成本</p>
</blockquote>
<p><strong>人机交互：</strong>操作上明确，逻辑上完备，其次要有适合功能范围的层次结构，当然这也是一个动态调节的过程，细数互联网上的各款产品，都会随着产品服务范围的不断探索对产品结构起到大的调动，这需要很强的逻辑；</p>
<p><strong>展现体验：</strong>是一个产品给用户的第一印象，在激烈的市场竞争中，第一印象很重要！这需要对目标用户的理解和一定的审美；用户体验5要素：表现层、框架层、结构层、范围层、战略层。</p>
<p><strong>信息展示：</strong>如果是从0到1地打造一款产品，或者说产品设计是先于运营的，而且结合了市场、用户、功能、表现等等全方位的考量，所以至于展示什么样的信息，也是非常考验产品洞察力的。</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><strong>商业模式：</strong>商业化变现方式</p>
<p><strong>运营模式：</strong>冷启动、成长期（获取用户、积攒口碑、建设品牌、快速抢占市场）、成熟期（保持住用户的活跃、粘性，同时要保持危机感盯紧竞争对手的动作必要时予以打击）</p>
<p><img src="/2018/04/06/卷一-需求分析/需求分析.jpg" alt="产品定位框架"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;功能是做需求，产品定位是做一种心理诉求，也就是说定位是更底层的一些心理供给。&lt;/p&gt;
&lt;p&gt;产品只能有一个主线功能。&lt;/p&gt;
&lt;p&gt;边界的意思是，它的定位、架构和用户基础大概能拓展出怎样的场景，进而实现怎样规模的激活数与日活数（创造独特价值、有稳定激活场景、有价值的数据沉淀）。同时产品的边界即用户（大明、笨笨、小闲）、场景（时间地点情境互动，用户进入的心理建设）的边界。&lt;/p&gt;
&lt;p&gt;相同需求，相同资源的情况下，不同的产品设计决定产品成败。产品设计要充分驾驭需求，用户的动机会被很当时环境下的复杂因素所影响，这是非常考验用户研究和产品经理的硬本事。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>大型网站技术架构解决方案</title>
    <link href="http://Mihawkmah.github.io/2018/01/16/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://Mihawkmah.github.io/2018/01/16/大型网站技术架构解决方案/</id>
    <published>2018-01-16T03:36:58.000Z</published>
    <updated>2018-01-16T03:37:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>每一个模式描述了一个在我们周围不断重复发生的问题及该问题解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复工作。</p>
<p>所谓网站架构模式即为了解决大型网站面临的高并发访问、海量数据、高可靠运行等一系列问题与挑战。为此，在实践中提出了许多解决方案，以实现网站<strong>高性能、高可靠性、易伸缩、可扩展、安全</strong>等各种技术架构目标。 </p>
<a id="more"></a>
<h4 id="1、分层"><a href="#1、分层" class="headerlink" title="1、分层"></a>1、分层</h4><p>分层是企业应用系统中最常见的一种架构牧师，将系统在横向维度上切分成几个部分，每个部分负责一部分相对简单并比较单一的职责，然后通过上层对下层的依赖和调度组成一个完整的系统。 </p>
<p>在网站的分层架构中，常见的为3层，即应用层、服务层、数据层。应用层具体负责业务和视图的展示；服务层为应用层提供服务支持；数据库提供数据存储访问服务，如数据库、缓存、文件、搜索引擎等。 </p>
<p>分层架构是逻辑上的，在物理部署上，三层架构可以部署在同一个物理机器上，但是随着网站业务的发展，必然需要对已经分层的模块分离部署，即三层结构分别部署在不同的服务器上，是网站拥有更多的计算资源以应对越来越多的用户访问。</p>
<p>所以虽然分层架构模式最初的目的是规划软件清晰的逻辑结构以便于开发维护，但在网站的发展过程中，分层结构对网站支持高并发向分布式方向的发展至关重要。 </p>
<h4 id="2、分隔"><a href="#2、分隔" class="headerlink" title="2、分隔"></a>2、分隔</h4><p>如果说分层是将软件在横向方面进行切分，那么分隔就是在纵向方面对软件进行切分。 </p>
<p>网站越大，功能越复杂，服务和数据处理的种类也越多，将这些不同的功能和服务分隔开来，包装成高内聚低耦合的模块单元，不仅有助于软件的开发维护也便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力。 </p>
<p>大型网站分隔的粒度可能会很小。比如在应用层，将不同业务进行分隔，例如将购物、论坛、搜索、广告分隔成不同的应用，有对立的团队负责，部署在不同的服务器上。 </p>
<h4 id="3、分布式"><a href="#3、分布式" class="headerlink" title="3、分布式"></a>3、分布式</h4><p>对于大型网站，分层和分隔的一个主要目的是为了切分后的模块便于分布式部署，即将不同模块部署在不同的服务器上，通过远程调用协同工作。分布式意味着可以使用更多的计算机完同样的工作，计算机越多，CPU、内存、存储资源就越多，能过处理的并发访问和数据量就越大，进而能够为更多的用户提供服务。 </p>
<p>在网站应用中，常用的分布式方案有一下几种</p>
<p>分布式应用和服务：将分层和分隔后的应用和服务模块分布式部署，可以改善网站性能和并发性、加快开发和发布速度、减少数据库连接资源消耗。 </p>
<p>分布式静态资源：网站的静态资源如JS、CSS、Logo图片等资源对立分布式部署，并采用独立的域名，即人们常说的动静分离。静态资源分布式部署可以减轻应用服务器的负载压力；通过使用独立域名加快浏览器并发加载的速度。 </p>
<p>分布式数据和存储：大型网站需要处理以P为单位的海量数据，单台计算机无法提供如此大的存储空间，这些数据库需要分布式存储。 </p>
<p>分布式计算：目前网站普遍使用Hadoop和MapReduce分布式计算框架进行此类批处理计算，其特点是移动计算而不是移动数据，将计算程序分发到数据所在的位置以加速计算和分布式计算。 </p>
<h4 id="4、集群"><a href="#4、集群" class="headerlink" title="4、集群"></a>4、集群</h4><p>对于用户访问集中的模块需要将独立部署的服务器集群化，即多台服务器部署相同的应用构成一个集群，通过负载均衡设备共同对外提供服务。 服务器集群能够为相同的服务提供更多的并发支持，因此当有更多的用户访问时，只需要向集群中加入新的机器即可；另外可以实现当其中的某台服务器发生故障时，可以通过负载均衡的失效转移机制将请求转移至集群中其他的服务器上，因此可以提高系统的可用性。 </p>
<h4 id="5、缓存"><a href="#5、缓存" class="headerlink" title="5、缓存"></a>5、缓存</h4><p>缓存目的就是减轻服务器的计算，使数据直接返回给用户。在现在的软件设计中，缓存已经无处不在。具体实现有CDN、反向代理、本地缓存、分布式缓存等。 </p>
<p>使用缓存有两个条件：访问数据热点不均衡，即某些频繁访问的数据需要放在缓存中；数据在某个时间段内有效，不过很快过期，否在会因为数据过期而脏读，影响数据的正确性。 </p>
<h4 id="6、异步"><a href="#6、异步" class="headerlink" title="6、异步"></a>6、异步</h4><p>使用异步，业务之间的消息传递不是同步调用，而是将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方法异步执行进行协作。 </p>
<p>具体实现则在单一服务器内部可用通过多线程共享内存对了的方式处理；在分布式系统中可用通过分布式消息队列来实现异步。 </p>
<p>异步架构的典型就是生产者消费者方式，两者不存在直接调用。 </p>
<h4 id="7、冗余"><a href="#7、冗余" class="headerlink" title="7、冗余"></a>7、冗余</h4><p>网站需要7×24小时连续运行，那么就得有相应的冗余机制，以防某台机器宕掉时无法访问，而冗余则可以通过部署至少两台服务器构成一个集群实现服务高可用。数据库除了定期备份还需要实现冷热备份。甚至可以在全球范围内部署灾备数据中心。 </p>
<h4 id="8、自动化"><a href="#8、自动化" class="headerlink" title="8、自动化"></a>8、自动化</h4><p>具体有自动化发布过程，自动化代码管理、自动化测试、自动化安全检测、自动化部署、自动化监控、自动化报警、自动化失效转移、自动化失效恢复等。 </p>
<h4 id="9、安全"><a href="#9、安全" class="headerlink" title="9、安全"></a>9、安全</h4><p>网站在安全架构方面有许多模式：通过密码和手机校验码进行身份认证；登录、交易需要对网络通信进行加密；为了防止机器人程序滥用资源，需要使用验证码进行识别；对常见的XSS攻击、SQL注入需要编码转换；垃圾信息需要过滤等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一个模式描述了一个在我们周围不断重复发生的问题及该问题解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复工作。&lt;/p&gt;
&lt;p&gt;所谓网站架构模式即为了解决大型网站面临的高并发访问、海量数据、高可靠运行等一系列问题与挑战。为此，在实践中提出了许多解决方案，以实现网站&lt;strong&gt;高性能、高可靠性、易伸缩、可扩展、安全&lt;/strong&gt;等各种技术架构目标。 &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>6步骤利用模型工具分析商业机会</title>
    <link href="http://Mihawkmah.github.io/2018/01/15/6%E6%AD%A5%E9%AA%A4%E5%88%A9%E7%94%A8%E6%A8%A1%E5%9E%8B%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90%E5%95%86%E4%B8%9A%E6%9C%BA%E4%BC%9A/"/>
    <id>http://Mihawkmah.github.io/2018/01/15/6步骤利用模型工具分析商业机会/</id>
    <published>2018-01-15T08:56:45.000Z</published>
    <updated>2018-01-15T08:57:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="市场在哪里"><a href="#市场在哪里" class="headerlink" title="市场在哪里"></a>市场在哪里</h3><h4 id="STP理论"><a href="#STP理论" class="headerlink" title="STP理论"></a>STP理论</h4><p>细分市场：地理位置、人口特征、使用行为、利润潜力、价值观/生活方式、需求/动机/购买因素、态度、产品/服务使用场合</p>
<p>选择目标市场：产品-市场集中化、产品专业化、市场专业化、选择性专业化、全面覆盖</p>
<p>确定市场定位：企业整体形象定位&amp;产品定位</p>
<a id="more"></a>
<h3 id="市场的影响因素"><a href="#市场的影响因素" class="headerlink" title="市场的影响因素"></a>市场的影响因素</h3><h4 id="PEST"><a href="#PEST" class="headerlink" title="PEST"></a>PEST</h4><p>Political（政治）、Economical（经济）、Social（社会）、Technological（技术）</p>
<h3 id="市场的需求点"><a href="#市场的需求点" class="headerlink" title="市场的需求点"></a>市场的需求点</h3><h4 id="KANO分析"><a href="#KANO分析" class="headerlink" title="KANO分析"></a>KANO分析</h4><p>KANO模型定义了三个层次的顾客需求:基本型需求、期望型需求和兴奋型需求。这三种需求根据绩效指标分类就是基本因素、绩效因素和激励因素。</p>
<h3 id="市场竞争分析"><a href="#市场竞争分析" class="headerlink" title="市场竞争分析"></a>市场竞争分析</h3><h4 id="波特五力分析模型"><a href="#波特五力分析模型" class="headerlink" title="波特五力分析模型"></a>波特五力分析模型</h4><p>供应商的议价能力、购买者的议价能力、潜在竞争者进入的能力、替代品的替代能力、行业内竞争者现在的竞争能力。</p>
<h4 id="BCG矩阵"><a href="#BCG矩阵" class="headerlink" title="BCG矩阵"></a>BCG矩阵</h4><p>明星型业务、问题型业务、现金牛业务、瘦狗型业务</p>
<h3 id="找出新创空间机遇"><a href="#找出新创空间机遇" class="headerlink" title="找出新创空间机遇"></a>找出新创空间机遇</h3><h4 id="产品生命周期理论"><a href="#产品生命周期理论" class="headerlink" title="产品生命周期理论"></a>产品生命周期理论</h4><table>
<thead>
<tr>
<th>分类</th>
<th>维度</th>
<th>导入期</th>
<th>成长期</th>
<th>成熟期</th>
<th>衰退期</th>
</tr>
</thead>
<tbody>
<tr>
<td>特征</td>
<td>销售额</td>
<td>低</td>
<td>快速增长</td>
<td>缓慢增长</td>
<td>下降</td>
</tr>
<tr>
<td></td>
<td>利润</td>
<td>易变动</td>
<td>顶峰</td>
<td>下降</td>
<td>低或无</td>
</tr>
<tr>
<td></td>
<td>现金流量</td>
<td>负数</td>
<td>适度</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td></td>
<td>顾客</td>
<td>创新使用者</td>
<td>大多数人</td>
<td>大多数人</td>
<td>落后者</td>
</tr>
<tr>
<td></td>
<td>竞争者</td>
<td>稀少</td>
<td>渐多</td>
<td>最多</td>
<td>渐少</td>
</tr>
<tr>
<td>策略</td>
<td>产品</td>
<td>基本型为主</td>
<td>改进品，增加产品种类及服务保证</td>
<td>差异化，多样化的产品及品牌</td>
<td>剔除弱势产品项目</td>
</tr>
<tr>
<td></td>
<td>营销</td>
<td>扩张市场，提高产品知名度</td>
<td>渗透市场，大量营销建立品牌偏好</td>
<td>保持市场占有率，建立品牌差异及利益</td>
<td>提高生产率，塑造品牌忠诚度</td>
</tr>
</tbody>
</table>
<h4 id="GE矩阵"><a href="#GE矩阵" class="headerlink" title="GE矩阵"></a>GE矩阵</h4><p>产业吸引力：市场增长率、市场规模、盈利性、竞争对手、进入壁垒、市场容量、政治经济法律技术环境、通货膨胀、人才的可获得性、行业的获利能力</p>
<p>企业竞争地位：营销能力、知名度、技术开发能力、产品质量、行业经验、融资能力、管理水平、产品系列宽度、生产销售能力和人员水平</p>
<h3 id="创业模式细分"><a href="#创业模式细分" class="headerlink" title="创业模式细分"></a>创业模式细分</h3><h4 id="SWOT分析"><a href="#SWOT分析" class="headerlink" title="SWOT分析"></a>SWOT分析</h4><p>优势、劣势、机会、威胁</p>
<h4 id="差距分析"><a href="#差距分析" class="headerlink" title="差距分析"></a>差距分析</h4><p>制订战略目标—描述目前状态—找出差距—确定关键因素和方案</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;市场在哪里&quot;&gt;&lt;a href=&quot;#市场在哪里&quot; class=&quot;headerlink&quot; title=&quot;市场在哪里&quot;&gt;&lt;/a&gt;市场在哪里&lt;/h3&gt;&lt;h4 id=&quot;STP理论&quot;&gt;&lt;a href=&quot;#STP理论&quot; class=&quot;headerlink&quot; title=&quot;STP理论&quot;&gt;&lt;/a&gt;STP理论&lt;/h4&gt;&lt;p&gt;细分市场：地理位置、人口特征、使用行为、利润潜力、价值观/生活方式、需求/动机/购买因素、态度、产品/服务使用场合&lt;/p&gt;
&lt;p&gt;选择目标市场：产品-市场集中化、产品专业化、市场专业化、选择性专业化、全面覆盖&lt;/p&gt;
&lt;p&gt;确定市场定位：企业整体形象定位&amp;amp;产品定位&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用VUE和Flask前后端分离开发Todo单页应用</title>
    <link href="http://Mihawkmah.github.io/2018/01/05/%E4%BD%BF%E7%94%A8VUE%E5%92%8CFlask%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91Todo%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8/"/>
    <id>http://Mihawkmah.github.io/2018/01/05/使用VUE和Flask前后端分离开发Todo单页应用/</id>
    <published>2018-01-05T05:01:08.000Z</published>
    <updated>2018-01-05T05:04:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue环境配置"><a href="#Vue环境配置" class="headerlink" title="Vue环境配置"></a>Vue环境配置</h3><p>1、安装NodeJs的同时安装了npm包管理工具。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查看版本</div><div class="line">$ npm -v</div><div class="line">#升级 npm</div><div class="line">$ sudo npm install npm -g</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>2、命令行工具（CLI）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 全局安装 webpack</div><div class="line">$ npm install webpack -g</div><div class="line"># 全局安装 vue-cli</div><div class="line">$ npm install --global vue-cli</div><div class="line"># 创建一个基于 webpack 模板的新项目</div><div class="line">$ vue init webpack my-project</div><div class="line"># 安装项目依赖</div><div class="line">$ cd my-project</div><div class="line">$ npm install</div><div class="line"># 运行项目，运行后就可以在浏览器打开链接http://localhost:8080/</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<p>3、查看版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查看webpack版本</div><div class="line">webpack -v</div><div class="line"># 查看vue版本</div><div class="line">vue -V</div></pre></td></tr></table></figure>
<h3 id="使用elementUi"><a href="#使用elementUi" class="headerlink" title="使用elementUi"></a>使用elementUi</h3><p>1、安装依赖，让webpack可以解析css文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev style-loader css-loader file-loader</div></pre></td></tr></table></figure>
<p>2、npm安装elementUi模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i element-ui -S</div></pre></td></tr></table></figure>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/2018/01/05/使用VUE和Flask前后端分离开发Todo单页应用/todo.png" alt="todo"></p>
<h4 id="1、接口分析"><a href="#1、接口分析" class="headerlink" title="1、接口分析"></a>1、接口分析</h4><ul>
<li>获取清单列表</li>
<li>新建清单</li>
<li>删除清单</li>
<li>修改清单名称</li>
<li>获取任务列表</li>
<li>新建任务</li>
<li>删除任务</li>
<li>修改任务完成状态</li>
<li>修改任务名称</li>
</ul>
<h4 id="2、组件分析"><a href="#2、组件分析" class="headerlink" title="2、组件分析"></a>2、组件分析</h4><ul>
<li>app.vue  //最外层根组件</li>
<li>layouts.vue  //布局组件</li>
<li>list.vue  //清单列表</li>
<li>todo.vue  //任务列表</li>
<li>item.vue  //单项任务</li>
</ul>
<h4 id="3、项目结构（-为新建文件夹）"><a href="#3、项目结构（-为新建文件夹）" class="headerlink" title="3、项目结构（*为新建文件夹）"></a>3、项目结构（*为新建文件夹）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">├── build              // 构建服务和webpack配置</div><div class="line">├── config             // 项目不同环境的配置</div><div class="line">├── dist               // 项目build目录</div><div class="line">├── index.html         // 项目入口文件</div><div class="line">├── package.json       // 项目配置文件</div><div class="line">├── src                // 生产目录</div><div class="line">│   ├── assets         // 图片资源</div><div class="line">│   ├── common *       // 公共的css js 资源</div><div class="line">│   ├── components     // 各种组件 </div><div class="line">│   ├── moke *         // 本地静态数据管理文件</div><div class="line">│   ├── App.vue        // 主页面</div><div class="line">│   ├── vuex *         // vuex状态管理器</div><div class="line">│   ├── router         // 路由配置器</div><div class="line">│   └── main.js        // Webpack 预编译入口</div></pre></td></tr></table></figure>
<h3 id="后端使用Flask构建web-service"><a href="#后端使用Flask构建web-service" class="headerlink" title="后端使用Flask构建web service"></a>后端使用Flask构建web service</h3><h4 id="接口-amp-数据库规划"><a href="#接口-amp-数据库规划" class="headerlink" title="接口&amp;数据库规划"></a>接口&amp;数据库规划</h4><table>
<thead>
<tr>
<th>HTTP 方法</th>
<th>行为</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>获取资源的信息</td>
<td><a href="http://example.com/api/orders" target="_blank" rel="external">http://example.com/api/orders</a></td>
</tr>
<tr>
<td>GET</td>
<td>获取某个特定资源的信息</td>
<td><a href="http://example.com/api/orders/123" target="_blank" rel="external">http://example.com/api/orders/123</a></td>
</tr>
<tr>
<td>POST</td>
<td>创建新资源</td>
<td><a href="http://example.com/api/orders" target="_blank" rel="external">http://example.com/api/orders</a></td>
</tr>
<tr>
<td>PUT</td>
<td>更新资源</td>
<td><a href="http://example.com/api/orders/123" target="_blank" rel="external">http://example.com/api/orders/123</a></td>
</tr>
<tr>
<td>DELETE</td>
<td>删除资源</td>
<td><a href="http://example.com/api/orders/123" target="_blank" rel="external">http://example.com/api/orders/123</a></td>
</tr>
</tbody>
</table>
<p>1、确定baseURL ：<code>http://[hostname]/todo/api/v1.0/</code></p>
<table>
<thead>
<tr>
<th>HTTP方法</th>
<th>URL</th>
<th>动作</th>
<th>输入</th>
<th>输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td><a href="http://[baseURL]/" target="_blank" rel="external">http://[baseURL]/</a></td>
<td>检索清单列表</td>
<td>/</td>
<td>_id；title</td>
</tr>
<tr>
<td>GET</td>
<td><a href="http://[baseURL]/todos/[_id" target="_blank" rel="external">http://[baseURL]/todos/[_id</a>]</td>
<td>检索任务列表</td>
<td>/_id</td>
<td>title；completed；isdelete；</td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://[baseURL]/add" target="_blank" rel="external">http://[baseURL]/add</a></td>
<td>新增清单</td>
<td>title;</td>
<td></td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://[baseURL]/todos/add" target="_blank" rel="external">http://[baseURL]/todos/add</a></td>
<td>新增任务</td>
<td>title;</td>
<td></td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://[baseURL]/update/[_id" target="_blank" rel="external">http://[baseURL]/update/[_id</a>]</td>
<td>更新清单</td>
<td>_id；title；</td>
<td></td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://[baseURL]/todos/update/[index" target="_blank" rel="external">http://[baseURL]/todos/update/[index</a>]</td>
<td>更新任务</td>
<td>id；item；index；completed；isdelete；</td>
<td></td>
</tr>
<tr>
<td>POST</td>
<td><a href="http://[baseURL]/delete/[_id" target="_blank" rel="external">http://[baseURL]/delete/[_id</a>]</td>
<td>删除清单</td>
<td>_id;</td>
</tr>
</tbody>
</table>
<p>2、数据库规划</p>
<table>
<thead>
<tr>
<th>集合</th>
<th>字段</th>
</tr>
</thead>
<tbody>
<tr>
<td>todos</td>
<td>title；completed；created_time；isdelete；</td>
</tr>
<tr>
<td>lists</td>
<td>_id；title；created_time；</td>
</tr>
</tbody>
</table>
<h4 id="后端开发环境配置"><a href="#后端开发环境配置" class="headerlink" title="后端开发环境配置"></a>后端开发环境配置</h4><p>1、配置Flask</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 查看本机安装的版本</div><div class="line">pyenv versions</div><div class="line"># 设置环境为anaconda</div><div class="line">pyenv local anaconda3-4.4.0</div><div class="line"># 查看已经安装的包</div><div class="line">conda list</div><div class="line"># 安装flask</div><div class="line">conda install flask</div></pre></td></tr></table></figure>
<p>2、配置Pymongo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 安装PyMongo</div><div class="line">conda install pymongo</div><div class="line"># 建立连接</div><div class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;,port=27017)</div><div class="line"># 得到数据库</div><div class="line">db = client.mtodo</div><div class="line"># 得到数据集合</div><div class="line">lists = db.lists</div></pre></td></tr></table></figure>
<p>3、跨域访问装饰器在Flask中的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">from functools import wraps</div><div class="line">from flask import make_response</div><div class="line"></div><div class="line">def allow_cross_domain(fun):</div><div class="line">    @wraps(fun)</div><div class="line">    def wrapper_fun(*args, **kwargs):</div><div class="line">        rst = make_response(fun(*args, **kwargs))</div><div class="line">        rst.headers[&apos;Access-Control-Allow-Origin&apos;] = &apos;*&apos;</div><div class="line">        rst.headers[&apos;Access-Control-Allow-Methods&apos;] = &apos;PUT,GET,POST,DELETE&apos;</div><div class="line">        allow_headers = &quot;Referer,Accept,Origin,User-Agent&quot;</div><div class="line">        rst.headers[&apos;Access-Control-Allow-Headers&apos;] = allow_headers</div><div class="line">        return rst</div><div class="line">    return wrapper_fun</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">@allow_cross_domain</div><div class="line">def domains():</div><div class="line">    pass</div></pre></td></tr></table></figure>
<p>备注：接口返回的数据是这样的格式[{ title: ‘电影清单’ }, { title: ‘购物清单’ }, {title: ‘阅读清单’ }]</p>
<h4 id="Flak接收数据"><a href="#Flak接收数据" class="headerlink" title="Flak接收数据"></a>Flak接收数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 接收GET参数或POST数据，获得name字段的值</div><div class="line">request.values.get(&apos;name&apos;)</div></pre></td></tr></table></figure>
<h3 id="前端使用axios调用接口"><a href="#前端使用axios调用接口" class="headerlink" title="前端使用axios调用接口"></a>前端使用axios调用接口</h3><p>1、配置axios</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 安装axios</div><div class="line">npm install axios</div><div class="line"># 在vue的main.js文件中加入代码</div><div class="line">import axios from &apos;axios&apos;</div><div class="line">Vue.prototype.$ajax = axios</div></pre></td></tr></table></figure>
<p>2、在组件*.vue文件中使用vue(如果Console中有了请求的数据，则请求成功)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mounted() &#123;</div><div class="line">  this.$ajax(&#123;</div><div class="line">    method:&apos;GET&apos;,</div><div class="line">    url:&apos;http://127.0.0.1:5000/&apos;</div><div class="line">  &#125;).then(function(response)&#123;</div><div class="line">    console.log(response)</div><div class="line">  &#125;)</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>备注：Vue钩子函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># created</div><div class="line">实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</div><div class="line"># mounted</div><div class="line">el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。</div></pre></td></tr></table></figure>
<p>3、请求数据成功后，赋值给vue的data中的字段</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mounted() &#123;</div><div class="line">  this.$ajax.get(&apos;http://127.0.0.1:5000/&apos;).then(result =&gt; &#123;</div><div class="line">    this.lists = result.data</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<h4 id="应用截图"><a href="#应用截图" class="headerlink" title="应用截图"></a>应用截图</h4><p><img src="/2018/01/05/使用VUE和Flask前后端分离开发Todo单页应用/应用截图.png" alt="应用截图"></p>
<blockquote>
<p>源代码 <a href="https://github.com/Mihawkmah/VueTodo" target="_blank" rel="external">https://github.com/Mihawkmah/VueTodo</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vue环境配置&quot;&gt;&lt;a href=&quot;#Vue环境配置&quot; class=&quot;headerlink&quot; title=&quot;Vue环境配置&quot;&gt;&lt;/a&gt;Vue环境配置&lt;/h3&gt;&lt;p&gt;1、安装NodeJs的同时安装了npm包管理工具。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 查看版本&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#升级 npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo npm install npm -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>工具APP「 红包语音名片 」原型分享</title>
    <link href="http://Mihawkmah.github.io/2017/12/19/%E5%B7%A5%E5%85%B7APP%E7%BA%A2%E5%8C%85%E8%AF%AD%E9%9F%B3%E5%90%8D%E7%89%87%E5%8E%9F%E5%9E%8B%E5%88%86%E4%BA%AB/"/>
    <id>http://Mihawkmah.github.io/2017/12/19/工具APP红包语音名片原型分享/</id>
    <published>2017-12-19T09:52:25.000Z</published>
    <updated>2017-12-19T09:58:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/12/19/工具APP红包语音名片原型分享/1.jpg" alt="1"></p>
<a id="more"></a>
<p><img src="/2017/12/19/工具APP红包语音名片原型分享/2.jpg" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/12/19/工具APP红包语音名片原型分享/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>社会化聆听系统需求分析</title>
    <link href="http://Mihawkmah.github.io/2017/12/19/%E7%A4%BE%E4%BC%9A%E5%8C%96%E8%81%86%E5%90%AC%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/"/>
    <id>http://Mihawkmah.github.io/2017/12/19/社会化聆听系统需求分析/</id>
    <published>2017-12-19T09:24:16.000Z</published>
    <updated>2017-12-19T09:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-项目分析"><a href="#1-项目分析" class="headerlink" title="1 项目分析"></a>1 项目分析</h3><h4 id="1-1-需求调研"><a href="#1-1-需求调研" class="headerlink" title="1.1 需求调研"></a>1.1 需求调研</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/目标用户.png" alt="目标用户"></p>
<table>
<thead>
<tr>
<th>目标用户</th>
<th>需求场景梳理</th>
<th>遇到问题</th>
</tr>
</thead>
<tbody>
<tr>
<td>政府</td>
<td>对于重大政治活动、公共突发事件、热点问题进行舆情监测，实时掌握事件的进展，尽早主动准确动态发布官方消息即时应对。</td>
<td>人工无法实时全面监测，对于事件的公众舆论无法实时了解，同时对于事件的走向无法实时预估。部分突发事件损害政府公信力。</td>
</tr>
<tr>
<td>企业</td>
<td>对企业负面信息实时有效的监测，判断舆论趋势并谋划公关策略。分析行业、市场、产品、竞争对手、消费者，为企业优化产品和服务以及决策提供数据基础。</td>
<td>无法有效监控突发事件，进而无法实时应对，造成长期积累的企业形象受破坏，口碑受损，给企业发展带来极大的负面影响。在企业经营的各个过程中需要数据支撑决策。</td>
</tr>
<tr>
<td>个人</td>
<td>公司产品、运营等相关职位工作人员制作相关分析报告。高校师生进行相关研究。中小型企业调查行业市场环境、产品服务、竞争对手、消费者。</td>
<td>互联网资讯很多，无法一条条去看去过滤。需要宏观层面的数据，手动搜集处理工作量大。</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>通过采集范围和分析频次两个维度对现阶段市场的社会化聆听需求进行拆解，可以得出如下分布：</p>
<p><img src="/2017/12/19/社会化聆听系统需求分析/需求分布.png" alt="需求分布"></p>
<h4 id="1-2-头部竞品解决方案"><a href="#1-2-头部竞品解决方案" class="headerlink" title="1.2 头部竞品解决方案"></a>1.2 头部竞品解决方案</h4><table>
<thead>
<tr>
<th>舆情平台</th>
<th>现有解决方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>阿里公众趋势分析</td>
<td>关键词组合舆情监控、事件分析、微博传播路径分析、热词分析、舆情预警</td>
</tr>
<tr>
<td>百度舆情API</td>
<td>自定义任务舆情监控、舆情预警、舆情分析（趋势、搜索词、观点分析、媒体分布、传播分析、受众分析、事件分析）、舆情报告</td>
</tr>
<tr>
<td>清博大数据</td>
<td>设置方案舆情监控、方案对比（可用于竞品）、舆情大屏、舆情报告、传播路径</td>
</tr>
<tr>
<td>腾讯企鹅风讯</td>
<td>行业风讯（公司、游戏媒体的声量走势和口碑分布）、产品风讯（游戏产品的口碑和用户喜好）</td>
</tr>
<tr>
<td>新浪舆情通</td>
<td>设置方案舆情监控、热词分析、竞品分析（方案对比）、微博传播分析</td>
</tr>
<tr>
<td>新浪微舆情</td>
<td>热词指数分析、热词情感分析、舆情分行业监测、舆情图表分析、舆情信息源定向监测、舆情预警、全网事件分析、微博事件分析、微博传播效果分析、竞品分析、新闻正文页评论分析、报告制作、定制报告</td>
</tr>
</tbody>
</table>
<p>通过上述对解决方案的梳理，现阶段市场上除了微博传播路径分析外，仅有腾讯企鹅风讯和新浪微舆情（舆情定向监测（站源或地区）、新闻正文页评论分析）2家公司提供定向采集的社会化聆听服务。</p>
<h4 id="1-3-社会化聆听系统分析"><a href="#1-3-社会化聆听系统分析" class="headerlink" title="1.3 社会化聆听系统分析"></a>1.3 社会化聆听系统分析</h4><h5 id="1-3-1-系统底层逻辑"><a href="#1-3-1-系统底层逻辑" class="headerlink" title="1.3.1 系统底层逻辑"></a>1.3.1 系统底层逻辑</h5><p><img src="/2017/12/19/社会化聆听系统需求分析/5W1H.png" alt="5W1H"></p>
<p>一篇内容里面包含的要素，可以通过5W1H分析法进行概括，这6个要素被视为一篇新闻应该让读者知道的讯息，同时这6个要素也可以视为现实世界在语言文字中的映射。</p>
<p>结构化数据指的是能够通过二维结构存储在表格中的数据，非结构化数据即除结构化数据之外的数据，如在互联网中产生的文本、图片、音频、视频等数据。根据IDC在2011年的调查显示，非结构化数据将占所有互联网产生数据的90%。</p>
<p>结构化数据的分析往往解答的是定量的问题，例如对数据进行透视、聚类、相关性等处理，但是对于为什么（潜在动机/真实需求）这种定性的问题往往不能有效的解答，而在经营决策过程中，对于人群行为动机和真实需求的洞察是非常重要的参考依据。当我们对大量非结构化数据进行文本分析时，即可实现对这种定性问题的解答。这里将此需求统一称为社会化聆听需求。</p>
<h5 id="1-3-2-系统采集元素"><a href="#1-3-2-系统采集元素" class="headerlink" title="1.3.2 系统采集元素"></a>1.3.2 系统采集元素</h5><p>区别于传统的报纸、广播、电视等，这里将博客、论坛、社区、百科、问答、点评、视频、相册、音乐等各种互联网形态都广义的归类于社会化媒体。</p>
<p><img src="/2017/12/19/社会化聆听系统需求分析/社会化媒体元素.png" alt="社会化媒体元素"></p>
<p>在社会化媒体中，产生的主要元素有文本、时间地点人物、操作行为、关系，操作行为包含阅读、转发、评论、收藏、点赞/喜欢、打赏、签到。</p>
<p>社会化聆听即是对上述元素的分析挖掘，展现元素及元素间的比较、构成、分布、关联。</p>
<h5 id="1-3-3-系统实现框架"><a href="#1-3-3-系统实现框架" class="headerlink" title="1.3.3 系统实现框架"></a>1.3.3 系统实现框架</h5><p><img src="/2017/12/19/社会化聆听系统需求分析/社会化聆听系统.png" alt="社会化聆听系统"></p>
<p>通过上述分析，可以将社会化聆听系统定义为：通过采集社会化媒体中的大量非结构化数据，对其进行文本分析及统计后，根据业务需求得出定性和定量的分析结果并可视化呈现出来。</p>
<h5 id="1-3-4-系统分析结论"><a href="#1-3-4-系统分析结论" class="headerlink" title="1.3.4 系统分析结论"></a>1.3.4 系统分析结论</h5><p>现阶段舆情市场，主要的业务集中在大范围采集日常化监测，而对一些企业经营过程中的特定常用场景支撑不足。对于非结构数据的定向采集实时分析往往能够提供更好更准确的决策依据，当然这方面需求可以采用爬虫采集人工分析的方案来解决，但是有一定的技术门槛，如果将这一需求做成一套易用性良好的工具可以有一定的市场。</p>
<p>方案可以初步设定为：</p>
<p><img src="/2017/12/19/社会化聆听系统需求分析/大功能模块.png" alt="大功能模块"></p>
<h3 id="2-市场分析"><a href="#2-市场分析" class="headerlink" title="2 市场分析"></a>2 市场分析</h3><h4 id="2-1-市场及竞品分析"><a href="#2-1-市场及竞品分析" class="headerlink" title="2.1 市场及竞品分析"></a>2.1 市场及竞品分析</h4><table>
<thead>
<tr>
<th>产品</th>
<th>定位</th>
<th>目标用户</th>
<th>定价</th>
<th>使用门槛</th>
</tr>
</thead>
<tbody>
<tr>
<td>阿里公众趋势分析API</td>
<td>识别公众对品牌形象、热点事件和公共政策的认知趋势。</td>
<td>研发团队、政企行业</td>
<td>9800一个月：20关键词、15万舆情、30万微博转发、100事件</td>
<td>高</td>
</tr>
<tr>
<td>百度舆情API</td>
<td>专业、开放、易用的互联网舆论分析平台</td>
<td>个人、政企、研发团队</td>
<td>实时舆情 129元/次 观点分析 129元/次 传播分析399 /次 事件分析129/次</td>
<td>低</td>
</tr>
<tr>
<td>清博大数据API</td>
<td>清博舆情以大数据为核心技术支撑，实时监测采集全网舆情信息，通过数据挖掘、可视化分析技术，提供舆情监测、分析报告、危机预警等一站式服务</td>
<td>个人、大客户</td>
<td>个人免费额度5000条； 10元 / 1万条数据 / 1个月</td>
<td>低</td>
</tr>
<tr>
<td>腾讯风讯</td>
<td>1、产品风讯查看APP在应用商店及论坛的评论口碑 2、行业风讯上查看游戏及游戏公司的相关资讯动态，是个游戏资讯网站。</td>
<td>APP应用、游戏。游戏行业。</td>
<td>免费</td>
<td>低</td>
</tr>
<tr>
<td>新浪舆情通</td>
<td>微博政企舆情专家</td>
<td>政府企业</td>
<td>5万一年，500关键词、10事件、10微博、10竞品分析。</td>
<td>高</td>
</tr>
<tr>
<td>新浪微舆情</td>
<td>专注于互联网舆情、商情监测及社会化大数据场景化应用</td>
<td>政务领域、营销领域、生活领域</td>
<td>按照功能收费：1、监测：关键字总数不超过500个字，可进行50次修改。30元/月，299元/月。2、事件分析：1次99元。3、微博传播：累计1200条转发数 9.9元</td>
<td>低</td>
</tr>
</tbody>
</table>
<h4 id="2-2-市场定位"><a href="#2-2-市场定位" class="headerlink" title="2.2 市场定位"></a>2.2 市场定位</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/市场定位.png" alt="市场定位"></p>
<p>如采用阿里的API接口能力，根据市场竞品定价来看阿里的使用门槛较高，且由于阿里是根据关键词采集的数量来进行收费，一个大众化的关键词会有较高的成本，个人用户普遍无法承受这样的成本，所以结合资金实力和付费意愿来分析，大型企业、政府机构、中小型企业，以及服务于大型企业的咨询机构、公关传媒、广告营销会是潜在客户，重点做大客户，即销售线下签单维护客户流程为主。</p>
<h4 id="2-3-产品定位"><a href="#2-3-产品定位" class="headerlink" title="2.3 产品定位"></a>2.3 产品定位</h4><p>市场上最实时、最准确、最业务导向的全网+定向采集社会化聆听服务</p>
<h3 id="3-产品概念设计"><a href="#3-产品概念设计" class="headerlink" title="3 产品概念设计"></a>3 产品概念设计</h3><h4 id="3-1-概念设计"><a href="#3-1-概念设计" class="headerlink" title="3.1 概念设计"></a>3.1 概念设计</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/概念设计.png" alt="概念设计"></p>
<h4 id="3-2-功能框架"><a href="#3-2-功能框架" class="headerlink" title="3.2 功能框架"></a>3.2 功能框架</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/功能框架.png" alt="功能框架"></p>
<h4 id="3-3-主流程规划"><a href="#3-3-主流程规划" class="headerlink" title="3.3 主流程规划"></a>3.3 主流程规划</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/主流程规划.png" alt="主流程规划"></p>
<h3 id="4-需求分析"><a href="#4-需求分析" class="headerlink" title="4 需求分析"></a>4 需求分析</h3><h4 id="4-1-主要场景梳理"><a href="#4-1-主要场景梳理" class="headerlink" title="4.1 主要场景梳理"></a>4.1 主要场景梳理</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/应用业务场景.png" alt="应用业务场景"></p>
<h4 id="4-2-主要场景需求分析"><a href="#4-2-主要场景需求分析" class="headerlink" title="4.2 主要场景需求分析"></a>4.2 主要场景需求分析</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/主要场景需求分析.png" alt="主要场景需求分析"></p>
<p>从客户广泛程度和需求强弱的角度进行分析，舆情监测、竞品分析、用户画像、口碑分析、消费倾向具有更大的市场价值，将其命名为我们的重点功能。</p>
<h4 id="4-2-支撑能力分析"><a href="#4-2-支撑能力分析" class="headerlink" title="4.2 支撑能力分析"></a>4.2 支撑能力分析</h4><p><img src="/2017/12/19/社会化聆听系统需求分析/支撑分析能力.png" alt="支撑分析能力"></p>
<p>重点功能中的口碑分析和消费倾向，以及用户画像（只有地区，性别只有在微博传播中才有），目前阿里的接口不能很好的支撑。</p>
<h4 id="4-3-需求分析结论"><a href="#4-3-需求分析结论" class="headerlink" title="4.3 需求分析结论"></a>4.3 需求分析结论</h4><p>从客户广泛程度和需求强弱以及实现难度这几个方面来讲，舆情监测、竞品分析可以作为重点需求来进行开发，后期再分行业进行口碑和消费倾向的功能开发，再往后可以引入话题事件观点实时分析以及微博传播等功能。</p>
<p>同时结合业务及现有资源情况，可以以支持销售线下签单的流程为主，签单后运营使用平台来支持客户需求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-项目分析&quot;&gt;&lt;a href=&quot;#1-项目分析&quot; class=&quot;headerlink&quot; title=&quot;1 项目分析&quot;&gt;&lt;/a&gt;1 项目分析&lt;/h3&gt;&lt;h4 id=&quot;1-1-需求调研&quot;&gt;&lt;a href=&quot;#1-1-需求调研&quot; class=&quot;headerlink&quot; title=&quot;1.1 需求调研&quot;&gt;&lt;/a&gt;1.1 需求调研&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2017/12/19/社会化聆听系统需求分析/目标用户.png&quot; alt=&quot;目标用户&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目标用户&lt;/th&gt;
&lt;th&gt;需求场景梳理&lt;/th&gt;
&lt;th&gt;遇到问题&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;政府&lt;/td&gt;
&lt;td&gt;对于重大政治活动、公共突发事件、热点问题进行舆情监测，实时掌握事件的进展，尽早主动准确动态发布官方消息即时应对。&lt;/td&gt;
&lt;td&gt;人工无法实时全面监测，对于事件的公众舆论无法实时了解，同时对于事件的走向无法实时预估。部分突发事件损害政府公信力。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;企业&lt;/td&gt;
&lt;td&gt;对企业负面信息实时有效的监测，判断舆论趋势并谋划公关策略。分析行业、市场、产品、竞争对手、消费者，为企业优化产品和服务以及决策提供数据基础。&lt;/td&gt;
&lt;td&gt;无法有效监控突发事件，进而无法实时应对，造成长期积累的企业形象受破坏，口碑受损，给企业发展带来极大的负面影响。在企业经营的各个过程中需要数据支撑决策。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;个人&lt;/td&gt;
&lt;td&gt;公司产品、运营等相关职位工作人员制作相关分析报告。高校师生进行相关研究。中小型企业调查行业市场环境、产品服务、竞争对手、消费者。&lt;/td&gt;
&lt;td&gt;互联网资讯很多，无法一条条去看去过滤。需要宏观层面的数据，手动搜集处理工作量大。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>店铺选址系统背后的业务逻辑梳理</title>
    <link href="http://Mihawkmah.github.io/2017/10/11/%E5%BA%97%E9%93%BA%E9%80%89%E5%9D%80%E7%B3%BB%E7%BB%9F%E8%83%8C%E5%90%8E%E7%9A%84%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%A2%B3%E7%90%86/"/>
    <id>http://Mihawkmah.github.io/2017/10/11/店铺选址系统背后的业务逻辑梳理/</id>
    <published>2017-10-11T06:47:17.000Z</published>
    <updated>2017-10-11T06:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="城市人口及经济数据资料："><a href="#城市人口及经济数据资料：" class="headerlink" title="城市人口及经济数据资料："></a><strong>城市人口及经济数据资料：</strong></h3><p>市区人口总量、人口密度、人均收入、人均消费等经济指标、城市未来发展规划、公共交通情况</p>
<h3 id="划分商圈、评估选择商圈："><a href="#划分商圈、评估选择商圈：" class="headerlink" title="划分商圈、评估选择商圈："></a><strong>划分商圈、评估选择商圈：</strong></h3><p>划分一级二级三级商圈（记分法：步行车行距离近加分；营业额高加分；公交地铁线路加分；）；交通地理状况；</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>商圈等级</th>
<th>城市人口</th>
<th>收入水平</th>
<th>消费能力</th>
<th>商圈年营业额</th>
<th>步行车行距离</th>
<th>商圈交通</th>
<th>前景预测</th>
</tr>
</thead>
<tbody>
<tr>
<td>黄金商圈</td>
<td>&gt;30万</td>
<td>&gt;1.5万</td>
<td>&gt;5000</td>
<td>&gt;2亿</td>
<td>步行5分钟 车行5分钟</td>
<td>公路+1分 地铁+3分 长途汽车线路+6分 火车线路+8分 大型停车场宾馆+2分</td>
<td>政府牵头+5分；传统集市改造+5分；知名店铺30%以上+3分；有密集工业品或农产品生产基地+3分；</td>
</tr>
<tr>
<td>白银商圈</td>
<td>20-30万</td>
<td>1-1.5万</td>
<td>4000-5000</td>
<td>1-2亿</td>
<td>步行10分钟 车行10分钟</td>
<td></td>
<td></td>
</tr>
<tr>
<td>黄铜商圈</td>
<td>&lt;20万</td>
<td>&lt;1万</td>
<td>&lt;4000</td>
<td>&lt;1亿</td>
<td>步行15分钟 车行15分钟</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="调查分析商圈内人口总数及特征："><a href="#调查分析商圈内人口总数及特征：" class="headerlink" title="调查分析商圈内人口总数及特征："></a><strong>调查分析商圈内人口总数及特征：</strong></h3><p>目标商圈内常住人口、流动人口数量、平均收入、平均消费、目标顾客前往该商圈的交通方式（步行、轿车、公交车、地铁）；划分商圈类型；</p>
<table>
<thead>
<tr>
<th>商圈类型</th>
<th>商圈特性</th>
<th>调查重点</th>
</tr>
</thead>
<tbody>
<tr>
<td>住宅商圈</td>
<td>顾客的需求比较稳定，销售额不会骤起骤落，可以保证便利店的稳定收入。商品结构以住家生活需求为主，偏重生活用品、食用品，时间集中在早上及傍晚以后。住宅商圈一般平均捕获率为15%，平均客单价为11/9/7（高/中/低）元。住宅商圈的主要消费人群则是住宅周边居住的消费者；设店于固定居民或社区、大楼出入口；70%以上为固定顾客；平常日人流高峰为07:00-09:00，17:00-19:00时段。</td>
<td>人口住户条件，如：结构、所得、年龄、职业等因素，此为固定基本顾客；便利性，交通设施条件，人员来往交通是否方便；  接近性，街道的宽度、交通构造等状况；  机会性，离市中心的距离及交通设施情况；  繁荣性，是否有学校、公园、医院等有利的集客设施；  发展性，店址所在区域的未来发展如何。</td>
</tr>
<tr>
<td>商业商圈</td>
<td>如闹市区，商业活动极为频繁，把便利店设在这样的地区，营业额必然高。这样的店址就是所谓的“寸金之地”，当然这样的新址租金不便宜，虽然生意不错，但租金成本太高，最终盘算下来，可能只有微薄的赢利，甚至可能亏损。所以需要通过财务评测工具事先仔细的评估。一般来说，位于流动人口的商圈捕获率较低，商业商圈一般平均捕获率为10%，一般平均客单价为8元。商业商圈的主要消费人群则是流动的消费者；  以夜间活动人口及例假日人数居多；  大型百货、商业街、大卖场、饭店、KTV特种行业周遭地区；  还有固定市集，如夜市、车站、码头、港口，出入人口以消费、逛街为主；</td>
<td>销售力，评估腹地的大小与客户交易销售营收；  便利性，客户来店的交通方式与交通状况；  竞争性，竞争店的营业时间与竞争的现况。同一商圈内竞争店一般不要超过3家；  发展性，未来繁荣与兴衰的考察。</td>
</tr>
<tr>
<td>办公商圈</td>
<td>办公商圈一般平均捕获率为12%，平均客单价为10元。办公商圈的主要消费人群则是办公楼里的顾客，又以购买力较高的白领为主的消费者；  以日间活动人口居多；  办公大楼林立；  客层主要为上班族；  例假日人口明显稀少；  平常日人流高峰为08:00-09:00，12:00-13:00时段；</td>
</tr>
</tbody>
</table>
<h3 id="选择商圈内集客点："><a href="#选择商圈内集客点：" class="headerlink" title="选择商圈内集客点："></a><strong>选择商圈内集客点：</strong></h3><p>实地去勘察该场所或区域是否有大型百货商场、购物中心、商业步行街、政府机构、医院、学校及娱乐和休闲中心等，并就其规模作出规模估算和相关数据统计。</p>
<ul>
<li>吸引大量人/车流？店址接近或位于大型商业街中心区域、政府机关集中办公地区、休闲娱乐及商业活跃地区、车站医院学校旅游景点等，集客能力就强；</li>
<li>商圈外部人/车流能否便捷进入？以店址为中心的周边交通网络密集，道路通畅，且附近有大型停车场等，集客能力就较强；</li>
<li>商圈内部人/车流能否能方便到达店址？店址周边住宅或商务楼的人群，从任何角度都能轻松到达连锁店，就如到达一把扇子的轴心部分，那这个位置就是最具集客能力的地方。</li>
</ul>
<h4 id="集客点周边环境配套"><a href="#集客点周边环境配套" class="headerlink" title="集客点周边环境配套"></a>集客点周边环境配套</h4><table>
<thead>
<tr>
<th>影响维度</th>
<th>影响字段</th>
</tr>
</thead>
<tbody>
<tr>
<td>人流集聚</td>
<td>政府机关集中办公地区；医疗设施；娱乐休闲（博物馆、美术馆、公园、体育馆、剧院、电影院、酒店、娱乐KTV）；学校设施（大学、中学、小学）；旅游景点（景区、游乐园、名胜古迹）；零售商场（百货公司、餐饮街、购物中心、商业街）；</td>
</tr>
<tr>
<td>交通环境</td>
<td>交通设施（火车站、客运站、停车场、地铁站、公交站牌、 高架桥/高速公路出口）</td>
</tr>
<tr>
<td>住宅小区</td>
<td>固定居民100米内多少住户，商圈100米-300米多少住户，300米-500米多少住户，对于新兴住宅区、办公区、工业区、住宅人口激增区、车辆通行激增区都要标示说明。</td>
</tr>
</tbody>
</table>
<ul>
<li>医院：出入医院之主干道上，主要调查为病床数、门诊数、医护职工数。如位于医院内则以上述条件作为评估，不需要采点人车流量；若新址位于医院外，则需要采点人车流量，医院只作为一个重要的集客设施。医院商圈一般平均捕获率为17%，一般平均客单价为9.5元。</li>
<li>学校：分各等级学校，如国小、国中、高中、大专院校等。主要为师生单位贡献度，如师生数、住宿数。</li>
<li>车站：长途汽车站、火车站和城市的交通主干道，虽然人流很大，但客流速度较快，很多人的目的不是购物，滞留时间较短，在这些地方开店，要根据自己的经营需要慎重选择。</li>
<li>集客设施：观光花园、果园、茶园、游乐区、博物馆、美术馆、展览馆、运动场等；</li>
<li>厂区：分为工业区与工厂区，主要为工厂职工数的单位贡献度，如员工数、薪资水平。消费特色为提神或清凉饮料、热食、烟酒需求量比较大。</li>
<li>郊区：一般是以车客为主体的商圈。位于汽车、机车流量大，高速公路或快速道路交通道出入口，交通干道上。一般来说，位于流动车流的商圈捕获率较低，郊区商圈一般平均捕获率为6%，一般平均客单价为7元。</li>
</ul>
<ul>
<li>风景区：来客数几乎为风景区游客。主要调查风景区年旅游人数（分淡旺季），由于位于旅游景点内，主要为旅游单位贡献度。</li>
<li>电影院：主要调查几院几厅，每一厅之座位数及总座位数。影院会因片子好坏及休假日而造成人潮之急剧变化，因而应于平常日调查，主要为单位贡献度（院，厅座位数）。</li>
<li>娱乐KTV：娱乐与影院调查方法相同。具休闲、刺激性、流行的商品有不错的销售业绩。连续假日、天气有影响力。一般来说，位于休闲娱乐的商圈捕获率要远远高于其他商圈。娱乐商圈一般平均捕获率为25%，一般平均客单价为11元。</li>
</ul>
<h3 id="集客点评估："><a href="#集客点评估：" class="headerlink" title="集客点评估："></a><strong>集客点评估：</strong></h3><ul>
<li>马路窄宽大小：单行道、中间有无隔离带、双向道与停车问题；马路通行口距新店30米内，要计算门面双向人流量；马路通行口距新店80米内，要计算门面的双向人流量和对面人流量的一半；马路通行口距新店80米以外的，只能计算门面的双向人流量，对面的人流量不予计算。</li>
<li>测算时段人潮流量：监测记录周一至周日（7天）每个时段的人潮流量（包含马路中间骑自行车，无隔离带马路对面的行人*50%）、车潮流量（汽车摩托车往来流量），根据捕获率估算可能进店的消费者数量，预估该店每个时段/天/月/年度的平均销售额，进而计算该店的总投资额和投资回收期（日均营业额 = 人均人流量 x 捕获率或入店率 x 客单价）</li>
<li>人流动线分析（会不会被竞争对手截住）；</li>
<li>竞争对手分析；</li>
<li>互补店铺分析；</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;城市人口及经济数据资料：&quot;&gt;&lt;a href=&quot;#城市人口及经济数据资料：&quot; class=&quot;headerlink&quot; title=&quot;城市人口及经济数据资料：&quot;&gt;&lt;/a&gt;&lt;strong&gt;城市人口及经济数据资料：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;市区人口总量、人口密度、人均收入、人均消费等经济指标、城市未来发展规划、公共交通情况&lt;/p&gt;
&lt;h3 id=&quot;划分商圈、评估选择商圈：&quot;&gt;&lt;a href=&quot;#划分商圈、评估选择商圈：&quot; class=&quot;headerlink&quot; title=&quot;划分商圈、评估选择商圈：&quot;&gt;&lt;/a&gt;&lt;strong&gt;划分商圈、评估选择商圈：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;划分一级二级三级商圈（记分法：步行车行距离近加分；营业额高加分；公交地铁线路加分；）；交通地理状况；&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫入门[四] | Pandas数据分析Top100电影</title>
    <link href="http://Mihawkmah.github.io/2017/09/30/Scrapy%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E5%9B%9B-Pandas%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90Top100%E7%94%B5%E5%BD%B1/"/>
    <id>http://Mihawkmah.github.io/2017/09/30/Scrapy爬虫入门-四-Pandas数据分析Top100电影/</id>
    <published>2017-09-30T03:37:05.000Z</published>
    <updated>2017-09-30T03:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="连接MongoDB并清洗数据"><a href="#连接MongoDB并清洗数据" class="headerlink" title="连接MongoDB并清洗数据"></a>连接MongoDB并清洗数据</h3><h4 id="安装Pymongo"><a href="#安装Pymongo" class="headerlink" title="安装Pymongo"></a>安装Pymongo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 安装anaconda（包含 Numpy、Pandas、Matplotlib、SciPy、Seaborn）</div><div class="line">pyenv install anaconda</div><div class="line"></div><div class="line"># 安装jieba分词</div><div class="line">pip install jieba</div><div class="line"></div><div class="line"># 安装scikit-learn</div><div class="line">pip install -U scikit-learn 或 conda install scikit-learn</div><div class="line"></div><div class="line"># 安装PyMongo</div><div class="line">conda install pymongo</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import pymongo</div><div class="line"></div><div class="line">client = pymongo.MongoClient(host=&apos;localhost&apos;,port=27017)</div><div class="line"># 获取数据库，mtime为数据库名称</div><div class="line">db = client.mtime</div><div class="line"># 获取集合，movietop100为集合名称</div><div class="line">movies = db.movietop100</div></pre></td></tr></table></figure>
<h4 id="Pymongo指令"><a href="#Pymongo指令" class="headerlink" title="Pymongo指令"></a>Pymongo指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 存储单个数据</div><div class="line">document = &#123;&apos;x&apos;:1&#125;</div><div class="line">movies.insert_one(document)</div><div class="line"># 存储多个数据</div><div class="line">document = [&#123;&apos;x&apos;:3&#125;,&#123;&apos;x&apos;:4&#125;]</div><div class="line">movies.insert_many(document)</div><div class="line"></div><div class="line"># 查找</div><div class="line">movies.find_one(&#123;&apos;x&apos;:1&#125;)</div><div class="line"># 将name和_id取出，1代表取出，0代表不取出</div><div class="line">movies.find(&#123;&#125;,&#123;&apos;name&apos;:1,&apos;_id&apos;:1&#125;):</div><div class="line"># 限制条数，跳过第1条</div><div class="line">find().limit(10).skip(1)</div><div class="line"># 取出所有数据</div><div class="line">arr = []</div><div class="line">for data in movies.find():</div><div class="line">    arr.append(data)</div><div class="line"></div><div class="line"># 更新,如果不存在则新增这个字段</div><div class="line">movies.update_one(&#123;&apos;x&apos;:4&#125;,&#123;&apos;$set&apos;:&#123;&apos;x&apos;:3&#125;&#125;)</div><div class="line"># 更新，删除这个字段</div><div class="line">movies.update_one(&#123;&apos;x&apos;:4&#125;,&#123;&apos;$unset&apos;:&#123;&apos;x&apos;:4&#125;&#125;)</div><div class="line"></div><div class="line"># 删除</div><div class="line">movies.delete_one(&#123;&apos;x&apos;:3&#125;)</div><div class="line"></div><div class="line"># 计数</div><div class="line">movies.count()</div></pre></td></tr></table></figure>
<h4 id="pymongo数据清洗"><a href="#pymongo数据清洗" class="headerlink" title="pymongo数据清洗"></a>pymongo数据清洗</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 按照空格分割，分割1次</div><div class="line">str.split(&apos; &apos;,1)</div><div class="line">str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等</div><div class="line">num -- 分割次数</div><div class="line"></div><div class="line"># 将空格替换为无</div><div class="line">str.replace(&apos; &apos;,&apos;&apos;)</div><div class="line"></div><div class="line"># 清洗数据，将名称中的年份分离出来保存到新建year字段中</div><div class="line"> for movie in movies.find(&#123;&#125;,&#123;&apos;name&apos;:1,&apos;_id&apos;:1&#125;):</div><div class="line">     print(movie)</div><div class="line">     if(&apos;(&apos; in movie[&apos;name&apos;]):</div><div class="line">         movies.update(movie,&#123;&apos;$set&apos;:&#123;&apos;name&apos;: movie[&apos;name&apos;].split(&apos;(&apos;)[0], &apos;year&apos;: movie[&apos;name&apos;].split(&apos;(&apos;)[1].split(&apos;)&apos;)[0]&#125;&#125;)</div><div class="line">         </div><div class="line"># 取数据限制条数，跳过哪一条</div><div class="line">limit(10).skip(1)</div></pre></td></tr></table></figure>
<h3 id="Pandas数据分析"><a href="#Pandas数据分析" class="headerlink" title="Pandas数据分析"></a>Pandas数据分析</h3><h4 id="Pandas数据选择"><a href="#Pandas数据选择" class="headerlink" title="Pandas数据选择"></a>Pandas数据选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 索引</div><div class="line">movie.index</div><div class="line"># 选择行</div><div class="line">movie[0:3]</div><div class="line"># 选择列</div><div class="line">movie[&apos;name&apos;]</div><div class="line">movie.name</div><div class="line"># 选择多列</div><div class="line">movie[[&apos;name&apos;,&apos;role&apos;]]</div></pre></td></tr></table></figure>
<h4 id="DataFrame数据清洗"><a href="#DataFrame数据清洗" class="headerlink" title="DataFrame数据清洗"></a>DataFrame数据清洗</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 取出DataFrame的每一行，然后选择row[1]是各个字段的数据，row[0]是index，然后将下替换为2005</div><div class="line">for row in movietop100.iterrows():</div><div class="line">    row[1][&apos;year&apos;] = row[1][&apos;year&apos;].replace(&apos;下&apos;,&apos;2005&apos;)</div><div class="line">    </div><div class="line"># 将DataFrame中字段值为列表的转化为多个字段,并合并到原DataFrame</div><div class="line">tags = mo.type.apply(pd.Series)</div><div class="line">tags.columns = [&apos;tag1&apos;, &apos;tag2&apos;, &apos;tag3&apos;]</div><div class="line">newdf = pd.concat([mo[:], tags[:]], axis=1)[[&apos;year&apos;, &apos;tag1&apos;, &apos;tag2&apos;, &apos;tag3&apos;]]</div></pre></td></tr></table></figure>
<h4 id="Pandas统计方法"><a href="#Pandas统计方法" class="headerlink" title="Pandas统计方法"></a>Pandas统计方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 按照year字段分组，并计算每组的数量</div><div class="line">movietop100.groupby(&apos;year&apos;).agg(&apos;count&apos;)</div><div class="line"></div><div class="line"># 数据透视表，每一年对应评分的电影名称的透视表格</div><div class="line">movietop100.pivot_table(index=[&quot;year&quot;],columns=[&quot;point&quot;],values=[&quot;name&quot;],aggfunc=&apos;sum&apos;)</div></pre></td></tr></table></figure>
<h4 id="Plotly数据可视化"><a href="#Plotly数据可视化" class="headerlink" title="Plotly数据可视化"></a>Plotly数据可视化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># 安装plotly</div><div class="line">conda install plotly</div><div class="line"></div><div class="line"># 导入</div><div class="line">from plotly import offline</div><div class="line">import plotly.graph_objs as go</div><div class="line"></div><div class="line"># 直方图 Bar</div><div class="line">offline.init_notebook_mode()</div><div class="line">data = [go.Bar(</div><div class="line">    x = yeardata.index,</div><div class="line">    y = yeardata._id,</div><div class="line">)]</div><div class="line">offline.iplot(data)</div><div class="line"></div><div class="line"># 电影类型分布饼状图</div><div class="line">data = [go.Pie(</div><div class="line">    labels=datatypes.index,</div><div class="line">    values=datatypes.year</div><div class="line">)]</div><div class="line">offline.iplot(data)</div><div class="line"></div><div class="line">#散点图 Scatter</div><div class="line">offline.init_notebook_mode()</div><div class="line">data = [go.Scatter(</div><div class="line">    x = mo.year,</div><div class="line">    y = mo.pointnum,</div><div class="line">    mode = &quot;markers&quot;,</div><div class="line">    marker = dict(size = mo.point)</div><div class="line">)]</div><div class="line">offline.iplot(data)</div></pre></td></tr></table></figure>
<h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><p>1、Top100电影的年份分布 - 柱状图</p>
<p><img src="/2017/09/30/Scrapy爬虫入门-四-Pandas数据分析Top100电影/1.jpg" alt="1"></p>
<p>2、Top100电影的类型分布 - 饼图</p>
<p><img src="/2017/09/30/Scrapy爬虫入门-四-Pandas数据分析Top100电影/2.jpg" alt="2"></p>
<p>3、Top100电影的评分分布 - 散点图（年份、评分）</p>
<p><img src="/2017/09/30/Scrapy爬虫入门-四-Pandas数据分析Top100电影/3.jpg" alt="3"></p>
<blockquote>
<p>项目地址 <a href="https://github.com/Mihawkmah/Anaconda.Analysis" target="_blank" rel="external">https://github.com/Mihawkmah/Anaconda.Analysis</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;连接MongoDB并清洗数据&quot;&gt;&lt;a href=&quot;#连接MongoDB并清洗数据&quot; class=&quot;headerlink&quot; title=&quot;连接MongoDB并清洗数据&quot;&gt;&lt;/a&gt;连接MongoDB并清洗数据&lt;/h3&gt;&lt;h4 id=&quot;安装Pymongo&quot;&gt;&lt;a href=&quot;#安装Pymongo&quot; class=&quot;headerlink&quot; title=&quot;安装Pymongo&quot;&gt;&lt;/a&gt;安装Pymongo&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 安装anaconda（包含 Numpy、Pandas、Matplotlib、SciPy、Seaborn）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pyenv install anaconda&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装jieba分词&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install jieba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装scikit-learn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install -U scikit-learn 或 conda install scikit-learn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 安装PyMongo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;conda install pymongo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫入门[三] | 实战爬取时光网Top100电影</title>
    <link href="http://Mihawkmah.github.io/2017/09/21/Scrapy%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E4%B8%89-%E5%AE%9E%E6%88%98%E7%88%AC%E5%8F%96%E6%97%B6%E5%85%89%E7%BD%91Top100%E7%94%B5%E5%BD%B1/"/>
    <id>http://Mihawkmah.github.io/2017/09/21/Scrapy爬虫入门-三-实战爬取时光网Top100电影/</id>
    <published>2017-09-21T08:04:21.000Z</published>
    <updated>2017-09-30T03:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始化爬虫"><a href="#初始化爬虫" class="headerlink" title="初始化爬虫"></a>初始化爬虫</h3><h4 id="抓取维度指标"><a href="#抓取维度指标" class="headerlink" title="抓取维度指标"></a>抓取维度指标</h4><ul>
<li>电影排名</li>
<li>电影名称</li>
<li>导演</li>
<li>主演</li>
<li>类型</li>
<li>电影描述</li>
<li>评分</li>
<li>评分人数</li>
</ul>
<h4 id="目标链接"><a href="#目标链接" class="headerlink" title="目标链接"></a>目标链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.mtime.com/top/movie/top100/</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="搭建爬虫"><a href="#搭建爬虫" class="headerlink" title="搭建爬虫"></a>搭建爬虫</h4><p><code>scrapy startproject mtime</code></p>
<h3 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h3><h4 id="iterms-py"><a href="#iterms-py" class="headerlink" title="iterms.py"></a>iterms.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class MtimeItem(scrapy.Item):</div><div class="line">    rank = scrapy.Field()</div><div class="line">    name = scrapy.Field()</div><div class="line">    direct = scrapy.Field()</div><div class="line">    role = scrapy.Field()</div><div class="line">    type = scrapy.Field()</div><div class="line">    describe = scrapy.Field()</div><div class="line">    point = scrapy.Field()</div><div class="line">    pointnum = scrapy.Field()</div></pre></td></tr></table></figure>
<h4 id="配置settings-py"><a href="#配置settings-py" class="headerlink" title="配置settings.py"></a>配置settings.py</h4><p>使用chrome浏览器检查-Network查看Request Headers信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">USER_AGENT = &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36&apos;</div><div class="line"></div><div class="line">ROBOTSTXT_OBEY = False</div><div class="line"></div><div class="line">DOWNLOAD_DELAY = 3</div><div class="line"></div><div class="line">DEFAULT_REQUEST_HEADERS = &#123;</div><div class="line">   &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&apos;,</div><div class="line">   &apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.8&apos;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在终端内测试提取数据"><a href="#在终端内测试提取数据" class="headerlink" title="在终端内测试提取数据"></a>在终端内测试提取数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scrapy shell &apos;http://www.mtime.com/top/movie/top100_chinese/&apos;</div><div class="line"># 测试能否抓到数据</div><div class="line">response.css(&apos;div.mov_con&apos;)</div><div class="line"># response状态</div><div class="line">response.status</div></pre></td></tr></table></figure>
<h4 id="mtime-py"><a href="#mtime-py" class="headerlink" title="mtime.py"></a>mtime.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">from scrapy.spiders import Spider</div><div class="line">from mtime.items import MtimeItem</div><div class="line"></div><div class="line">class Mtime(Spider):</div><div class="line">    name = &apos;mtime&apos;</div><div class="line">    start_urls = [</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-2.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-3.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-4.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-5.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-6.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-7.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-8.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-9.html&apos;,</div><div class="line">        &apos;http://www.mtime.com/top/movie/top100/index-10.html&apos;</div><div class="line">    ]</div><div class="line"></div><div class="line">    def parse(self, response):</div><div class="line">        item = MtimeItem()</div><div class="line">        movies = response.css(&apos;ul#asyncRatingRegion li&apos;)</div><div class="line">        for movie in movies:</div><div class="line">            item[&apos;rank&apos;] = movie.css(&apos;div.number em::text&apos;)[0].extract()</div><div class="line">            item[&apos;name&apos;] = movie.css(&apos;h2 a::text&apos;)[0].extract()</div><div class="line">            item[&apos;direct&apos;] = movie.css(&apos;p a::text&apos;)[0].extract()</div><div class="line">            item[&apos;role&apos;] = movie.css(&apos;p&gt;a::text&apos;).extract()</div><div class="line">            item[&apos;type&apos;] = movie.css(&apos;span a::text&apos;).extract()</div><div class="line">            item[&apos;describe&apos;] = movie.css(&apos;p.mt3::text&apos;)[0].extract()</div><div class="line">            item[&apos;point&apos;] = movie.css(&apos;b.point span::text&apos;).extract()</div><div class="line">            item[&apos;pointnum&apos;] = movie.css(&apos;div.mov_point p::text&apos;)[0].extract()</div><div class="line">            yield item</div></pre></td></tr></table></figure>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><h4 id="配置settings文件"><a href="#配置settings文件" class="headerlink" title="配置settings文件"></a>配置settings文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">   &apos;mtime.pipelines.MongoPipeline&apos;: 300,</div><div class="line">&#125;</div><div class="line">MONGODB_SERVER = &quot;localhost&quot;</div><div class="line">MONGODB_PORT = 27017</div><div class="line">MONGODB_COLLECTION = &quot;movietop100&quot;</div><div class="line">MONGODB_DB = &quot;mtime&quot;</div></pre></td></tr></table></figure>
<h4 id="pipelines-py"><a href="#pipelines-py" class="headerlink" title="pipelines.py"></a>pipelines.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import pymongo</div><div class="line">from scrapy.conf import settings</div><div class="line"></div><div class="line">class MongoPipeline(object):</div><div class="line">    def __init__(self):</div><div class="line">        connection = pymongo.MongoClient(</div><div class="line">            settings[&apos;MONGODB_SERVER&apos;],</div><div class="line">            settings[&apos;MONGODB_PORT&apos;]</div><div class="line">        )</div><div class="line">        db = connection[settings[&apos;MONGODB_DB&apos;]]</div><div class="line">        self.collection = db[settings[&apos;MONGODB_COLLECTION&apos;]]</div><div class="line">    def process_item(self, item, spider):</div><div class="line">        self.collection.insert(dict(item))</div><div class="line">        return item</div></pre></td></tr></table></figure>
<h3 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h3><p><code>scrapy crawl mtime</code></p>
<blockquote>
<p>GitHub项目 <a href="https://github.com/Mihawkmah/Python.Crawler" target="_blank" rel="external">https://github.com/Mihawkmah/Python.Crawler</a></p>
</blockquote>
<h4 id="附录：mongodb数据库操作指令"><a href="#附录：mongodb数据库操作指令" class="headerlink" title="附录：mongodb数据库操作指令"></a>附录：mongodb数据库操作指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">show dbs //显示数据库</div><div class="line">use testdb //创建或使用某个数据库</div><div class="line">db.dropDatabase() //删除数据库</div><div class="line"></div><div class="line">show tables //显示集合</div><div class="line">db.test.drop() //删除集合</div><div class="line">db.test.insert() //插入文档</div><div class="line">db.test.update() //更新文档</div><div class="line">db.test.remove() //删除文档</div><div class="line"></div><div class="line">db.test.find().pretty()   //查找文档</div><div class="line">(&gt;) 大于 - $gt</div><div class="line">(&lt;) 小于 - $lt</div><div class="line">(&gt;=) 大于等于 - $gte</div><div class="line">(&lt;= ) 小于等于 - $lte</div><div class="line">db.test.find().limit() //读取的记录条数</div><div class="line">db.test.find().skip() //跳过的记录条数</div><div class="line">db.test.find().sort() //排序</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初始化爬虫&quot;&gt;&lt;a href=&quot;#初始化爬虫&quot; class=&quot;headerlink&quot; title=&quot;初始化爬虫&quot;&gt;&lt;/a&gt;初始化爬虫&lt;/h3&gt;&lt;h4 id=&quot;抓取维度指标&quot;&gt;&lt;a href=&quot;#抓取维度指标&quot; class=&quot;headerlink&quot; title=&quot;抓取维度指标&quot;&gt;&lt;/a&gt;抓取维度指标&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;电影排名&lt;/li&gt;
&lt;li&gt;电影名称&lt;/li&gt;
&lt;li&gt;导演&lt;/li&gt;
&lt;li&gt;主演&lt;/li&gt;
&lt;li&gt;类型&lt;/li&gt;
&lt;li&gt;电影描述&lt;/li&gt;
&lt;li&gt;评分&lt;/li&gt;
&lt;li&gt;评分人数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;目标链接&quot;&gt;&lt;a href=&quot;#目标链接&quot; class=&quot;headerlink&quot; title=&quot;目标链接&quot;&gt;&lt;/a&gt;目标链接&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://www.mtime.com/top/movie/top100/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用海盗模型建立数据分析维度</title>
    <link href="http://Mihawkmah.github.io/2017/09/18/%E5%88%A9%E7%94%A8%E6%B5%B7%E7%9B%97%E6%A8%A1%E5%9E%8B%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%BB%B4%E5%BA%A6/"/>
    <id>http://Mihawkmah.github.io/2017/09/18/利用海盗模型建立数据分析维度/</id>
    <published>2017-09-18T06:27:12.000Z</published>
    <updated>2017-09-18T06:36:43.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Acquisition别人怎么发现你？</li>
<li>Activation用户的第一次体验好不好？</li>
<li>Retention用户回来吗？</li>
<li>Revenue你怎么获得收入？</li>
<li>Referral用户给你做推荐吗？</li>
</ul>
<a id="more"></a>
<blockquote>
<p>海盗模型AARRR：</p>
<p>获客（Acquisition）就是主要从网站渠道获得到访的网站流量。</p>
<p>激活（Activation）让用户真正的体会到这个产品迭代创新价值并且愿意回来用，理解你这个产品了。</p>
<p>留存（Retention）就是你长期定位来源你这个产品，而不是只是注册就走掉了，那这个其实是越来越被现在业内的人士开始关注和重视的。因为低价流量的时代基本上终结了，再加上收入正常的产品过程中，购买率的转化等等或者是往销售那边导流转化的效率等等。</p>
<p>推荐（Referal）让用户向他的好朋友或者同事等认识的人去介绍</p>
</blockquote>
<p><img src="/2017/09/18/利用海盗模型建立数据分析维度/数据分析框架.jpg" alt="数据分析框架"></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Acquisition别人怎么发现你？&lt;/li&gt;
&lt;li&gt;Activation用户的第一次体验好不好？&lt;/li&gt;
&lt;li&gt;Retention用户回来吗？&lt;/li&gt;
&lt;li&gt;Revenue你怎么获得收入？&lt;/li&gt;
&lt;li&gt;Referral用户给你做推荐吗？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫入门[二] | 数据处理与存储</title>
    <link href="http://Mihawkmah.github.io/2017/09/12/Scrapy%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8-%E4%BA%8C-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B8%8E%E5%AD%98%E5%82%A8/"/>
    <id>http://Mihawkmah.github.io/2017/09/12/Scrapy爬虫入门-二-数据处理与存储/</id>
    <published>2017-09-12T07:29:56.000Z</published>
    <updated>2017-09-21T07:18:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用项目item"><a href="#使用项目item" class="headerlink" title="使用项目item"></a>使用项目item</h3><p>Scrapy提供了item类，是装载抓取数据的容器。声明类似于Flask框架中的Models。在tutorial目录下的iterms.py文件编辑。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import scrapy</div><div class="line"></div><div class="line">class Product(scrapy.Item):</div><div class="line">    name = scrapy.Field()</div><div class="line">    price = scrapy.Field()</div><div class="line">    stock = scrapy.Field()</div><div class="line">    last_updated = scrapy.Field(serializer=str)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">product [ &apos;last_updated&apos; ]  =  &apos;today&apos;</div></pre></td></tr></table></figure>
<h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查询product的数据主键</div><div class="line">product.keys()</div><div class="line"># 查询product中的所有数据</div><div class="line">product.items()</div></pre></td></tr></table></figure>
<h4 id="复制项目"><a href="#复制项目" class="headerlink" title="复制项目"></a>复制项目</h4><p><code>product2 = product.copy()</code></p>
<h4 id="从项目创建字典"><a href="#从项目创建字典" class="headerlink" title="从项目创建字典"></a>从项目创建字典</h4><p><code>dict(product)</code></p>
<h3 id="使用项目管道item-Pipeline"><a href="#使用项目管道item-Pipeline" class="headerlink" title="使用项目管道item Pipeline"></a>使用项目管道item Pipeline</h3><p>项目被蜘蛛住区后，它被发送到项目管道</p>
<h4 id="典型用途"><a href="#典型用途" class="headerlink" title="典型用途"></a>典型用途</h4><ul>
<li>清理HTML数据验证</li>
<li>验证爬取的数据（检查项目是否包含特定字段）</li>
<li>查重（并删除）</li>
<li>将刮取的项目存储在数据库中</li>
</ul>
<h4 id="pipelines-py中编写item-pipeline"><a href="#pipelines-py中编写item-pipeline" class="headerlink" title="pipelines.py中编写item pipeline"></a>pipelines.py中编写item pipeline</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class DoubanPipeline(object):</div><div class="line">    def process_item(self, item, spider):</div><div class="line">        return item</div></pre></td></tr></table></figure>
<p>在settings.py中进行注册</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">   &apos;myproject.pipelines.DoubanPipeline&apos;: 300,</div><div class="line">   &apos;myproject.pipelines.DouDouPipline&apos;:500,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分配给每个类的整型值，确定了他们运行的顺序，item按数字从低到高的顺序，通过pipeline，通常将这些数字定义在0-1000范围内。</p>
<h3 id="使用pymongo将item写入MongoDB"><a href="#使用pymongo将item写入MongoDB" class="headerlink" title="使用pymongo将item写入MongoDB"></a>使用pymongo将item写入MongoDB</h3><p>MongoDB的地址和数据库名称在Scrapy setttings.py配置文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MONGO_URI = &quot;mongodb://localhost:27017&quot;;</div><div class="line">MONGO_DATABASE = &quot;soufang&quot;;</div></pre></td></tr></table></figure>
<p>在pipelines.py中定义一个函数连接数据库，然后定义一个函数去处理被解析的数据</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import pymongo</div><div class="line"></div><div class="line">class MongoPipeline(object):</div><div class="line"></div><div class="line">    collection_name = &apos;scrapy_items&apos;</div><div class="line"></div><div class="line">    def __init__(self, mongo_uri, mongo_db):</div><div class="line">        self.mongo_uri = mongo_uri</div><div class="line">        self.mongo_db = mongo_db</div><div class="line"></div><div class="line">    @classmethod</div><div class="line">    def from_crawler(cls, crawler):</div><div class="line">        return cls(</div><div class="line">            mongo_uri=crawler.settings.get(&apos;MONGO_URI&apos;),</div><div class="line">            mongo_db=crawler.settings.get(&apos;MONGO_DATABASE&apos;, &apos;items&apos;)</div><div class="line">        )</div><div class="line"></div><div class="line">    def open_spider(self, spider):</div><div class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</div><div class="line">        self.db = self.client[self.mongo_db]</div><div class="line"></div><div class="line">    def close_spider(self, spider):</div><div class="line">        self.client.close()</div><div class="line"></div><div class="line">    def process_item(self, item, spider):</div><div class="line">        self.db[self.collection_name].insert(dict(item))</div><div class="line">        return item</div></pre></td></tr></table></figure>
<h4 id="附录：Mac安装MongoDB"><a href="#附录：Mac安装MongoDB" class="headerlink" title="附录：Mac安装MongoDB"></a>附录：Mac安装MongoDB</h4><p>更新Homebrew的包数据库</p>
<p><code>brew update</code></p>
<p>安装MongoDB，安装完成后显示位置：/usr/local/Cellar/mongodb/3.4.9</p>
<p><code>brew install mongodb</code></p>
<blockquote>
<p>To have launchd start mongodb now and restart at login:<br>  brew services start mongodb<br>Or, if you don’t want/need a background service you can just run:<br>  mongod –config /usr/local/etc/mongod.conf</p>
</blockquote>
<p>打开.bash_profile</p>
<p><code>cd ~</code></p>
<p><code>vim .bash_profile</code></p>
<p>在.bash_profile文件中加入下面语句，i进行编辑，esc退出编辑，:wq保存并推出</p>
<p><code>export PATH=/usr/local/Cellar/mongodb/3.4.4/bin:$PATH</code></p>
<p>创建/data/db目录</p>
<p><code>sudo mkdir -p /data/db</code></p>
<p>运行mongodb，默认数据库目录即为 /data/db</p>
<p><code>mongod</code></p>
<p>另一个窗口运行，开始各种数据库指令</p>
<p><code>mongo</code></p>
<p>显示已经存在的数据库</p>
<p><code>show dbs</code>    </p>
<p>退出</p>
<p><code>exit</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用项目item&quot;&gt;&lt;a href=&quot;#使用项目item&quot; class=&quot;headerlink&quot; title=&quot;使用项目item&quot;&gt;&lt;/a&gt;使用项目item&lt;/h3&gt;&lt;p&gt;Scrapy提供了item类，是装载抓取数据的容器。声明类似于Flask框架中的Models。在tutorial目录下的iterms.py文件编辑。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import scrapy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Product(scrapy.Item):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = scrapy.Field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    price = scrapy.Field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    stock = scrapy.Field()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    last_updated = scrapy.Field(serializer=str)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>产品需要知道的认知与设计准则</title>
    <link href="http://Mihawkmah.github.io/2017/09/11/%E4%BA%A7%E5%93%81%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E8%AE%A4%E7%9F%A5%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%87%86%E5%88%99/"/>
    <id>http://Mihawkmah.github.io/2017/09/11/产品需要知道的认知与设计准则/</id>
    <published>2017-09-11T02:24:09.000Z</published>
    <updated>2017-09-12T02:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>“设计绝不是简单的拼合，排列甚至编辑；设计是通过阐明，简化、明确、修饰，使之庄严，有说服性，甚至带一点趣味性，来赋予其价值及意义。”——保罗·兰德（Paul Rand）</p>
</blockquote>
<h3 id="经验-amp-环境-amp-目标影响感知"><a href="#经验-amp-环境-amp-目标影响感知" class="headerlink" title="经验&amp;环境&amp;目标影响感知"></a>经验&amp;环境&amp;目标影响感知</h3><ul>
<li>避免歧义</li>
<li>保持一致</li>
<li>目标清晰</li>
</ul>
<h3 id="格式塔原理，视觉经过优化，更容易看到结构"><a href="#格式塔原理，视觉经过优化，更容易看到结构" class="headerlink" title="格式塔原理，视觉经过优化，更容易看到结构"></a>格式塔原理，视觉经过优化，更容易看到结构</h3><ul>
<li>接近性</li>
<li>相似性</li>
<li>连续性</li>
<li>封闭性</li>
<li>对称性</li>
<li>主题和背景</li>
<li>共同命运</li>
</ul>
<a id="more"></a>
<h3 id="色觉是有限的"><a href="#色觉是有限的" class="headerlink" title="色觉是有限的"></a>色觉是有限的</h3><ul>
<li>用饱和度亮度以及摄像来区分颜色</li>
<li>使用独特的颜色</li>
<li>避免使用色盲的人无法区分的颜色对</li>
<li>在颜色之外使用其他提示</li>
<li>将强烈的对抗色分开</li>
</ul>
<h3 id="我们的边界视觉很糟糕，让信息可见的常用方法"><a href="#我们的边界视觉很糟糕，让信息可见的常用方法" class="headerlink" title="我们的边界视觉很糟糕，让信息可见的常用方法"></a>我们的边界视觉很糟糕，让信息可见的常用方法</h3><ul>
<li>放在用户所看的位置上</li>
<li>标记出错误</li>
<li>使用错误符号</li>
<li>保留红色以呈现错误信息</li>
</ul>
<h3 id="糟糕的信息设计会影响阅读"><a href="#糟糕的信息设计会影响阅读" class="headerlink" title="糟糕的信息设计会影响阅读"></a>糟糕的信息设计会影响阅读</h3><ul>
<li>支持而不是干扰阅读：避免不常见和不熟悉的词汇，避免难以辨认的书写和字型，避免微小的文字，避免嘈杂背景下的文字，避免被重复的内容淹没，避免居中对齐的文字</li>
<li>尽量减少阅读需要</li>
</ul>
<h3 id="我们的注意力有限，记忆力也不完美"><a href="#我们的注意力有限，记忆力也不完美" class="headerlink" title="我们的注意力有限，记忆力也不完美"></a>我们的注意力有限，记忆力也不完美</h3><ul>
<li>只要用户确定了自己的目标，就不要显示一些会分散用户注意力无关的链接和行动召唤元素。</li>
<li>不同功能的操作越一致，或者不同类型对象的操作越一致，用户要学的就越少。</li>
</ul>
<h3 id="识别容易，回忆很难"><a href="#识别容易，回忆很难" class="headerlink" title="识别容易，回忆很难"></a>识别容易，回忆很难</h3><ul>
<li>看到和选择比回忆和输入要容易</li>
<li>尽可能使用图像来表达功能</li>
<li>使用缩略图来紧凑的描绘全尺寸的图像</li>
<li>越多人使用的功能应该越可见</li>
<li>使用视觉提示让用户知道他们所处的位置</li>
<li>让认证信息容易回忆</li>
</ul>
<h3 id="从经验中学习与学后付诸实践容易，解决问题和计算很难"><a href="#从经验中学习与学后付诸实践容易，解决问题和计算很难" class="headerlink" title="从经验中学习与学后付诸实践容易，解决问题和计算很难"></a>从经验中学习与学后付诸实践容易，解决问题和计算很难</h3><ul>
<li>显著的标识系统状态和用户当前进度</li>
<li>引导用户完成他们的目标</li>
<li>明确无误的告知用户需要了解的信息</li>
<li>不要让用户诊断系统问题</li>
<li>尽可能减小设置的数量和复杂度</li>
<li>让用户使用感觉而不是计算</li>
<li>让系统令人感到熟悉</li>
<li>让电脑去计算</li>
</ul>
<h3 id="许多因素影响学习"><a href="#许多因素影响学习" class="headerlink" title="许多因素影响学习"></a>许多因素影响学习</h3><ul>
<li>当实践经常、有规律和精确时，我们学得更快</li>
<li>当操作专注于任务、简单和一致时，我们学得更快</li>
<li>太过相似的独立概念会带来额外复杂性</li>
<li>当词汇专注于任务，熟悉和一致时，我们学得更快。同一个名称，就是同一个东西，不同的名称，就是不同的东西。</li>
</ul>
<h3 id="人类很少做理性的决策，帮助人们做决策"><a href="#人类很少做理性的决策，帮助人们做决策" class="headerlink" title="人类很少做理性的决策，帮助人们做决策"></a>人类很少做理性的决策，帮助人们做决策</h3><ul>
<li>提供所有选项</li>
<li>帮助人们找到替代方案</li>
<li>提供无偏见的数据</li>
<li>不要让人们计算</li>
<li>检查断言和假设</li>
<li>数据可视化</li>
<li>说服和引导</li>
</ul>
<h3 id="菲茨定律"><a href="#菲茨定律" class="headerlink" title="菲茨定律"></a>菲茨定律</h3><p>在屏幕上目标越大，且越靠近起始的位置，你就能越快的指向它</p>
<h3 id="高响应度的系统"><a href="#高响应度的系统" class="headerlink" title="高响应度的系统"></a>高响应度的系统</h3><ul>
<li>立刻告知用户已收到其动作，即使回应用户需要时间。保持用户对因果关系的感知</li>
<li>让用户知道软件是否在忙</li>
<li>在等待一个功能完成的同时，允许用户做别的事情</li>
<li>动画要做到平滑清晰</li>
<li>让用户能够终止他们不想要的长时间操作</li>
<li>让用户知道长时间的操作需要多长时间</li>
<li>尽可能让用户来掌控自己的工作节奏</li>
<li>先显示重要的信息</li>
<li>在空闲时间提前处理用户没有请求的那些事情</li>
<li>先提供一个轻量级的模拟反馈，直到目标达成，然后再执行真实的操作</li>
<li>根据用户输入的优先级，而不是输入顺序来处理</li>
<li>监控时间承诺，降低工作质量来保证不落后</li>
</ul>
<h3 id="48dp定律"><a href="#48dp定律" class="headerlink" title="48dp定律"></a>48dp定律</h3><p>48dp在物理屏幕上差不多是9毫米的大小，UI设计中所有的触摸类控件的推荐大小在7毫米到10毫米之间，因为这个值之间会使控件的点中率大大增加，在视觉上也会比较舒服。</p>
<h3 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h3><blockquote>
<p>无论排版还是配色，都要对比明显，字大字小要明显，间距要拉就拉开，配色颜色要正。最怕那种中庸的，是最没有气质的。</p>
</blockquote>
<p>块内间距&lt;块外间距</p>
<p>行间距：字符高度的30%</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“设计绝不是简单的拼合，排列甚至编辑；设计是通过阐明，简化、明确、修饰，使之庄严，有说服性，甚至带一点趣味性，来赋予其价值及意义。”——保罗·兰德（Paul Rand）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;经验-amp-环境-amp-目标影响感知&quot;&gt;&lt;a href=&quot;#经验-amp-环境-amp-目标影响感知&quot; class=&quot;headerlink&quot; title=&quot;经验&amp;amp;环境&amp;amp;目标影响感知&quot;&gt;&lt;/a&gt;经验&amp;amp;环境&amp;amp;目标影响感知&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免歧义&lt;/li&gt;
&lt;li&gt;保持一致&lt;/li&gt;
&lt;li&gt;目标清晰&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;格式塔原理，视觉经过优化，更容易看到结构&quot;&gt;&lt;a href=&quot;#格式塔原理，视觉经过优化，更容易看到结构&quot; class=&quot;headerlink&quot; title=&quot;格式塔原理，视觉经过优化，更容易看到结构&quot;&gt;&lt;/a&gt;格式塔原理，视觉经过优化，更容易看到结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;接近性&lt;/li&gt;
&lt;li&gt;相似性&lt;/li&gt;
&lt;li&gt;连续性&lt;/li&gt;
&lt;li&gt;封闭性&lt;/li&gt;
&lt;li&gt;对称性&lt;/li&gt;
&lt;li&gt;主题和背景&lt;/li&gt;
&lt;li&gt;共同命运&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Scrapy爬虫入门[一] | 环境配置及基本使用</title>
    <link href="http://Mihawkmah.github.io/2017/09/07/Scrapy%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8%5B%E4%B8%80%5D-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://Mihawkmah.github.io/2017/09/07/Scrapy爬虫入门[一]-环境配置及基本使用/</id>
    <published>2017-09-07T03:11:24.000Z</published>
    <updated>2017-09-20T08:16:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境配置初始化"><a href="#环境配置初始化" class="headerlink" title="环境配置初始化"></a>环境配置初始化</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>安装虚拟环境管理工具pyenv</p>
<p><code>请自行搜索安装方法</code></p>
<p>安装科学计算anaconda</p>
<p><code>conda install anaconda</code></p>
<p>安装爬虫框架Scrapy</p>
<p><code>conda install scrapy</code></p>
<a id="more"></a>
<h4 id="创建Scrapy项目"><a href="#创建Scrapy项目" class="headerlink" title="创建Scrapy项目"></a>创建Scrapy项目</h4><p><code>scrapy startproject tutorial</code>  其中tutorial为项目名称</p>
<p>项目结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">scrapy.cfg: 项目的配置文件；（用于发布到服务器）</div><div class="line">tutorial/: 该项目文件夹。之后将在此编写Python代码。</div><div class="line">tutorial/items.py: 项目中的item文件;（定义结构化数据字段field）.</div><div class="line">tutorial/pipelines.py: 项目中的pipelines文件;（用于存放执行后期数据处理的功能，定义如何存储结构化数据)</div><div class="line">tutorial/settings.py: 项目的设置文件；(如何修改User-Agent，设置爬取时间间隔，设置代理，配置中间件等等)</div><div class="line">tutorial/spiders/: 放置spider代码的目录;（编写爬取网站规则）</div></pre></td></tr></table></figure>
<p>编写爬虫</p>
<p><code>在路径下新建py文件：tutorial/spiders/quotes_spider.py</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import scrapy</div><div class="line"></div><div class="line">class QuotesSpider(scrapy.Spider):</div><div class="line">    name = &quot;quotes&quot;</div><div class="line">    start_urls = [</div><div class="line">        &apos;http://quotes.toscrape.com/page/1/&apos;,</div><div class="line">        &apos;http://quotes.toscrape.com/page/2/&apos;,</div><div class="line">    ]</div><div class="line"></div><div class="line">    def parse(self, response):</div><div class="line">        for quote in response.css(&apos;div.quote&apos;):</div><div class="line">            yield &#123;</div><div class="line">                &apos;text&apos;: quote.css(&apos;span.text::text&apos;).extract_first(),</div><div class="line">                &apos;author&apos;: quote.css(&apos;small.author::text&apos;).extract_first(),</div><div class="line">                &apos;tags&apos;: quote.css(&apos;div.tags a.tag::text&apos;).extract(),</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h4 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h4><p>进入项目根目录</p>
<p><code>cd tutorial</code></p>
<p>查看项目包含的爬虫名称</p>
<p><code>scrapy list</code></p>
<p>执行爬虫</p>
<p><code>scrapy crawl quotes</code></p>
<p>其中quotes是编写的爬虫文件中定义的名称</p>
<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><p>使用scrapy shell提取数据：</p>
<p><code>scrapy shell &#39;http://quotes.toscrape.com&#39;</code></p>
<p>查看状态</p>
<p><code>response.status</code></p>
<p>使用Chrome插件：</p>
<p><code>SelectorGadget</code></p>
<p>Selector的四个基本方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xpath(): 传入xpath表达式，返回该表达式所对应的所有节点的selector list列表 。</div><div class="line">css(): 传入CSS表达式，返回该表达式所对应的所有节点的selector list列表.</div><div class="line">extract(): 序列化该节点为unicode字符串并返回list。</div><div class="line">re(): 根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</div></pre></td></tr></table></figure>
<p>CSS选择数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># extract（）</div><div class="line">调用.extract()此列表中每个元素的方法，并将其结果作为unicode字符串列表返回展平</div><div class="line"># 提取样式为quote的title元素</div><div class="line">response.css(&apos;title.quote&apos;)</div><div class="line"># 提取title元素的文本</div><div class="line">response.css(&apos;title::text&apos;).extract()</div><div class="line"># 提取第一个title元素的文本</div><div class="line">response.css(&apos;title::text&apos;)[0].extract()</div><div class="line"># 提取div.tags下的a.tag元素的文本</div><div class="line">response.css(&apos;div.tags a.tag::text&apos;).extract()</div><div class="line"># 提取img元素下的src属性</div><div class="line">response.css(&apos;img&apos;).xpath(&apos;@src&apos;).extract()</div><div class="line"># 提取a标签的href属性</div><div class="line">response.css(&apos;a[href*=image]::attr(href)&apos;).extract()</div><div class="line"># 提取a标签下的img标签的src属性</div><div class="line">response.css(&apos;a[href*=image] img::attr(src)&apos;).extract()</div></pre></td></tr></table></figure>
<p>使用正则表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># re（regex）</div><div class="line">应用给定的正则表达式并返回一个包含匹配项的unicode字符串的列表</div><div class="line"># 使用.re()方法</div><div class="line">response.xpath(&apos;//a[contains(@href, &quot;image&quot;)]/text()&apos;).re(r&apos;Name:\s*(.*)&apos;)</div></pre></td></tr></table></figure>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><p>导出JSON</p>
<p><code>scrapy crawl quotes -o quotes.json</code></p>
<p>其中quotes.json为保存的文件名</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境配置初始化&quot;&gt;&lt;a href=&quot;#环境配置初始化&quot; class=&quot;headerlink&quot; title=&quot;环境配置初始化&quot;&gt;&lt;/a&gt;环境配置初始化&lt;/h3&gt;&lt;h4 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h4&gt;&lt;p&gt;安装虚拟环境管理工具pyenv&lt;/p&gt;
&lt;p&gt;&lt;code&gt;请自行搜索安装方法&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装科学计算anaconda&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda install anaconda&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装爬虫框架Scrapy&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda install scrapy&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何快速准确沟通动效需求 | 产品必备技能</title>
    <link href="http://Mihawkmah.github.io/2017/09/01/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%87%86%E7%A1%AE%E6%B2%9F%E9%80%9A%E5%8A%A8%E6%95%88%E9%9C%80%E6%B1%82-%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    <id>http://Mihawkmah.github.io/2017/09/01/如何快速准确沟通动效需求-产品必备技能/</id>
    <published>2017-09-01T08:27:00.000Z</published>
    <updated>2017-09-01T08:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>静态页面UI提交给开发需要输出有效的切图和尺寸标注，同样动态也需要输出切图和标注，不过标注需要包含如下：<strong>属性（位置、大小、角度、透明度）、时间（开始时间、持续时间）、速度曲线</strong>。</p>
<h4 id="属性-amp-时间-五要素"><a href="#属性-amp-时间-五要素" class="headerlink" title="属性&amp;时间 - 五要素"></a>属性&amp;时间 - 五要素</h4><p>几乎所有的动态效果，都可以由如下的五种要素构成：</p>
<ul>
<li>移动</li>
<li>缩放</li>
<li>旋转</li>
<li>透明</li>
<li>起始</li>
</ul>
<a id="more"></a>
<h4 id="速度曲线-缓动函数"><a href="#速度曲线-缓动函数" class="headerlink" title="速度曲线 - 缓动函数"></a>速度曲线 - 缓动函数</h4><p>利用CSS3的@keyframes规则和动画属性可以创建动画，取代Flash、JavaScript。现实中物体运动过程总是时而加速、时而减速，我们的大脑习惯了这种自然的运动方式，利用速度曲线函数可以实现这种效果，animation-timing-function属性可以设置运动曲线，默认是”ease”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Linear：匀速运动</div><div class="line"></div><div class="line">Ease：慢速开始，然后变快，然后慢速结束</div><div class="line"></div><div class="line">Ease-out：先快后慢</div><div class="line"></div><div class="line">Ease-in：先慢后快</div><div class="line"></div><div class="line">ease-in-out：以慢速开始和结束</div></pre></td></tr></table></figure>
<p>还可以用cubic-bezier来自定义速度曲线，规定是cubic-bezier(X1, Y1, X2, Y2)，其中P1点坐标为(X1,Y1)，P2点坐标为(X2,Y2)。例如上述所说的linear函数可以写为c<code>ubic-bezier(0, 0, 1, 1)</code></p>
<p><img src="/2017/09/01/如何快速准确沟通动效需求-产品必备技能/741039-4016cb02499bb127.jpg" alt="741039-4016cb02499bb127"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;静态页面UI提交给开发需要输出有效的切图和尺寸标注，同样动态也需要输出切图和标注，不过标注需要包含如下：&lt;strong&gt;属性（位置、大小、角度、透明度）、时间（开始时间、持续时间）、速度曲线&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;属性-amp-时间-五要素&quot;&gt;&lt;a href=&quot;#属性-amp-时间-五要素&quot; class=&quot;headerlink&quot; title=&quot;属性&amp;amp;时间 - 五要素&quot;&gt;&lt;/a&gt;属性&amp;amp;时间 - 五要素&lt;/h4&gt;&lt;p&gt;几乎所有的动态效果，都可以由如下的五种要素构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;移动&lt;/li&gt;
&lt;li&gt;缩放&lt;/li&gt;
&lt;li&gt;旋转&lt;/li&gt;
&lt;li&gt;透明&lt;/li&gt;
&lt;li&gt;起始&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
