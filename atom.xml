<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>末小山 | 解锁产品&amp;数据成就</title>
  <subtitle>积石成岩 流则不荒</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mihawkmah.github.io/"/>
  <updated>2017-09-01T08:29:44.000Z</updated>
  <id>https://mihawkmah.github.io/</id>
  
  <author>
    <name>Mihawkmah</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何快速准确沟通动效需求 | 产品必备技能</title>
    <link href="https://mihawkmah.github.io/2017/09/01/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%87%86%E7%A1%AE%E6%B2%9F%E9%80%9A%E5%8A%A8%E6%95%88%E9%9C%80%E6%B1%82-%E4%BA%A7%E5%93%81%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD/"/>
    <id>https://mihawkmah.github.io/2017/09/01/如何快速准确沟通动效需求-产品必备技能/</id>
    <published>2017-09-01T08:27:00.000Z</published>
    <updated>2017-09-01T08:29:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>静态页面UI提交给开发需要输出有效的切图和尺寸标注，同样动态也需要输出切图和标注，不过标注需要包含如下：<strong>属性（位置、大小、角度、透明度）、时间（开始时间、持续时间）、速度曲线</strong>。</p>
<h4 id="属性-amp-时间-五要素"><a href="#属性-amp-时间-五要素" class="headerlink" title="属性&amp;时间 - 五要素"></a>属性&amp;时间 - 五要素</h4><p>几乎所有的动态效果，都可以由如下的五种要素构成：</p>
<ul>
<li>移动</li>
<li>缩放</li>
<li>旋转</li>
<li>透明</li>
<li>起始</li>
</ul>
<h4 id="速度曲线-缓动函数"><a href="#速度曲线-缓动函数" class="headerlink" title="速度曲线 - 缓动函数"></a>速度曲线 - 缓动函数</h4><p>利用CSS3的@keyframes规则和动画属性可以创建动画，取代Flash、JavaScript。现实中物体运动过程总是时而加速、时而减速，我们的大脑习惯了这种自然的运动方式，利用速度曲线函数可以实现这种效果，animation-timing-function属性可以设置运动曲线，默认是”ease”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Linear：匀速运动</div><div class="line"></div><div class="line">Ease：慢速开始，然后变快，然后慢速结束</div><div class="line"></div><div class="line">Ease-out：先快后慢</div><div class="line"></div><div class="line">Ease-in：先慢后快</div><div class="line"></div><div class="line">ease-in-out：以慢速开始和结束</div></pre></td></tr></table></figure>
<p>还可以用cubic-bezier来自定义速度曲线，规定是cubic-bezier(X1, Y1, X2, Y2)，其中P1点坐标为(X1,Y1)，P2点坐标为(X2,Y2)。例如上述所说的linear函数可以写为c<code>ubic-bezier(0, 0, 1, 1)</code></p>
<p><img src="/2017/09/01/如何快速准确沟通动效需求-产品必备技能/741039-4016cb02499bb127.jpg" alt="741039-4016cb02499bb127"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;静态页面UI提交给开发需要输出有效的切图和尺寸标注，同样动态也需要输出切图和标注，不过标注需要包含如下：&lt;strong&gt;属性（位置、大小、角度、透明度）、时间（开始时间、持续时间）、速度曲线&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;属性-amp-时间-五要素&quot;&gt;&lt;a h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目管理框架 | 短平快推动项目</title>
    <link href="https://mihawkmah.github.io/2017/08/24/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6-%E7%9F%AD%E5%B9%B3%E5%BF%AB%E6%8E%A8%E5%8A%A8%E9%A1%B9%E7%9B%AE/"/>
    <id>https://mihawkmah.github.io/2017/08/24/项目管理框架-短平快推动项目/</id>
    <published>2017-08-24T05:38:20.000Z</published>
    <updated>2017-09-01T08:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>实际工作中为了确保项目按照进度顺利完成，产品经理需要对项目进行一定的管理和把控，这个过程中包含了时间管理、人员管理、资源的控制协调等。产品相较于研发在思考的维度上往往更具有深度和广度，所以更加适合进行项目的管理工作。研发往往只会通过实现这个维度去思考问题，而产品则需要考虑体验、交互、用户、产品、市场等一系列影响项目的因素。</p>
<a id="more"></a>
<h3 id="项目管理的9大知识领域"><a href="#项目管理的9大知识领域" class="headerlink" title="项目管理的9大知识领域"></a>项目管理的9大知识领域</h3><blockquote>
<p>整合管理：以全盘视野，掌控项目全程</p>
<p>项目范围管理：达成目标，哪些该做、哪些不该做？</p>
<p>时间管理：赋予合理期限，准时开工、准时收工</p>
<p>成本管理：估算、预算，控制，3阶段掌握成本</p>
<p>质量管理： 质量，来自好计划，而不是多检验</p>
<p>人力资源管理：调度人力、划分职权，成员产能不浪费</p>
<p>沟通管理：花80%时间沟通，让对的人有对的信息</p>
<p>风险管理：提早预防、加速应变，将不确定降到最低</p>
<p>采购管理：挑选优质外包商，提升成本效益</p>
</blockquote>
<p><img src="/2017/08/24/项目管理框架-短平快推动项目/项目管理框架.jpg" alt="项目管理框架"></p>
<p>实际工作中短平快的沟通和项目管理有利于项目的高效进行，推荐使用<strong>OPPM</strong>项目管理方法，以目标为导向的过程化绩效管理。</p>
<p><img src="/2017/08/24/项目管理框架-短平快推动项目/OPPM项目管理.jpg" alt="OPPM"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际工作中为了确保项目按照进度顺利完成，产品经理需要对项目进行一定的管理和把控，这个过程中包含了时间管理、人员管理、资源的控制协调等。产品相较于研发在思考的维度上往往更具有深度和广度，所以更加适合进行项目的管理工作。研发往往只会通过实现这个维度去思考问题，而产品则需要考虑体验、交互、用户、产品、市场等一系列影响项目的因素。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>原型文档框架 | 高效沟通传达方案</title>
    <link href="https://mihawkmah.github.io/2017/08/16/%E5%8E%9F%E5%9E%8B%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6-%E9%AB%98%E6%95%88%E6%B2%9F%E9%80%9A%E4%BC%A0%E8%BE%BE%E6%96%B9%E6%A1%88/"/>
    <id>https://mihawkmah.github.io/2017/08/16/原型文档框架-高效沟通传达方案/</id>
    <published>2017-08-16T07:23:32.000Z</published>
    <updated>2017-08-28T07:59:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>当产品的需求落地后，需要将所需的功能高效的传达给UI、前端、研发，这个时候原型设计的好坏就起到了至关重要的作用，需求传达不明确会导致产品反复修改，浪费大量的设计开发资源，下面是我最近总结的原型设计框架，我的习惯是交互直接在原型中标注。</p>
<blockquote>
<p>在允许的范围内（不同的输入输出限制下），努力寻找、选择、创造一些套路，影响用户行为，让用户以更好的体验完成自身目标以及产品目标。</p>
</blockquote>
<a id="more"></a>
<p><img src="/2017/08/16/原型文档框架-高效沟通传达方案/文档框架.jpg" alt="文档框架"></p>
<p><img src="/2017/08/16/原型文档框架-高效沟通传达方案/原型框架.jpg" alt="原型框架"></p>
<blockquote>
<p>测试文档模板：编号、功能元素、前置条件、操作步骤、预期结果、是否通过、实际结果、反馈建议</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当产品的需求落地后，需要将所需的功能高效的传达给UI、前端、研发，这个时候原型设计的好坏就起到了至关重要的作用，需求传达不明确会导致产品反复修改，浪费大量的设计开发资源，下面是我最近总结的原型设计框架，我的习惯是交互直接在原型中标注。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在允许的范围内（不同的输入输出限制下），努力寻找、选择、创造一些套路，影响用户行为，让用户以更好的体验完成自身目标以及产品目标。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>产品冲刺框架 | 从0到1快速落地产品</title>
    <link href="https://mihawkmah.github.io/2017/08/09/%E4%BA%A7%E5%93%81%E5%86%B2%E5%88%BA%E6%A1%86%E6%9E%B6%20%7C%20%E4%BB%8E0%E5%88%B01%E5%BF%AB%E9%80%9F%E8%90%BD%E5%9C%B0%E4%BA%A7%E5%93%81/"/>
    <id>https://mihawkmah.github.io/2017/08/09/产品冲刺框架 | 从0到1快速落地产品/</id>
    <published>2017-08-09T03:29:31.000Z</published>
    <updated>2017-08-16T07:32:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>产品在工作过程中往往面对来自各方的需求，工作一多便容易失去头绪，在这个过程中不断踩坑不断总结，得出一套属于自己的产品方法论，才能更好的落地一款产品。</p>
<p>产品冲刺框架，经历需求分析 - 从需求到功能 - 功能元素梳理这三大过程。框架可以起到地图的作用，在工作过程中帮助你查漏补缺，提高思维效率，如果有效就拿来用吧。</p>
<a id="more"></a>
<p><img src="/2017/08/09/产品冲刺框架 | 从0到1快速落地产品/产品冲刺框架.jpg" alt="产品冲刺框架"></p>
<div class="tip"><br><br>版权归属 禁止转载<br><br></div>

<div class="tip"><br><br>如需转载 请联系微信mihawkmah<br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;产品在工作过程中往往面对来自各方的需求，工作一多便容易失去头绪，在这个过程中不断踩坑不断总结，得出一套属于自己的产品方法论，才能更好的落地一款产品。&lt;/p&gt;
&lt;p&gt;产品冲刺框架，经历需求分析 - 从需求到功能 - 功能元素梳理这三大过程。框架可以起到地图的作用，在工作过程中帮助你查漏补缺，提高思维效率，如果有效就拿来用吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MAC使用Hexo在GitHub搭建静态博客</title>
    <link href="https://mihawkmah.github.io/2017/08/04/MAC%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>https://mihawkmah.github.io/2017/08/04/MAC使用Hexo在GitHub搭建静态博客/</id>
    <published>2017-08-04T07:36:58.000Z</published>
    <updated>2017-08-16T07:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-MAC本地环境准备"><a href="#1-MAC本地环境准备" class="headerlink" title="1. MAC本地环境准备"></a>1. MAC本地环境准备</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>官网下载安装包安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">https://hexo.io/zh-cn/</a></p>
<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p><code>brew install git</code></p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p><code>sudo npm install -g hexo</code></p>
<a id="more"></a>
<h4 id="建立本地网站"><a href="#建立本地网站" class="headerlink" title="建立本地网站"></a>建立本地网站</h4><p><code>hexo init hexo</code></p>
<p><code>cd hexo</code></p>
<p><code>npm install</code></p>
<h4 id="开启本地服务器"><a href="#开启本地服务器" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h4><p><code>hexo s</code></p>
<h3 id="2-将博客发布到GitHub"><a href="#2-将博客发布到GitHub" class="headerlink" title="2. 将博客发布到GitHub"></a>2. 将博客发布到GitHub</h3><h4 id="检查是否存在SSH-keys，如果有文件id-rsa-pub或id-dsa-pub则存在。"><a href="#检查是否存在SSH-keys，如果有文件id-rsa-pub或id-dsa-pub则存在。" class="headerlink" title="检查是否存在SSH keys，如果有文件id_rsa.pub或id_dsa.pub则存在。"></a>检查是否存在SSH keys，如果有文件id_rsa.pub或id_dsa.pub则存在。</h4><p><code>ls -al ~/.ssh</code></p>
<p>如果不存在则执行命令生成SSH keys</p>
<p><code>ssh-keygen -t rsa -C &quot;mihawkmah@gmail.com&quot;</code></p>
<h4 id="添加到GitHub"><a href="#添加到GitHub" class="headerlink" title="添加到GitHub"></a>添加到GitHub</h4><p>Find前往文件夹<code>~/.ssh/id_rsa.pub</code>打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p>
<p>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方<code>Add key</code>绿色按钮即可。</p>
<h4 id="配置-config-yml，文件末尾修改为"><a href="#配置-config-yml，文件末尾修改为" class="headerlink" title="配置_config.yml，文件末尾修改为"></a>配置_config.yml，文件末尾修改为</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:Mihawkmah/Mihawkmah.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h4 id="在本地博客目录下运行"><a href="#在本地博客目录下运行" class="headerlink" title="在本地博客目录下运行"></a>在本地博客目录下运行</h4><p><code>npm install hexo-deployer-git --save</code></p>
<h4 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h4><p><code>hexo g</code></p>
<p><code>hexo d</code></p>
<h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h3><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</div><div class="line"></div><div class="line">git clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo</div></pre></td></tr></table></figure>
<p>修改 _config.yml 的 theme 配置项为 apollo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">theme: apollo</div><div class="line"></div><div class="line"># 在归档页面显示所有文章</div><div class="line"># 需要上面安装的 hexo-generator-archive 插件支持</div><div class="line">archive_generator:</div><div class="line">    per_page: 0</div><div class="line">    yearly: false</div><div class="line">    monthly: false</div><div class="line">    daily: false</div></pre></td></tr></table></figure>
<h4 id="日常更新发布"><a href="#日常更新发布" class="headerlink" title="日常更新发布"></a>日常更新发布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure>
<h4 id="MD文件的图片引用"><a href="#MD文件的图片引用" class="headerlink" title="MD文件的图片引用"></a>MD文件的图片引用</h4><p>在hexo目录下执行</p>
<p><code>npm install hexo-asset-image --save</code></p>
<p>安装完成后，hexo新建文章时会发现多出一个与文章名字相同的图片文件夹，即可用 <code>![logo](文件夹/logo.jpg)</code> 直接插入 <code>logo.jpg</code></p>
<blockquote>
<p>包地址：<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">https://github.com/CodeFalling/hexo-asset-image</a></p>
</blockquote>
<h4 id="显示文章摘要"><a href="#显示文章摘要" class="headerlink" title="显示文章摘要"></a>显示文章摘要</h4><p>在文章摘要之后其他内容之前添加 HTML 注释标签</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!-- more --&gt;</div></pre></td></tr></table></figure>
<div class="tip"><br><br>版权归属 禁止转载<br><br></div>

<div class="tip"><br><br>如需转载 请联系微信mihawkmah<br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-MAC本地环境准备&quot;&gt;&lt;a href=&quot;#1-MAC本地环境准备&quot; class=&quot;headerlink&quot; title=&quot;1. MAC本地环境准备&quot;&gt;&lt;/a&gt;1. MAC本地环境准备&lt;/h3&gt;&lt;h4 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;安装Node.js&lt;/h4&gt;&lt;p&gt;官网下载安装包安装&lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/zh-cn/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装Git&quot;&gt;&lt;a href=&quot;#安装Git&quot; class=&quot;headerlink&quot; title=&quot;安装Git&quot;&gt;&lt;/a&gt;安装Git&lt;/h4&gt;&lt;p&gt;&lt;code&gt;brew install git&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h4&gt;&lt;p&gt;&lt;code&gt;sudo npm install -g hexo&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>轻松4步完成Flask博客Apache服务器搭建</title>
    <link href="https://mihawkmah.github.io/2017/08/04/%E8%BD%BB%E6%9D%BE4%E6%AD%A5%E5%AE%8C%E6%88%90Flask%E5%8D%9A%E5%AE%A2Apache%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>https://mihawkmah.github.io/2017/08/04/轻松4步完成Flask博客Apache服务器搭建/</id>
    <published>2017-08-04T06:40:00.000Z</published>
    <updated>2017-08-16T07:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第1步-服务器配置"><a href="#第1步-服务器配置" class="headerlink" title="第1步 服务器配置"></a>第1步 服务器配置</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul>
<li><p>使用centos-6-x86系统</p>
</li>
<li><p>用iterm连接服务器 </p>
<p><code>ssh root@67.209.189.156 -p 27556</code></p>
<a id="more"></a>
</li>
<li><p>在iterm按快捷键option+command+F打开密码管理，输入服务器密码。打开菜单Profiles-Advanced-Edit配置自动弹出密码，其中Regular Expression填写root@67.209.189.156’s password:，Action填写Open Password Manager，然后选择对应的服务器密码。</p>
</li>
<li><p>升级服务器</p>
<p><code>yum update</code></p>
</li>
<li><p>编译环境准备</p>
<p><code>yum groupinstall &#39;Development Tools&#39;</code> </p>
<p><code>yum install zlib-devel bzip2-devel openssl-devel ncurese-devel wget</code></p>
<p>​</p>
<h4 id="安装Python3-6"><a href="#安装Python3-6" class="headerlink" title="安装Python3.6"></a>安装Python3.6</h4></li>
<li><p>下载Python3.6代码包</p>
<p><code>wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz</code></p>
</li>
<li><p>编译</p>
<p><code>tar Jxvf Python-3.5.1.tar.xz</code></p>
<p><code>cd Python-3.5.1</code> </p>
<p><code>./configure --prefix=/usr/local/python3</code> </p>
<p><code>make &amp;&amp; make install</code></p>
<p>​</p>
<h4 id="更换系统默认Python版本"><a href="#更换系统默认Python版本" class="headerlink" title="更换系统默认Python版本"></a><strong>更换系统默认Python版本</strong></h4></li>
<li><p>1 备份旧版本 Python</p>
<p><code>mv /usr/bin/python /usr/bin/python2.6.6</code></p>
</li>
<li><p>2 新建指向新版本 Python 以及 pip 的软连接</p>
<p><code>ln -s /usr/local/python3/bin/python3.6 /usr/bin/python</code></p>
<p><code>ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</code></p>
</li>
<li><p>3 检验 Python 及 pip 版本</p>
<p><code>python -V</code></p>
<p><code>pip -V</code></p>
<p>​</p>
<h4 id="更新yum相关设置"><a href="#更新yum相关设置" class="headerlink" title="更新yum相关设置"></a><strong>更新yum相关设置</strong></h4></li>
<li><p>因 yum 的功能依赖 Python2 更改默认 Python版本后会导致 yum无法正常工作</p>
</li>
<li><p>执行以下命令</p>
<p><code>vi /usr/bin/yum</code></p>
</li>
<li><p>打开文件，修改第一行为：</p>
<p><code>#!/usr/bin/python2.7</code></p>
</li>
</ul>
<h3 id="第2步-Apache配置"><a href="#第2步-Apache配置" class="headerlink" title="第2步 Apache配置"></a>第2步 Apache配置</h3><ul>
<li><h4 id="安装Apache服务器相关包"><a href="#安装Apache服务器相关包" class="headerlink" title="安装Apache服务器相关包"></a>安装Apache服务器相关包</h4><p><code>yum install httpd</code></p>
<p><code>yum install httpd-devel</code></p>
<p>##### </p>
</li>
<li><h4 id="安装mod-wsgi-so"><a href="#安装mod-wsgi-so" class="headerlink" title="安装mod_wsgi.so"></a>安装mod_wsgi.so</h4></li>
<li><p>不能使用yum安装，使用Python3.6安装，参考网址<a href="http://modwsgi.readthedocs.io/en/develop/user-guides/quick-installation-guide.html" target="_blank" rel="external">http://modwsgi.readthedocs.io/en/develop/user-guides/quick-installation-guide.html</a></p>
</li>
<li><p>下载安装包<a href="https://github.com/GrahamDumpleton/mod_wsgi/releases" target="_blank" rel="external">https://github.com/GrahamDumpleton/mod_wsgi/releases</a></p>
</li>
<li><p>编译</p>
<p><code>tar xvfz mod_wsgi-X.Y.tar.gz</code></p>
<p><code>./configure --with-python=/usr/local/python3/bin/python3.6</code></p>
<p><code>make</code></p>
<p><code>make install</code></p>
</li>
<li><p>记录安装完成后显示的路径</p>
<p><code>/usr/lib/httpd/modules</code></p>
<p>​</p>
</li>
</ul>
<h3 id="第3步-数据库配置"><a href="#第3步-数据库配置" class="headerlink" title="第3步 数据库配置"></a>第3步 数据库配置</h3><ul>
<li><p>查看系统版本，如果输出的信息包含 x86_64，说明你的系统是64位，如果不包含说明是32位系统。</p>
<p><code>uname -a</code></p>
</li>
<li><p>创建10gen.repo文件</p>
<p><code>cd /etc/yum.repos.d/</code></p>
<p><code>vi 10gen.repo</code></p>
</li>
<li><p>把下列信息粘贴到10gen.repo文件中（32位系统）</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[10gen]  </div><div class="line">name=10gen Repository  </div><div class="line">baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686  </div><div class="line">gpgcheck=0</div></pre></td></tr></table></figure>
<ul>
<li><p>查看是否生效</p>
<p><code>yum info mongo-10gen-server</code></p>
</li>
<li><p>开始安装</p>
<p><code>yum install mongo-10gen-server</code>  </p>
</li>
<li><p>配置文件地址 /etc/mongod.conf</p>
</li>
<li><p>启动mongodb</p>
<p><code>service mongod start</code></p>
<p>​</p>
</li>
</ul>
<h3 id="第4步-网站配置"><a href="#第4步-网站配置" class="headerlink" title="第4步 网站配置"></a>第4步 网站配置</h3><ul>
<li><p>Flask博客环境配置</p>
<p><code>pip install flask-mongoengine</code></p>
<p><code>pip install flask-login</code></p>
<p><code>pip install flask</code></p>
<p><code>pip install flask-wtf</code></p>
<p><code>pip install jinja2</code></p>
</li>
<li><p>打开配置文件 </p>
<p><code>vi /etc/httpd/conf/httpd.conf</code></p>
</li>
<li><p>将如下代码加入到配置文件中，路径为mod_wsgi.so安装的路径。加在mod_version.so之后</p>
<p><code>LoadModule wsgi_module /usr/lib/httpd/modules/mod_wsgi.so</code></p>
</li>
<li><p>将如下代码加在<directory "="" var="" www="" html"=""></directory>整段代码之后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#WSGIPythonHome /usr/local/python3/bin </div><div class="line">&lt;VirtualHost *:80&gt; </div><div class="line">ServerName example.com </div><div class="line">WSGIScriptAlias /blog /var/www/html/blog/flask.wsgi </div><div class="line">&lt;Directory /var/www/html/blog&gt; </div><div class="line">#Require all granted </div><div class="line">#Require host ip </div><div class="line">Order allow,deny </div><div class="line">Allow from all </div><div class="line">&lt;/Directory&gt; </div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>配置flask.wsgi代码为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys </div><div class="line">sys.path.insert(0, &quot;/var/www/html/blog&quot;) #工程根目录，即wsgi文件的路径</div><div class="line">from app import app as application</div></pre></td></tr></table></figure>
</li>
<li><p>目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ 根目录 /var/www/html/blog</div><div class="line">  + flask.wsgi</div><div class="line">  + app/</div><div class="line">    + __init__.py</div><div class="line">    + views.py</div><div class="line">    + models.py</div><div class="line">    + forms.py</div><div class="line">    + static/</div><div class="line">      + ckeditor/</div><div class="line">      + images/</div><div class="line">    + templates/</div><div class="line">      + index.html</div><div class="line">      + base.html</div></pre></td></tr></table></figure>
<p>init__.py文件如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from flask import Flask</div><div class="line">from flask_mongoengine import MongoEngine</div><div class="line">from flask.ext.login import LoginManager</div><div class="line"></div><div class="line"># 初始化flask应用</div><div class="line">app = Flask(__name__)</div><div class="line">app.config.from_object(&apos;config&apos;)</div><div class="line"></div><div class="line"># 初始化数据库</div><div class="line">app.config[&apos;MONGODB_SETTINGS&apos;] = &#123;</div><div class="line">    &apos;db&apos;: &apos;mblog&apos;,</div><div class="line">    &apos;host&apos;: &apos;127.0.0.1&apos;,</div><div class="line">    &apos;port&apos;: 27017</div><div class="line">&#125;</div><div class="line">db = MongoEngine(app)</div><div class="line"></div><div class="line"># 初始化Flasklogin</div><div class="line">lm = LoginManager(app)</div><div class="line"></div><div class="line">from app import views,models</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(host=&apos;0.0.0.0&apos;,port=5000,debug=True)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p>显示软链接对应路径</p>
<p><code>ls -l /usr/bin/python</code></p>
</li>
<li><p>显示python地址</p>
<p><code>which python</code></p>
</li>
<li><p>查看错误日志</p>
<p><code>tail -f /var/log/httpd/error_log</code></p>
</li>
</ul>
<blockquote>
<p>博客源码：<a href="https://github.com/Mihawkmah/Flask.blog" target="_blank" rel="external">https://github.com/Mihawkmah/Flask.blog</a></p>
</blockquote>
<div class="tip"><br><br>版权归属 禁止转载<br><br></div>

<div class="tip"><br><br>如需转载 请联系微信mihawkmah<br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第1步-服务器配置&quot;&gt;&lt;a href=&quot;#第1步-服务器配置&quot; class=&quot;headerlink&quot; title=&quot;第1步 服务器配置&quot;&gt;&lt;/a&gt;第1步 服务器配置&lt;/h3&gt;&lt;h4 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用centos-6-x86系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用iterm连接服务器 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh root@67.209.189.156 -p 27556&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
